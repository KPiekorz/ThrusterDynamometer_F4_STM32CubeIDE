
ThrusterDynamometer_F4_STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007928  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08007af8  08007af8  00017af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d90  08007d90  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d98  08007d98  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200001dc  08007f7c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  08007f7c  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126af  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027ac  00000000  00000000  000328bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  00035068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  000362f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002f6a  00000000  00000000  00037460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df2e  00000000  00000000  0003a3ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4b7f  00000000  00000000  000482f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ce77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f4  00000000  00000000  0011cef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ae0 	.word	0x08007ae0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007ae0 	.word	0x08007ae0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <DS18B20_StartAll+0x20>)
 8000f8e:	f000 fe38 	bl	8001c02 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000f92:	21cc      	movs	r1, #204	; 0xcc
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <DS18B20_StartAll+0x20>)
 8000f96:	f000 feb7 	bl	8001d08 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000f9a:	2144      	movs	r1, #68	; 0x44
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DS18B20_StartAll+0x20>)
 8000f9e:	f000 feb3 	bl	8001d08 <OneWire_WriteByte>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000254 	.word	0x20000254

08000fac <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <DS18B20_Read+0x144>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	79fa      	ldrb	r2, [r7, #7]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d301      	bcc.n	8000fc6 <DS18B20_Read+0x1a>
		return 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e090      	b.n	80010e8 <DS18B20_Read+0x13c>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif

	
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <DS18B20_Read+0x148>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f93c 	bl	8001250 <DS18B20_Is>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <DS18B20_Read+0x36>
		return 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e082      	b.n	80010e8 <DS18B20_Read+0x13c>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000fe2:	4845      	ldr	r0, [pc, #276]	; (80010f8 <DS18B20_Read+0x14c>)
 8000fe4:	f000 fe66 	bl	8001cb4 <OneWire_ReadBit>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e07a      	b.n	80010e8 <DS18B20_Read+0x13c>

	OneWire_Reset(&OneWire); // Reset the bus
 8000ff2:	4841      	ldr	r0, [pc, #260]	; (80010f8 <DS18B20_Read+0x14c>)
 8000ff4:	f000 fe05 	bl	8001c02 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4a3d      	ldr	r2, [pc, #244]	; (80010f4 <DS18B20_Read+0x148>)
 8000ffe:	4413      	add	r3, r2
 8001000:	4619      	mov	r1, r3
 8001002:	483d      	ldr	r0, [pc, #244]	; (80010f8 <DS18B20_Read+0x14c>)
 8001004:	f000 ffb4 	bl	8001f70 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001008:	21be      	movs	r1, #190	; 0xbe
 800100a:	483b      	ldr	r0, [pc, #236]	; (80010f8 <DS18B20_Read+0x14c>)
 800100c:	f000 fe7c 	bl	8001d08 <OneWire_WriteByte>
	
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8001010:	2300      	movs	r3, #0
 8001012:	74fb      	strb	r3, [r7, #19]
 8001014:	e00d      	b.n	8001032 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8001016:	7cfc      	ldrb	r4, [r7, #19]
 8001018:	4837      	ldr	r0, [pc, #220]	; (80010f8 <DS18B20_Read+0x14c>)
 800101a:	f000 fe92 	bl	8001d42 <OneWire_ReadByte>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	4423      	add	r3, r4
 8001028:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 800102c:	7cfb      	ldrb	r3, [r7, #19]
 800102e:	3301      	adds	r3, #1
 8001030:	74fb      	strb	r3, [r7, #19]
 8001032:	7cfb      	ldrb	r3, [r7, #19]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d9ee      	bls.n	8001016 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8001038:	7a3b      	ldrb	r3, [r7, #8]
 800103a:	b21a      	sxth	r2, r3
 800103c:	7a7b      	ldrb	r3, [r7, #9]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8001048:	482b      	ldr	r0, [pc, #172]	; (80010f8 <DS18B20_Read+0x14c>)
 800104a:	f000 fdda 	bl	8001c02 <OneWire_Reset>
	
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	115b      	asrs	r3, r3, #5
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	3309      	adds	r3, #9
 800105c:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	3b09      	subs	r3, #9
 8001062:	2b03      	cmp	r3, #3
 8001064:	d83a      	bhi.n	80010dc <DS18B20_Read+0x130>
 8001066:	a201      	add	r2, pc, #4	; (adr r2, 800106c <DS18B20_Read+0xc0>)
 8001068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106c:	0800107d 	.word	0x0800107d
 8001070:	08001095 	.word	0x08001095
 8001074:	080010ad 	.word	0x080010ad
 8001078:	080010c5 	.word	0x080010c5
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 800107c:	8a3b      	ldrh	r3, [r7, #16]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001086:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800108a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8001092:	e025      	b.n	80010e0 <DS18B20_Read+0x134>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8001094:	8a3b      	ldrh	r3, [r7, #16]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 80010aa:	e019      	b.n	80010e0 <DS18B20_Read+0x134>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 80010ac:	8a3b      	ldrh	r3, [r7, #16]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b6:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80010ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010be:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 80010c2:	e00d      	b.n	80010e0 <DS18B20_Read+0x134>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 80010c4:	8a3b      	ldrh	r3, [r7, #16]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ce:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80010fc <DS18B20_Read+0x150>
 80010d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d6:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 80010da:	e001      	b.n	80010e0 <DS18B20_Read+0x134>
		default: 
			result = 0xFF;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <DS18B20_Read+0x154>)
 80010de:	617b      	str	r3, [r7, #20]
	}
	
	*destination = result;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	601a      	str	r2, [r3, #0]
	
	return 1; //temperature valid
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	200001f8 	.word	0x200001f8
 80010f4:	20000214 	.word	0x20000214
 80010f8:	20000254 	.word	0x20000254
 80010fc:	3d800000 	.word	0x3d800000
 8001100:	437f0000 	.word	0x437f0000

08001104 <DS18B20_SetResolution>:
	
	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8001114:	4b4b      	ldr	r3, [pc, #300]	; (8001244 <DS18B20_SetResolution+0x140>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	79fa      	ldrb	r2, [r7, #7]
 800111a:	429a      	cmp	r2, r3
 800111c:	d301      	bcc.n	8001122 <DS18B20_SetResolution+0x1e>
		return 0;
 800111e:	2300      	movs	r3, #0
 8001120:	e08c      	b.n	800123c <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4a48      	ldr	r2, [pc, #288]	; (8001248 <DS18B20_SetResolution+0x144>)
 8001128:	4413      	add	r3, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f890 	bl	8001250 <DS18B20_Is>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <DS18B20_SetResolution+0x36>
		return 0;
 8001136:	2300      	movs	r3, #0
 8001138:	e080      	b.n	800123c <DS18B20_SetResolution+0x138>
	
	OneWire_Reset(&OneWire); // Reset the bus
 800113a:	4844      	ldr	r0, [pc, #272]	; (800124c <DS18B20_SetResolution+0x148>)
 800113c:	f000 fd61 	bl	8001c02 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4a40      	ldr	r2, [pc, #256]	; (8001248 <DS18B20_SetResolution+0x144>)
 8001146:	4413      	add	r3, r2
 8001148:	4619      	mov	r1, r3
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <DS18B20_SetResolution+0x148>)
 800114c:	f000 ff10 	bl	8001f70 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001150:	21be      	movs	r1, #190	; 0xbe
 8001152:	483e      	ldr	r0, [pc, #248]	; (800124c <DS18B20_SetResolution+0x148>)
 8001154:	f000 fdd8 	bl	8001d08 <OneWire_WriteByte>
	
	OneWire_ReadByte(&OneWire);
 8001158:	483c      	ldr	r0, [pc, #240]	; (800124c <DS18B20_SetResolution+0x148>)
 800115a:	f000 fdf2 	bl	8001d42 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 800115e:	483b      	ldr	r0, [pc, #236]	; (800124c <DS18B20_SetResolution+0x148>)
 8001160:	f000 fdef 	bl	8001d42 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8001164:	4839      	ldr	r0, [pc, #228]	; (800124c <DS18B20_SetResolution+0x148>)
 8001166:	f000 fdec 	bl	8001d42 <OneWire_ReadByte>
 800116a:	4603      	mov	r3, r0
 800116c:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 800116e:	4837      	ldr	r0, [pc, #220]	; (800124c <DS18B20_SetResolution+0x148>)
 8001170:	f000 fde7 	bl	8001d42 <OneWire_ReadByte>
 8001174:	4603      	mov	r3, r0
 8001176:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001178:	4834      	ldr	r0, [pc, #208]	; (800124c <DS18B20_SetResolution+0x148>)
 800117a:	f000 fde2 	bl	8001d42 <OneWire_ReadByte>
 800117e:	4603      	mov	r3, r0
 8001180:	73fb      	strb	r3, [r7, #15]
	
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	2b09      	cmp	r3, #9
 8001186:	d108      	bne.n	800119a <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800118e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f023 0320 	bic.w	r3, r3, #32
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e022      	b.n	80011e0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b0a      	cmp	r3, #10
 800119e:	d108      	bne.n	80011b2 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011a6:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e016      	b.n	80011e0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	2b0b      	cmp	r3, #11
 80011b6:	d108      	bne.n	80011ca <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011be:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	f023 0320 	bic.w	r3, r3, #32
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e00a      	b.n	80011e0 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	2b0c      	cmp	r3, #12
 80011ce:	d107      	bne.n	80011e0 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d6:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f043 0320 	orr.w	r3, r3, #32
 80011de:	73fb      	strb	r3, [r7, #15]
	}
	
	OneWire_Reset(&OneWire); // Reset the bus
 80011e0:	481a      	ldr	r0, [pc, #104]	; (800124c <DS18B20_SetResolution+0x148>)
 80011e2:	f000 fd0e 	bl	8001c02 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <DS18B20_SetResolution+0x144>)
 80011ec:	4413      	add	r3, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	4816      	ldr	r0, [pc, #88]	; (800124c <DS18B20_SetResolution+0x148>)
 80011f2:	f000 febd 	bl	8001f70 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 80011f6:	214e      	movs	r1, #78	; 0x4e
 80011f8:	4814      	ldr	r0, [pc, #80]	; (800124c <DS18B20_SetResolution+0x148>)
 80011fa:	f000 fd85 	bl	8001d08 <OneWire_WriteByte>
	
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	4619      	mov	r1, r3
 8001202:	4812      	ldr	r0, [pc, #72]	; (800124c <DS18B20_SetResolution+0x148>)
 8001204:	f000 fd80 	bl	8001d08 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8001208:	7b7b      	ldrb	r3, [r7, #13]
 800120a:	4619      	mov	r1, r3
 800120c:	480f      	ldr	r0, [pc, #60]	; (800124c <DS18B20_SetResolution+0x148>)
 800120e:	f000 fd7b 	bl	8001d08 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <DS18B20_SetResolution+0x148>)
 8001218:	f000 fd76 	bl	8001d08 <OneWire_WriteByte>
	
	OneWire_Reset(&OneWire); // Reset the bus
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <DS18B20_SetResolution+0x148>)
 800121e:	f000 fcf0 	bl	8001c02 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <DS18B20_SetResolution+0x144>)
 8001228:	4413      	add	r3, r2
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <DS18B20_SetResolution+0x148>)
 800122e:	f000 fe9f 	bl	8001f70 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8001232:	2148      	movs	r1, #72	; 0x48
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <DS18B20_SetResolution+0x148>)
 8001236:	f000 fd67 	bl	8001d08 <OneWire_WriteByte>
	
	return 1;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001f8 	.word	0x200001f8
 8001248:	20000214 	.word	0x20000214
 800124c:	20000254 	.word	0x20000254

08001250 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b28      	cmp	r3, #40	; 0x28
 800125e:	d101      	bne.n	8001264 <DS18B20_Is+0x14>
		return 1;
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <DS18B20_Is+0x16>
	return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <DS18B20_AllDone+0x10>)
 800127a:	f000 fd1b 	bl	8001cb4 <OneWire_ReadBit>
 800127e:	4603      	mov	r3, r0
}
 8001280:	4618      	mov	r0, r3
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000254 	.word	0x20000254

08001288 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 800128e:	f7ff fff1 	bl	8001274 <DS18B20_AllDone>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d02e      	beq.n	80012f6 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001298:	2300      	movs	r3, #0
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	e026      	b.n	80012ec <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4a17      	ldr	r2, [pc, #92]	; (8001300 <DS18B20_ReadAll+0x78>)
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	330c      	adds	r3, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <DS18B20_ReadAll+0x78>)
 80012b2:	4413      	add	r3, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffcb 	bl	8001250 <DS18B20_Is>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d012      	beq.n	80012e6 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	3308      	adds	r3, #8
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <DS18B20_ReadAll+0x78>)
 80012c8:	441a      	add	r2, r3
 80012ca:	79fc      	ldrb	r4, [r7, #7]
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe6b 	bl	8000fac <DS18B20_Read>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4619      	mov	r1, r3
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <DS18B20_ReadAll+0x78>)
 80012dc:	0123      	lsls	r3, r4, #4
 80012de:	4413      	add	r3, r2
 80012e0:	330c      	adds	r3, #12
 80012e2:	460a      	mov	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	3301      	adds	r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <DS18B20_ReadAll+0x7c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d3d3      	bcc.n	800129e <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000214 	.word	0x20000214
 8001304:	200001f8 	.word	0x200001f8

08001308 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return TempSensorCount;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <DS18B20_Quantity+0x14>)
 800130e:	781b      	ldrb	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200001f8 	.word	0x200001f8

08001320 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <DS18B20_GetTemperature+0x40>)
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	4413      	add	r3, r2
 8001334:	330c      	adds	r3, #12
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <DS18B20_GetTemperature+0x20>
		return 0;
 800133c:	2300      	movs	r3, #0
 800133e:	e008      	b.n	8001352 <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <DS18B20_GetTemperature+0x40>)
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4413      	add	r3, r2
 8001348:	3308      	adds	r3, #8
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	601a      	str	r2, [r3, #0]
	return 1;
 8001350:	2301      	movs	r3, #1

}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000214 	.word	0x20000214

08001364 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	2300      	movs	r3, #0
 8001374:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, temp_GPIO_Port, temp_Pin); // Init OneWire bus
 8001376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137a:	4924      	ldr	r1, [pc, #144]	; (800140c <DS18B20_Init+0xa8>)
 800137c:	4824      	ldr	r0, [pc, #144]	; (8001410 <DS18B20_Init+0xac>)
 800137e:	f000 fe31 	bl	8001fe4 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8001382:	4823      	ldr	r0, [pc, #140]	; (8001410 <DS18B20_Init+0xac>)
 8001384:	f000 fdd7 	bl	8001f36 <OneWire_First>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
	while(next)
 800138c:	e018      	b.n	80013c0 <DS18B20_Init+0x5c>
	{
		TempSensorCount++;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <DS18B20_Init+0xb0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <DS18B20_Init+0xb0>)
 8001398:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	73ba      	strb	r2, [r7, #14]
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <DS18B20_Init+0xb4>)
 80013a4:	4413      	add	r3, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	4819      	ldr	r0, [pc, #100]	; (8001410 <DS18B20_Init+0xac>)
 80013aa:	f000 fdff 	bl	8001fac <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80013ae:	4818      	ldr	r0, [pc, #96]	; (8001410 <DS18B20_Init+0xac>)
 80013b0:	f000 fdd1 	bl	8001f56 <OneWire_Next>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <DS18B20_Init+0xb0>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d803      	bhi.n	80013c8 <DS18B20_Init+0x64>
	while(next)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1e3      	bne.n	800138e <DS18B20_Init+0x2a>
 80013c6:	e000      	b.n	80013ca <DS18B20_Init+0x66>
			break;
 80013c8:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	737b      	strb	r3, [r7, #13]
 80013ce:	e014      	b.n	80013fa <DS18B20_Init+0x96>
	{
		if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	4a10      	ldr	r2, [pc, #64]	; (8001418 <DS18B20_Init+0xb4>)
 80013d6:	4413      	add	r3, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff39 	bl	8001250 <DS18B20_Is>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <DS18B20_Init+0x8c>
		{
			DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fe8a 	bl	8001104 <DS18B20_SetResolution>
		}

		DS18B20_StartAll(); // Start conversion on all sensors
 80013f0:	f7ff fdca 	bl	8000f88 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 80013f4:	7b7b      	ldrb	r3, [r7, #13]
 80013f6:	3301      	adds	r3, #1
 80013f8:	737b      	strb	r3, [r7, #13]
 80013fa:	7b7a      	ldrb	r2, [r7, #13]
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3e6      	bcc.n	80013d0 <DS18B20_Init+0x6c>
	}
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40020800 	.word	0x40020800
 8001410:	20000254 	.word	0x20000254
 8001414:	200001f8 	.word	0x200001f8
 8001418:	20000214 	.word	0x20000214

0800141c <add_to_sensor_table>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t sensor_data[4];

void add_to_sensor_table(uint8_t sensor_data[], float temp_1, float temp_2){
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	ed87 0a02 	vstr	s0, [r7, #8]
 8001428:	edc7 0a01 	vstr	s1, [r7, #4]

	uint16_t temp1_16 = (uint16_t)(temp_1*10);
 800142c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001430:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143c:	ee17 3a90 	vmov	r3, s15
 8001440:	82fb      	strh	r3, [r7, #22]
	uint16_t temp2_16 = (uint16_t)(temp_2*10);
 8001442:	edd7 7a01 	vldr	s15, [r7, #4]
 8001446:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800144a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001452:	ee17 3a90 	vmov	r3, s15
 8001456:	82bb      	strh	r3, [r7, #20]

	sensor_data[0] = (temp1_16>>8)&0xFF;
 8001458:	8afb      	ldrh	r3, [r7, #22]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2da      	uxtb	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	701a      	strb	r2, [r3, #0]
	sensor_data[1] = (temp1_16&0xFF);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3301      	adds	r3, #1
 8001468:	8afa      	ldrh	r2, [r7, #22]
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]

	sensor_data[2] = (temp2_16>>8)&0xFF;
 800146e:	8abb      	ldrh	r3, [r7, #20]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29a      	uxth	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3302      	adds	r3, #2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	701a      	strb	r2, [r3, #0]
	sensor_data[3] = (temp2_16&0xFF);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3303      	adds	r3, #3
 8001480:	8aba      	ldrh	r2, [r7, #20]
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	371c      	adds	r7, #28
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af02      	add	r7, sp, #8
 800149a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a20      	ldr	r2, [pc, #128]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d139      	bne.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x84>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80014a4:	2120      	movs	r1, #32
 80014a6:	481f      	ldr	r0, [pc, #124]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80014a8:	f001 ff97 	bl	80033da <HAL_GPIO_TogglePin>
//		sprintf(data, "%.1f	 |	%.1f\r\n", temperature1, temperature2);
//		sprintf(data, "%d	 |	%d\r\n", (int)(temperature1*10), (int)(temperature2*10));
		add_to_sensor_table(sensor_data, temperature1, temperature2);
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014b4:	ed93 7a00 	vldr	s14, [r3]
 80014b8:	eef0 0a47 	vmov.f32	s1, s14
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	481b      	ldr	r0, [pc, #108]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014c2:	f7ff ffab 	bl	800141c <add_to_sensor_table>

		HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014cc:	4819      	ldr	r0, [pc, #100]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014ce:	f001 ff6b 	bl	80033a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi2, sensor_data, 4);
 80014d2:	2204      	movs	r2, #4
 80014d4:	4916      	ldr	r1, [pc, #88]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014d6:	4818      	ldr	r0, [pc, #96]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80014d8:	f002 febe 	bl	8004258 <HAL_SPI_Transmit_DMA>

		sprintf(data, "%x	 |	%x			%x	 |	%x\r\n", sensor_data[0], sensor_data[1], sensor_data[2], sensor_data[3]);
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	4618      	mov	r0, r3
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014ea:	789b      	ldrb	r3, [r3, #2]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014f0:	78db      	ldrb	r3, [r3, #3]
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	9200      	str	r2, [sp, #0]
 80014f6:	4603      	mov	r3, r0
 80014f8:	460a      	mov	r2, r1
 80014fa:	4910      	ldr	r1, [pc, #64]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014fc:	4810      	ldr	r0, [pc, #64]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80014fe:	f004 ff0d 	bl	800631c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 8001502:	480f      	ldr	r0, [pc, #60]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001504:	f7fe fe84 	bl	8000210 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	490b      	ldr	r1, [pc, #44]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001514:	f003 fe15 	bl	8005142 <HAL_UART_Transmit>
	}
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200004dc 	.word	0x200004dc
 8001524:	40020000 	.word	0x40020000
 8001528:	200001fc 	.word	0x200001fc
 800152c:	20000200 	.word	0x20000200
 8001530:	20000268 	.word	0x20000268
 8001534:	40020400 	.word	0x40020400
 8001538:	200002c0 	.word	0x200002c0
 800153c:	08007af8 	.word	0x08007af8
 8001540:	200004a8 	.word	0x200004a8
 8001544:	2000055c 	.word	0x2000055c

08001548 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <HAL_SPI_TxCpltCallback+0x1c>)
 8001558:	f001 ff26 	bl	80033a8 <HAL_GPIO_WritePin>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40020400 	.word	0x40020400

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b598      	push	{r3, r4, r7, lr}
 800156a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156c:	f001 f83c 	bl	80025e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001570:	f000 f884 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f000 fa30 	bl	80019d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001578:	f000 fa06 	bl	8001988 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800157c:	f000 f9da 	bl	8001934 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001580:	f000 f8ee 	bl	8001760 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001584:	f000 f91a 	bl	80017bc <MX_SPI2_Init>
  MX_TIM1_Init();
 8001588:	f000 f94e 	bl	8001828 <MX_TIM1_Init>
  MX_TIM6_Init();
 800158c:	f000 f99c 	bl	80018c8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  DS18B20_Init(DS18B20_Resolution_12bits);
 8001590:	200c      	movs	r0, #12
 8001592:	f7ff fee7 	bl	8001364 <DS18B20_Init>
  DS18B20_StartAll();
 8001596:	f7ff fcf7 	bl	8000f88 <DS18B20_StartAll>

  DS18B20_ReadAll();
 800159a:	f7ff fe75 	bl	8001288 <DS18B20_ReadAll>
  HAL_Delay(2000);
 800159e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015a2:	f001 f893 	bl	80026cc <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim6);
 80015a6:	4830      	ldr	r0, [pc, #192]	; (8001668 <main+0x100>)
 80015a8:	f003 f9a9 	bl	80048fe <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	DS18B20_ReadAll();
 80015ac:	f7ff fe6c 	bl	8001288 <DS18B20_ReadAll>
		DS18B20_GetTemperature(0, &temperature1);
 80015b0:	492e      	ldr	r1, [pc, #184]	; (800166c <main+0x104>)
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff feb4 	bl	8001320 <DS18B20_GetTemperature>
		temperature1 = (1.0178117 * temperature1) - 0.5625;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <main+0x104>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffe3 	bl	8000588 <__aeabi_f2d>
 80015c2:	a323      	add	r3, pc, #140	; (adr r3, 8001650 <main+0xe8>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff f836 	bl	8000638 <__aeabi_dmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	4618      	mov	r0, r3
 80015d2:	4621      	mov	r1, r4
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <main+0x108>)
 80015da:	f7fe fe75 	bl	80002c8 <__aeabi_dsub>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	4618      	mov	r0, r3
 80015e4:	4621      	mov	r1, r4
 80015e6:	f7ff faff 	bl	8000be8 <__aeabi_d2f>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <main+0x104>)
 80015ee:	601a      	str	r2, [r3, #0]
		DS18B20_GetTemperature(1, &temperature2);
 80015f0:	4920      	ldr	r1, [pc, #128]	; (8001674 <main+0x10c>)
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fe94 	bl	8001320 <DS18B20_GetTemperature>
		temperature2 = (1.0176 * temperature2) - 0.4125;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <main+0x10c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffc3 	bl	8000588 <__aeabi_f2d>
 8001602:	a315      	add	r3, pc, #84	; (adr r3, 8001658 <main+0xf0>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7ff f816 	bl	8000638 <__aeabi_dmul>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	4618      	mov	r0, r3
 8001612:	4621      	mov	r1, r4
 8001614:	a312      	add	r3, pc, #72	; (adr r3, 8001660 <main+0xf8>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe fe55 	bl	80002c8 <__aeabi_dsub>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	4618      	mov	r0, r3
 8001624:	4621      	mov	r1, r4
 8001626:	f7ff fadf 	bl	8000be8 <__aeabi_d2f>
 800162a:	4602      	mov	r2, r0
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <main+0x10c>)
 800162e:	601a      	str	r2, [r3, #0]

		DS18B20_StartAll();
 8001630:	f7ff fcaa 	bl	8000f88 <DS18B20_StartAll>
		quality = DS18B20_Quantity();
 8001634:	f7ff fe68 	bl	8001308 <DS18B20_Quantity>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <main+0x110>)
 800163e:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1000);
 8001640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001644:	f001 f842 	bl	80026cc <HAL_Delay>
	  	DS18B20_ReadAll();
 8001648:	e7b0      	b.n	80015ac <main+0x44>
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	ebcfc753 	.word	0xebcfc753
 8001654:	3ff048f4 	.word	0x3ff048f4
 8001658:	f0068db9 	.word	0xf0068db9
 800165c:	3ff04816 	.word	0x3ff04816
 8001660:	66666666 	.word	0x66666666
 8001664:	3fda6666 	.word	0x3fda6666
 8001668:	200004dc 	.word	0x200004dc
 800166c:	200001fc 	.word	0x200001fc
 8001670:	3fe20000 	.word	0x3fe20000
 8001674:	20000200 	.word	0x20000200
 8001678:	200001f9 	.word	0x200001f9

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2234      	movs	r2, #52	; 0x34
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f004 f9e2 	bl	8005a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <SystemClock_Config+0xdc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a2b      	ldr	r2, [pc, #172]	; (8001758 <SystemClock_Config+0xdc>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <SystemClock_Config+0xdc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <SystemClock_Config+0xe0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a25      	ldr	r2, [pc, #148]	; (800175c <SystemClock_Config+0xe0>)
 80016c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <SystemClock_Config+0xe0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016dc:	2301      	movs	r3, #1
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e0:	2310      	movs	r3, #16
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e4:	2302      	movs	r3, #2
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016ec:	2308      	movs	r3, #8
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80016f0:	23b4      	movs	r3, #180	; 0xb4
 80016f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fae9 	bl	8003cdc <HAL_RCC_OscConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001710:	f000 fa06 	bl	8001b20 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001714:	f001 ffd8 	bl	80036c8 <HAL_PWREx_EnableOverDrive>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800171e:	f000 f9ff 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	230f      	movs	r3, #15
 8001724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001726:	2302      	movs	r3, #2
 8001728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800172e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001738:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	2105      	movs	r1, #5
 8001740:	4618      	mov	r0, r3
 8001742:	f002 f811 	bl	8003768 <HAL_RCC_ClockConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800174c:	f000 f9e8 	bl	8001b20 <Error_Handler>
  }
}
 8001750:	bf00      	nop
 8001752:	3750      	adds	r7, #80	; 0x50
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000

08001760 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <MX_I2C3_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_I2C3_Init+0x50>)
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_I2C3_Init+0x58>)
 800176e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_I2C3_Init+0x50>)
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_I2C3_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_I2C3_Init+0x50>)
 800179e:	f001 fe5b 	bl	8003458 <HAL_I2C_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f000 f9ba 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2000026c 	.word	0x2000026c
 80017b4:	40005c00 	.word	0x40005c00
 80017b8:	000186a0 	.word	0x000186a0

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_SPI2_Init+0x64>)
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <MX_SPI2_Init+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_SPI2_Init+0x64>)
 80017c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_SPI2_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_SPI2_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_SPI2_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_SPI2_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_SPI2_Init+0x64>)
 80017e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_SPI2_Init+0x64>)
 80017f0:	2218      	movs	r2, #24
 80017f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <MX_SPI2_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_SPI2_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <MX_SPI2_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_SPI2_Init+0x64>)
 8001808:	220a      	movs	r2, #10
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_SPI2_Init+0x64>)
 800180e:	f002 fcbf 	bl	8004190 <HAL_SPI_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001818:	f000 f982 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200002c0 	.word	0x200002c0
 8001824:	40003800 	.word	0x40003800

08001828 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <MX_TIM1_Init+0x9c>)
 8001848:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM1_Init+0x98>)
 800184c:	22b3      	movs	r2, #179	; 0xb3
 800184e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001858:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800185c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_TIM1_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001872:	f002 fff5 	bl	8004860 <HAL_TIM_Base_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800187c:	f000 f950 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_TIM1_Init+0x98>)
 800188e:	f003 f962 	bl	8004b56 <HAL_TIM_ConfigClockSource>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001898:	f000 f942 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_TIM1_Init+0x98>)
 80018aa:	f003 fb6d 	bl	8004f88 <HAL_TIMEx_MasterConfigSynchronization>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018b4:	f000 f934 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000051c 	.word	0x2000051c
 80018c4:	40010000 	.word	0x40010000

080018c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_TIM6_Init+0x64>)
 80018d8:	4a15      	ldr	r2, [pc, #84]	; (8001930 <MX_TIM6_Init+0x68>)
 80018da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_TIM6_Init+0x64>)
 80018de:	f242 3227 	movw	r2, #8999	; 0x2327
 80018e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_TIM6_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_TIM6_Init+0x64>)
 80018ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80018f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_TIM6_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <MX_TIM6_Init+0x64>)
 80018fa:	f002 ffb1 	bl	8004860 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001904:	f000 f90c 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_TIM6_Init+0x64>)
 8001916:	f003 fb37 	bl	8004f88 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001920:	f000 f8fe 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200004dc 	.word	0x200004dc
 8001930:	40001000 	.word	0x40001000

08001934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <MX_USART2_UART_Init+0x50>)
 800193c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800196c:	f003 fb9c 	bl	80050a8 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001976:	f000 f8d3 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000055c 	.word	0x2000055c
 8001984:	40004400 	.word	0x40004400

08001988 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_DMA_Init+0x4c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <MX_DMA_Init+0x4c>)
 8001998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <MX_DMA_Init+0x4c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	200e      	movs	r0, #14
 80019b0:	f000 ff89 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019b4:	200e      	movs	r0, #14
 80019b6:	f000 ffa2 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 ff81 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80019c4:	200f      	movs	r0, #15
 80019c6:	f000 ff9a 	bl	80028fe <HAL_NVIC_EnableIRQ>

}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <MX_GPIO_Init+0x134>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a45      	ldr	r2, [pc, #276]	; (8001b0c <MX_GPIO_Init+0x134>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a3e      	ldr	r2, [pc, #248]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2120      	movs	r1, #32
 8001a62:	482b      	ldr	r0, [pc, #172]	; (8001b10 <MX_GPIO_Init+0x138>)
 8001a64:	f001 fca0 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a6e:	4829      	ldr	r0, [pc, #164]	; (8001b14 <MX_GPIO_Init+0x13c>)
 8001a70:	f001 fc9a 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a7a:	4827      	ldr	r0, [pc, #156]	; (8001b18 <MX_GPIO_Init+0x140>)
 8001a7c:	f001 fc94 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <MX_GPIO_Init+0x144>)
 8001a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4820      	ldr	r0, [pc, #128]	; (8001b18 <MX_GPIO_Init+0x140>)
 8001a96:	f001 fadd 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4817      	ldr	r0, [pc, #92]	; (8001b10 <MX_GPIO_Init+0x138>)
 8001ab2:	f001 facf 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <MX_GPIO_Init+0x13c>)
 8001ad0:	f001 fac0 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : temp_Pin */
  GPIO_InitStruct.Pin = temp_Pin;
 8001ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(temp_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <MX_GPIO_Init+0x140>)
 8001aee:	f001 fab1 	bl	8003054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	2028      	movs	r0, #40	; 0x28
 8001af8:	f000 fee5 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afc:	2028      	movs	r0, #40	; 0x28
 8001afe:	f000 fefe 	bl	80028fe <HAL_NVIC_EnableIRQ>

}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	10210000 	.word	0x10210000

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <OneWire_Delay+0x2c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8001b42:	bf00      	nop
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <OneWire_Delay+0x2c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d9f9      	bls.n	8001b44 <OneWire_Delay+0x14>
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	2000051c 	.word	0x2000051c

08001b60 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001b70:	2301      	movs	r3, #1
 8001b72:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	889b      	ldrh	r3, [r3, #4]
 8001b78:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f107 020c 	add.w	r2, r7, #12
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fa65 	bl	8003054 <HAL_GPIO_Init>
}	
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b088      	sub	sp, #32
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8001b9a:	2311      	movs	r3, #17
 8001b9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	889b      	ldrh	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f107 020c 	add.w	r2, r7, #12
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 fa4c 	bl	8003054 <HAL_GPIO_Init>
}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	889b      	ldrh	r3, [r3, #4]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	619a      	str	r2, [r3, #24]
}	
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	889a      	ldrh	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffda 	bl	8001bc4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ffbe 	bl	8001b92 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8001c16:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001c1a:	f7ff ff89 	bl	8001b30 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff9e 	bl	8001b60 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8001c24:	2046      	movs	r0, #70	; 0x46
 8001c26:	f7ff ff83 	bl	8001b30 <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	889b      	ldrh	r3, [r3, #4]
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f001 fb9f 	bl	8003378 <HAL_GPIO_ReadPin>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8001c3e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001c42:	f7ff ff75 	bl	8001b30 <OneWire_Delay>

	return i;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d012      	beq.n	8001c88 <OneWire_WriteBit+0x38>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffae 	bl	8001bc4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff92 	bl	8001b92 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8001c6e:	2006      	movs	r0, #6
 8001c70:	f7ff ff5e 	bl	8001b30 <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff73 	bl	8001b60 <OneWire_BusInputDirection>
		
		OneWire_Delay(64);
 8001c7a:	2040      	movs	r0, #64	; 0x40
 8001c7c:	f7ff ff58 	bl	8001b30 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); //Release bus
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff6d 	bl	8001b60 <OneWire_BusInputDirection>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		
		OneWire_Delay(10);
		OneWire_BusInputDirection(onewire); // Release bus
	}
}
 8001c86:	e011      	b.n	8001cac <OneWire_WriteBit+0x5c>
		OneWire_OutputLow(onewire); // Set the bus low
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff9b 	bl	8001bc4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff7f 	bl	8001b92 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8001c94:	203c      	movs	r0, #60	; 0x3c
 8001c96:	f7ff ff4b 	bl	8001b30 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff60 	bl	8001b60 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8001ca0:	200a      	movs	r0, #10
 8001ca2:	f7ff ff45 	bl	8001b30 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ff5a 	bl	8001b60 <OneWire_BusInputDirection>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff7f 	bl	8001bc4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff63 	bl	8001b92 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7ff ff2f 	bl	8001b30 <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff44 	bl	8001b60 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f7ff ff29 	bl	8001b30 <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	889b      	ldrh	r3, [r3, #4]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f001 fb45 	bl	8003378 <HAL_GPIO_ReadPin>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <OneWire_ReadBit+0x44>
		bit = 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
	
	OneWire_Delay(50); // Wait for end of read cycle
 8001cf8:	2032      	movs	r0, #50	; 0x32
 8001cfa:	f7ff ff19 	bl	8001b30 <OneWire_Delay>

	return bit;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001d14:	2308      	movs	r3, #8
 8001d16:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff94 	bl	8001c50 <OneWire_WriteBit>
		byte >>= 1;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1ee      	bne.n	8001d18 <OneWire_WriteByte+0x10>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffab 	bl	8001cb4 <OneWire_ReadBit>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	01db      	lsls	r3, r3, #7
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1eb      	bne.n	8001d52 <OneWire_ReadByte+0x10>
	
	return byte;
 8001d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	71da      	strb	r2, [r3, #7]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7a1b      	ldrb	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 809a 	bne.w	8001f08 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff14 	bl	8001c02 <OneWire_Reset>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	71da      	strb	r2, [r3, #7]
			return 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e09b      	b.n	8001f2e <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff84 	bl	8001d08 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff57 	bl	8001cb4 <OneWire_ReadBit>
 8001e06:	4603      	mov	r3, r0
 8001e08:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff52 	bl	8001cb4 <OneWire_ReadBit>
 8001e10:	4603      	mov	r3, r0
 8001e12:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001e14:	7a7b      	ldrb	r3, [r7, #9]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <OneWire_Search+0x76>
 8001e1a:	7a3b      	ldrb	r3, [r7, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d064      	beq.n	8001eea <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8001e20:	7a7a      	ldrb	r2, [r7, #9]
 8001e22:	7a3b      	ldrb	r3, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d002      	beq.n	8001e2e <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001e28:	7a7b      	ldrb	r3, [r7, #9]
 8001e2a:	72bb      	strb	r3, [r7, #10]
 8001e2c:	e026      	b.n	8001e7c <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	799b      	ldrb	r3, [r3, #6]
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d20d      	bcs.n	8001e54 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001e38:	7b7b      	ldrb	r3, [r7, #13]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	7a5a      	ldrb	r2, [r3, #9]
 8001e40:	7afb      	ldrb	r3, [r7, #11]
 8001e42:	4013      	ands	r3, r2
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	72bb      	strb	r3, [r7, #10]
 8001e52:	e008      	b.n	8001e66 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	799b      	ldrb	r3, [r3, #6]
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001e66:	7abb      	ldrb	r3, [r7, #10]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d802      	bhi.n	8001e7c <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7bba      	ldrb	r2, [r7, #14]
 8001e7a:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8001e7c:	7abb      	ldrb	r3, [r7, #10]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10c      	bne.n	8001e9c <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8001e82:	7b7b      	ldrb	r3, [r7, #13]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	7a59      	ldrb	r1, [r3, #9]
 8001e8a:	7b7b      	ldrb	r3, [r7, #13]
 8001e8c:	7afa      	ldrb	r2, [r7, #11]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	b2d1      	uxtb	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	460a      	mov	r2, r1
 8001e98:	725a      	strb	r2, [r3, #9]
 8001e9a:	e010      	b.n	8001ebe <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	7a5b      	ldrb	r3, [r3, #9]
 8001ea4:	b25a      	sxtb	r2, r3
 8001ea6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b25a      	sxtb	r2, r3
 8001eb2:	7b7b      	ldrb	r3, [r7, #13]
 8001eb4:	b2d1      	uxtb	r1, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	460a      	mov	r2, r1
 8001ebc:	725a      	strb	r2, [r3, #9]
				}
				
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001ebe:	7abb      	ldrb	r3, [r7, #10]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fec4 	bl	8001c50 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8001eda:	7b7b      	ldrb	r3, [r7, #13]
 8001edc:	3301      	adds	r3, #1
 8001ede:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001ee4:	7b7b      	ldrb	r3, [r7, #13]
 8001ee6:	2b07      	cmp	r3, #7
 8001ee8:	d98a      	bls.n	8001e00 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	d90b      	bls.n	8001f08 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7bba      	ldrb	r2, [r7, #14]
 8001ef4:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	799b      	ldrb	r3, [r3, #6]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001f04:	2301      	movs	r3, #1
 8001f06:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001f08:	7b3b      	ldrb	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <OneWire_Search+0x16c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7a5b      	ldrb	r3, [r3, #9]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001f2c:	7b3b      	ldrb	r3, [r7, #12]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff20 	bl	8001d84 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001f44:	21f0      	movs	r1, #240	; 0xf0
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff2f 	bl	8001daa <OneWire_Search>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001f5e:	21f0      	movs	r1, #240	; 0xf0
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff22 	bl	8001daa <OneWire_Search>
 8001f66:	4603      	mov	r3, r0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8001f7a:	2155      	movs	r1, #85	; 0x55
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fec3 	bl	8001d08 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
 8001f86:	e00a      	b.n	8001f9e <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff feb8 	bl	8001d08 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2b07      	cmp	r3, #7
 8001fa2:	d9f1      	bls.n	8001f88 <OneWire_SelectWithPointer+0x18>
	}	
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e00a      	b.n	8001fd2 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	6839      	ldr	r1, [r7, #0]
 8001fc2:	440b      	add	r3, r1
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	440a      	add	r2, r1
 8001fc8:	7a52      	ldrb	r2, [r2, #9]
 8001fca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	2b07      	cmp	r3, #7
 8001fd6:	d9f1      	bls.n	8001fbc <OneWire_GetFullROM+0x10>
	}
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8001ff2:	4811      	ldr	r0, [pc, #68]	; (8002038 <OneWire_Init+0x54>)
 8001ff4:	f002 fc5f 	bl	80048b6 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	88fa      	ldrh	r2, [r7, #6]
 8002002:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff fdc4 	bl	8001b92 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fdea 	bl	8001be4 <OneWire_OutputHigh>
	HAL_Delay(100);
 8002010:	2064      	movs	r0, #100	; 0x64
 8002012:	f000 fb5b 	bl	80026cc <HAL_Delay>
	OneWire_OutputLow(onewire);
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7ff fdd4 	bl	8001bc4 <OneWire_OutputLow>
	HAL_Delay(100);
 800201c:	2064      	movs	r0, #100	; 0x64
 800201e:	f000 fb55 	bl	80026cc <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f7ff fdde 	bl	8001be4 <OneWire_OutputHigh>
	HAL_Delay(200);
 8002028:	20c8      	movs	r0, #200	; 0xc8
 800202a:	f000 fb4f 	bl	80026cc <HAL_Delay>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000051c 	.word	0x2000051c

0800203c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_MspInit+0x4c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <HAL_MspInit+0x4c>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_MspInit+0x4c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_MspInit+0x4c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_MspInit+0x4c>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_MspInit+0x4c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800207a:	2007      	movs	r0, #7
 800207c:	f000 fc18 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a28      	ldr	r2, [pc, #160]	; (800214c <HAL_I2C_MspInit+0xc0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d14a      	bne.n	8002144 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b27      	ldr	r3, [pc, #156]	; (8002150 <HAL_I2C_MspInit+0xc4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a26      	ldr	r2, [pc, #152]	; (8002150 <HAL_I2C_MspInit+0xc4>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_I2C_MspInit+0xc4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_I2C_MspInit+0xc4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <HAL_I2C_MspInit+0xc4>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_I2C_MspInit+0xc4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ec:	2312      	movs	r3, #18
 80020ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f0:	2301      	movs	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020f8:	2304      	movs	r3, #4
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4814      	ldr	r0, [pc, #80]	; (8002154 <HAL_I2C_MspInit+0xc8>)
 8002104:	f000 ffa6 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002108:	2310      	movs	r3, #16
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210c:	2312      	movs	r3, #18
 800210e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002110:	2301      	movs	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002118:	2304      	movs	r3, #4
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <HAL_I2C_MspInit+0xcc>)
 8002124:	f000 ff96 	bl	8003054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_I2C_MspInit+0xc4>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_I2C_MspInit+0xc4>)
 8002132:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_I2C_MspInit+0xc4>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002144:	bf00      	nop
 8002146:	3728      	adds	r7, #40	; 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40005c00 	.word	0x40005c00
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000
 8002158:	40020400 	.word	0x40020400

0800215c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6b      	ldr	r2, [pc, #428]	; (8002328 <HAL_SPI_MspInit+0x1cc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	f040 80cf 	bne.w	800231e <HAL_SPI_MspInit+0x1c2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	4b69      	ldr	r3, [pc, #420]	; (800232c <HAL_SPI_MspInit+0x1d0>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a68      	ldr	r2, [pc, #416]	; (800232c <HAL_SPI_MspInit+0x1d0>)
 800218a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
 8002190:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_SPI_MspInit+0x1d0>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4b62      	ldr	r3, [pc, #392]	; (800232c <HAL_SPI_MspInit+0x1d0>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a61      	ldr	r2, [pc, #388]	; (800232c <HAL_SPI_MspInit+0x1d0>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_SPI_MspInit+0x1d0>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	4b5b      	ldr	r3, [pc, #364]	; (800232c <HAL_SPI_MspInit+0x1d0>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	4a5a      	ldr	r2, [pc, #360]	; (800232c <HAL_SPI_MspInit+0x1d0>)
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	6313      	str	r3, [r2, #48]	; 0x30
 80021c8:	4b58      	ldr	r3, [pc, #352]	; (800232c <HAL_SPI_MspInit+0x1d0>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021d4:	2302      	movs	r3, #2
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80021e4:	2307      	movs	r3, #7
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	4850      	ldr	r0, [pc, #320]	; (8002330 <HAL_SPI_MspInit+0x1d4>)
 80021f0:	f000 ff30 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021f4:	2304      	movs	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002204:	2305      	movs	r3, #5
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4848      	ldr	r0, [pc, #288]	; (8002330 <HAL_SPI_MspInit+0x1d4>)
 8002210:	f000 ff20 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002226:	2305      	movs	r3, #5
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4840      	ldr	r0, [pc, #256]	; (8002334 <HAL_SPI_MspInit+0x1d8>)
 8002232:	f000 ff0f 	bl	8003054 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002236:	4b40      	ldr	r3, [pc, #256]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 8002238:	4a40      	ldr	r2, [pc, #256]	; (800233c <HAL_SPI_MspInit+0x1e0>)
 800223a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800223c:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 8002250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002254:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002256:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225c:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002262:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 8002264:	2200      	movs	r2, #0
 8002266:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002268:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 8002270:	2204      	movs	r2, #4
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002274:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 8002276:	2203      	movs	r2, #3
 8002278:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 800227c:	2200      	movs	r2, #0
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002280:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002286:	482c      	ldr	r0, [pc, #176]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 8002288:	f000 fb54 	bl	8002934 <HAL_DMA_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_SPI_MspInit+0x13a>
    {
      Error_Handler();
 8002292:	f7ff fc45 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 800229a:	64da      	str	r2, [r3, #76]	; 0x4c
 800229c:	4a26      	ldr	r2, [pc, #152]	; (8002338 <HAL_SPI_MspInit+0x1dc>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80022a2:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_SPI_MspInit+0x1e8>)
 80022a6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022dc:	2204      	movs	r2, #4
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022e2:	2203      	movs	r2, #3
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80022f2:	4813      	ldr	r0, [pc, #76]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 80022f4:	f000 fb1e 	bl	8002934 <HAL_DMA_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_SPI_MspInit+0x1a6>
    {
      Error_Handler();
 80022fe:	f7ff fc0f 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 8002306:	649a      	str	r2, [r3, #72]	; 0x48
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_SPI_MspInit+0x1e4>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	2024      	movs	r0, #36	; 0x24
 8002314:	f000 fad7 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002318:	2024      	movs	r0, #36	; 0x24
 800231a:	f000 faf0 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800231e:	bf00      	nop
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40003800 	.word	0x40003800
 800232c:	40023800 	.word	0x40023800
 8002330:	40020800 	.word	0x40020800
 8002334:	40020400 	.word	0x40020400
 8002338:	20000318 	.word	0x20000318
 800233c:	40026058 	.word	0x40026058
 8002340:	2000059c 	.word	0x2000059c
 8002344:	40026070 	.word	0x40026070

08002348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_TIM_Base_MspInit+0x70>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_TIM_Base_MspInit+0x74>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a16      	ldr	r2, [pc, #88]	; (80023bc <HAL_TIM_Base_MspInit+0x74>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_TIM_Base_MspInit+0x74>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002376:	e01a      	b.n	80023ae <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <HAL_TIM_Base_MspInit+0x78>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d115      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_TIM_Base_MspInit+0x74>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_TIM_Base_MspInit+0x74>)
 800238c:	f043 0310 	orr.w	r3, r3, #16
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_TIM_Base_MspInit+0x74>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	2036      	movs	r0, #54	; 0x36
 80023a4:	f000 fa8f 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023a8:	2036      	movs	r0, #54	; 0x36
 80023aa:	f000 faa8 	bl	80028fe <HAL_NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40001000 	.word	0x40001000

080023c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_UART_MspInit+0x84>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d12b      	bne.n	800243e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_UART_MspInit+0x88>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_UART_MspInit+0x88>)
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_UART_MspInit+0x88>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_UART_MspInit+0x88>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a10      	ldr	r2, [pc, #64]	; (800244c <HAL_UART_MspInit+0x88>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_UART_MspInit+0x88>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800241e:	230c      	movs	r3, #12
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800242e:	2307      	movs	r3, #7
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_UART_MspInit+0x8c>)
 800243a:	f000 fe0b 	bl	8003054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40004400 	.word	0x40004400
 800244c:	40023800 	.word	0x40023800
 8002450:	40020000 	.word	0x40020000

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a8:	f000 f8f0 	bl	800268c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <DMA1_Stream3_IRQHandler+0x10>)
 80024b6:	f000 fb65 	bl	8002b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000318 	.word	0x20000318

080024c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <DMA1_Stream4_IRQHandler+0x10>)
 80024ca:	f000 fb5b 	bl	8002b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000059c 	.word	0x2000059c

080024d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <SPI2_IRQHandler+0x10>)
 80024de:	f001 ff69 	bl	80043b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200002c0 	.word	0x200002c0

080024ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024f4:	f000 ff8c 	bl	8003410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <TIM6_DAC_IRQHandler+0x10>)
 8002502:	f002 fa20 	bl	8004946 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200004dc 	.word	0x200004dc

08002510 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <_sbrk+0x50>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <_sbrk+0x16>
		heap_end = &end;
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <_sbrk+0x50>)
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <_sbrk+0x54>)
 8002524:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <_sbrk+0x50>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <_sbrk+0x50>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	466a      	mov	r2, sp
 8002536:	4293      	cmp	r3, r2
 8002538:	d907      	bls.n	800254a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800253a:	f003 fa61 	bl	8005a00 <__errno>
 800253e:	4602      	mov	r2, r0
 8002540:	230c      	movs	r3, #12
 8002542:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	e006      	b.n	8002558 <_sbrk+0x48>
	}

	heap_end += incr;
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <_sbrk+0x50>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	4a03      	ldr	r2, [pc, #12]	; (8002560 <_sbrk+0x50>)
 8002554:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000204 	.word	0x20000204
 8002564:	20000608 	.word	0x20000608

08002568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <SystemInit+0x28>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <SystemInit+0x28>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SystemInit+0x28>)
 800257e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002582:	609a      	str	r2, [r3, #8]
#endif
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002598:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800259a:	e003      	b.n	80025a4 <LoopCopyDataInit>

0800259c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800259e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025a2:	3104      	adds	r1, #4

080025a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025a4:	480b      	ldr	r0, [pc, #44]	; (80025d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025ac:	d3f6      	bcc.n	800259c <CopyDataInit>
  ldr  r2, =_sbss
 80025ae:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025b0:	e002      	b.n	80025b8 <LoopFillZerobss>

080025b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025b4:	f842 3b04 	str.w	r3, [r2], #4

080025b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025bc:	d3f9      	bcc.n	80025b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025be:	f7ff ffd3 	bl	8002568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025c2:	f003 fa23 	bl	8005a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c6:	f7fe ffcf 	bl	8001568 <main>
  bx  lr    
 80025ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80025d0:	08007da0 	.word	0x08007da0
  ldr  r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025d8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80025dc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80025e0:	20000604 	.word	0x20000604

080025e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC_IRQHandler>
	...

080025e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_Init+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <HAL_Init+0x40>)
 80025f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <HAL_Init+0x40>)
 80025fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002602:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_Init+0x40>)
 800260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002610:	2003      	movs	r0, #3
 8002612:	f000 f94d 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002616:	2000      	movs	r0, #0
 8002618:	f000 f808 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800261c:	f7ff fd0e 	bl	800203c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023c00 	.word	0x40023c00

0800262c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x54>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x58>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002642:	fbb3 f3f1 	udiv	r3, r3, r1
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f965 	bl	800291a <HAL_SYSTICK_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00e      	b.n	8002678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0f      	cmp	r3, #15
 800265e:	d80a      	bhi.n	8002676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002660:	2200      	movs	r2, #0
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f000 f92d 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_InitTick+0x5c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000000 	.word	0x20000000
 8002684:	20000008 	.word	0x20000008
 8002688:	20000004 	.word	0x20000004

0800268c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_IncTick+0x20>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_IncTick+0x24>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_IncTick+0x24>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000008 	.word	0x20000008
 80026b0:	200005fc 	.word	0x200005fc

080026b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_GetTick+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	200005fc 	.word	0x200005fc

080026cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff ffee 	bl	80026b4 <HAL_GetTick>
 80026d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d005      	beq.n	80026f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_Delay+0x40>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026f2:	bf00      	nop
 80026f4:	f7ff ffde 	bl	80026b4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	d8f7      	bhi.n	80026f4 <HAL_Delay+0x28>
  {
  }
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000008 	.word	0x20000008

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4907      	ldr	r1, [pc, #28]	; (80027ac <__NVIC_EnableIRQ+0x38>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	; (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff29 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff3e 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff31 	bl	8002774 <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffa2 	bl	800286c <SysTick_Config>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff feb8 	bl	80026b4 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e099      	b.n	8002a84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002970:	e00f      	b.n	8002992 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002972:	f7ff fe9f 	bl	80026b4 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b05      	cmp	r3, #5
 800297e:	d908      	bls.n	8002992 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2203      	movs	r2, #3
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e078      	b.n	8002a84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e8      	bne.n	8002972 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <HAL_DMA_Init+0x158>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d107      	bne.n	80029fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4313      	orrs	r3, r2
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 0307 	bic.w	r3, r3, #7
 8002a12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d117      	bne.n	8002a56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fa91 	bl	8002f60 <DMA_CheckFifoParam>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a52:	2301      	movs	r3, #1
 8002a54:	e016      	b.n	8002a84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa48 	bl	8002ef4 <DMA_CalcBaseAndBitshift>
 8002a64:	4603      	mov	r3, r0
 8002a66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	223f      	movs	r2, #63	; 0x3f
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	f010803f 	.word	0xf010803f

08002a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_DMA_Start_IT+0x26>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e040      	b.n	8002b38 <HAL_DMA_Start_IT+0xa8>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d12f      	bne.n	8002b2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f9da 	bl	8002e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	223f      	movs	r2, #63	; 0x3f
 8002aea:	409a      	lsls	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0216 	orr.w	r2, r2, #22
 8002afe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e005      	b.n	8002b36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
 8002b34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d004      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e00c      	b.n	8002b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2205      	movs	r2, #5
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b90:	4b92      	ldr	r3, [pc, #584]	; (8002ddc <HAL_DMA_IRQHandler+0x258>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a92      	ldr	r2, [pc, #584]	; (8002de0 <HAL_DMA_IRQHandler+0x25c>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	0a9b      	lsrs	r3, r3, #10
 8002b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bae:	2208      	movs	r2, #8
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01a      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	2208      	movs	r2, #8
 8002bde:	409a      	lsls	r2, r3
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d012      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	2201      	movs	r2, #1
 8002c14:	409a      	lsls	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f043 0202 	orr.w	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d012      	beq.n	8002c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	2204      	movs	r2, #4
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	2210      	movs	r2, #16
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d043      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03c      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	2210      	movs	r2, #16
 8002c80:	409a      	lsls	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d018      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d024      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
 8002cb2:	e01f      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01b      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
 8002cc4:	e016      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0208 	bic.w	r2, r2, #8
 8002ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 808e 	beq.w	8002e22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8086 	beq.w	8002e22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	d136      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0216 	bic.w	r2, r2, #22
 8002d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <HAL_DMA_IRQHandler+0x1da>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0208 	bic.w	r2, r2, #8
 8002d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	223f      	movs	r2, #63	; 0x3f
 8002d74:	409a      	lsls	r2, r3
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d07d      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
        }
        return;
 8002d9a:	e078      	b.n	8002e8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01c      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d108      	bne.n	8002dca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d030      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
 8002dc8:	e02b      	b.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d027      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
 8002dda:	e022      	b.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0210 	bic.w	r2, r2, #16
 8002e00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d032      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d022      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2205      	movs	r2, #5
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d307      	bcc.n	8002e6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f2      	bne.n	8002e4e <HAL_DMA_IRQHandler+0x2ca>
 8002e68:	e000      	b.n	8002e6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	e000      	b.n	8002e90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e8e:	bf00      	nop
    }
  }
}
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop

08002e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d108      	bne.n	8002ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ed6:	e007      	b.n	8002ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	3b10      	subs	r3, #16
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <DMA_CalcBaseAndBitshift+0x64>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <DMA_CalcBaseAndBitshift+0x68>)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d909      	bls.n	8002f36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f2a:	f023 0303 	bic.w	r3, r3, #3
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	659a      	str	r2, [r3, #88]	; 0x58
 8002f34:	e007      	b.n	8002f46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	aaaaaaab 	.word	0xaaaaaaab
 8002f5c:	08007b28 	.word	0x08007b28

08002f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11f      	bne.n	8002fba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d855      	bhi.n	800302c <DMA_CheckFifoParam+0xcc>
 8002f80:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <DMA_CheckFifoParam+0x28>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fab 	.word	0x08002fab
 8002f90:	08002f99 	.word	0x08002f99
 8002f94:	0800302d 	.word	0x0800302d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d045      	beq.n	8003030 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa8:	e042      	b.n	8003030 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fb2:	d13f      	bne.n	8003034 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb8:	e03c      	b.n	8003034 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc2:	d121      	bne.n	8003008 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d836      	bhi.n	8003038 <DMA_CheckFifoParam+0xd8>
 8002fca:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <DMA_CheckFifoParam+0x70>)
 8002fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd0:	08002fe1 	.word	0x08002fe1
 8002fd4:	08002fe7 	.word	0x08002fe7
 8002fd8:	08002fe1 	.word	0x08002fe1
 8002fdc:	08002ff9 	.word	0x08002ff9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe4:	e02f      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d024      	beq.n	800303c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff6:	e021      	b.n	800303c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003000:	d11e      	bne.n	8003040 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003006:	e01b      	b.n	8003040 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <DMA_CheckFifoParam+0xb4>
 800300e:	2b03      	cmp	r3, #3
 8003010:	d003      	beq.n	800301a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003012:	e018      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e015      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      break;
 800302a:	e00b      	b.n	8003044 <DMA_CheckFifoParam+0xe4>
      break;
 800302c:	bf00      	nop
 800302e:	e00a      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 8003030:	bf00      	nop
 8003032:	e008      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 8003034:	bf00      	nop
 8003036:	e006      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 8003038:	bf00      	nop
 800303a:	e004      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 800303c:	bf00      	nop
 800303e:	e002      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;   
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 8003044:	bf00      	nop
    }
  } 
  
  return status; 
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e165      	b.n	800333c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003070:	2201      	movs	r2, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	429a      	cmp	r2, r3
 800308a:	f040 8154 	bne.w	8003336 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d00b      	beq.n	80030ae <HAL_GPIO_Init+0x5a>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d007      	beq.n	80030ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030a2:	2b11      	cmp	r3, #17
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b12      	cmp	r3, #18
 80030ac:	d130      	bne.n	8003110 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e4:	2201      	movs	r2, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 0201 	and.w	r2, r3, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0xfc>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b12      	cmp	r3, #18
 800314e:	d123      	bne.n	8003198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	220f      	movs	r2, #15
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	08da      	lsrs	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3208      	adds	r2, #8
 8003192:	69b9      	ldr	r1, [r7, #24]
 8003194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0203 	and.w	r2, r3, #3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80ae 	beq.w	8003336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b5c      	ldr	r3, [pc, #368]	; (8003350 <HAL_GPIO_Init+0x2fc>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a5b      	ldr	r2, [pc, #364]	; (8003350 <HAL_GPIO_Init+0x2fc>)
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_GPIO_Init+0x2fc>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031f6:	4a57      	ldr	r2, [pc, #348]	; (8003354 <HAL_GPIO_Init+0x300>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4e      	ldr	r2, [pc, #312]	; (8003358 <HAL_GPIO_Init+0x304>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d025      	beq.n	800326e <HAL_GPIO_Init+0x21a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4d      	ldr	r2, [pc, #308]	; (800335c <HAL_GPIO_Init+0x308>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01f      	beq.n	800326a <HAL_GPIO_Init+0x216>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4c      	ldr	r2, [pc, #304]	; (8003360 <HAL_GPIO_Init+0x30c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d019      	beq.n	8003266 <HAL_GPIO_Init+0x212>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <HAL_GPIO_Init+0x310>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_GPIO_Init+0x20e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a4a      	ldr	r2, [pc, #296]	; (8003368 <HAL_GPIO_Init+0x314>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00d      	beq.n	800325e <HAL_GPIO_Init+0x20a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a49      	ldr	r2, [pc, #292]	; (800336c <HAL_GPIO_Init+0x318>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <HAL_GPIO_Init+0x206>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a48      	ldr	r2, [pc, #288]	; (8003370 <HAL_GPIO_Init+0x31c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_GPIO_Init+0x202>
 8003252:	2306      	movs	r3, #6
 8003254:	e00c      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 8003256:	2307      	movs	r3, #7
 8003258:	e00a      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 800325a:	2305      	movs	r3, #5
 800325c:	e008      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 800325e:	2304      	movs	r3, #4
 8003260:	e006      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 8003262:	2303      	movs	r3, #3
 8003264:	e004      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 8003266:	2302      	movs	r3, #2
 8003268:	e002      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 800326e:	2300      	movs	r3, #0
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	f002 0203 	and.w	r2, r2, #3
 8003276:	0092      	lsls	r2, r2, #2
 8003278:	4093      	lsls	r3, r2
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003280:	4934      	ldr	r1, [pc, #208]	; (8003354 <HAL_GPIO_Init+0x300>)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800328e:	4b39      	ldr	r3, [pc, #228]	; (8003374 <HAL_GPIO_Init+0x320>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b2:	4a30      	ldr	r2, [pc, #192]	; (8003374 <HAL_GPIO_Init+0x320>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032b8:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_GPIO_Init+0x320>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <HAL_GPIO_Init+0x320>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <HAL_GPIO_Init+0x320>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_GPIO_Init+0x320>)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_GPIO_Init+0x320>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003330:	4a10      	ldr	r2, [pc, #64]	; (8003374 <HAL_GPIO_Init+0x320>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3301      	adds	r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b0f      	cmp	r3, #15
 8003340:	f67f ae96 	bls.w	8003070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003344:	bf00      	nop
 8003346:	3724      	adds	r7, #36	; 0x24
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40023800 	.word	0x40023800
 8003354:	40013800 	.word	0x40013800
 8003358:	40020000 	.word	0x40020000
 800335c:	40020400 	.word	0x40020400
 8003360:	40020800 	.word	0x40020800
 8003364:	40020c00 	.word	0x40020c00
 8003368:	40021000 	.word	0x40021000
 800336c:	40021400 	.word	0x40021400
 8003370:	40021800 	.word	0x40021800
 8003374:	40013c00 	.word	0x40013c00

08003378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e001      	b.n	800339a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033c4:	e003      	b.n	80033ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	401a      	ands	r2, r3
 80033ee:	887b      	ldrh	r3, [r7, #2]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d104      	bne.n	80033fe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	041a      	lsls	r2, r3, #16
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80033fc:	e002      	b.n	8003404 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	619a      	str	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003426:	4a05      	ldr	r2, [pc, #20]	; (800343c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f806 	bl	8003440 <HAL_GPIO_EXTI_Callback>
  }
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e11f      	b.n	80036aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe fe04 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	; 0x24
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034bc:	f000 fa46 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 80034c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a7b      	ldr	r2, [pc, #492]	; (80036b4 <HAL_I2C_Init+0x25c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d807      	bhi.n	80034dc <HAL_I2C_Init+0x84>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a7a      	ldr	r2, [pc, #488]	; (80036b8 <HAL_I2C_Init+0x260>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	bf94      	ite	ls
 80034d4:	2301      	movls	r3, #1
 80034d6:	2300      	movhi	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e006      	b.n	80034ea <HAL_I2C_Init+0x92>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a77      	ldr	r2, [pc, #476]	; (80036bc <HAL_I2C_Init+0x264>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bf94      	ite	ls
 80034e4:	2301      	movls	r3, #1
 80034e6:	2300      	movhi	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0db      	b.n	80036aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a72      	ldr	r2, [pc, #456]	; (80036c0 <HAL_I2C_Init+0x268>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0c9b      	lsrs	r3, r3, #18
 80034fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a64      	ldr	r2, [pc, #400]	; (80036b4 <HAL_I2C_Init+0x25c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d802      	bhi.n	800352c <HAL_I2C_Init+0xd4>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3301      	adds	r3, #1
 800352a:	e009      	b.n	8003540 <HAL_I2C_Init+0xe8>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	4a63      	ldr	r2, [pc, #396]	; (80036c4 <HAL_I2C_Init+0x26c>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	3301      	adds	r3, #1
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	430b      	orrs	r3, r1
 8003546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003552:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4956      	ldr	r1, [pc, #344]	; (80036b4 <HAL_I2C_Init+0x25c>)
 800355c:	428b      	cmp	r3, r1
 800355e:	d80d      	bhi.n	800357c <HAL_I2C_Init+0x124>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e59      	subs	r1, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fbb1 f3f3 	udiv	r3, r1, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003574:	2b04      	cmp	r3, #4
 8003576:	bf38      	it	cc
 8003578:	2304      	movcc	r3, #4
 800357a:	e04f      	b.n	800361c <HAL_I2C_Init+0x1c4>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <HAL_I2C_Init+0x150>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e58      	subs	r0, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	440b      	add	r3, r1
 8003592:	fbb0 f3f3 	udiv	r3, r0, r3
 8003596:	3301      	adds	r3, #1
 8003598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e012      	b.n	80035ce <HAL_I2C_Init+0x176>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	0099      	lsls	r1, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Init+0x17e>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e022      	b.n	800361c <HAL_I2C_Init+0x1c4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10e      	bne.n	80035fc <HAL_I2C_Init+0x1a4>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1e58      	subs	r0, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	440b      	add	r3, r1
 80035ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035fa:	e00f      	b.n	800361c <HAL_I2C_Init+0x1c4>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	0099      	lsls	r1, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	3301      	adds	r3, #1
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	6809      	ldr	r1, [r1, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800364a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6911      	ldr	r1, [r2, #16]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68d2      	ldr	r2, [r2, #12]
 8003656:	4311      	orrs	r1, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	000186a0 	.word	0x000186a0
 80036b8:	001e847f 	.word	0x001e847f
 80036bc:	003d08ff 	.word	0x003d08ff
 80036c0:	431bde83 	.word	0x431bde83
 80036c4:	10624dd3 	.word	0x10624dd3

080036c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_PWREx_EnableOverDrive+0x90>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <HAL_PWREx_EnableOverDrive+0x90>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_PWREx_EnableOverDrive+0x90>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_PWREx_EnableOverDrive+0x94>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036f4:	f7fe ffde 	bl	80026b4 <HAL_GetTick>
 80036f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036fa:	e009      	b.n	8003710 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036fc:	f7fe ffda 	bl	80026b4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370a:	d901      	bls.n	8003710 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e01f      	b.n	8003750 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003710:	4b13      	ldr	r3, [pc, #76]	; (8003760 <HAL_PWREx_EnableOverDrive+0x98>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371c:	d1ee      	bne.n	80036fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003724:	f7fe ffc6 	bl	80026b4 <HAL_GetTick>
 8003728:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800372a:	e009      	b.n	8003740 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800372c:	f7fe ffc2 	bl	80026b4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800373a:	d901      	bls.n	8003740 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e007      	b.n	8003750 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <HAL_PWREx_EnableOverDrive+0x98>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800374c:	d1ee      	bne.n	800372c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40023800 	.word	0x40023800
 800375c:	420e0040 	.word	0x420e0040
 8003760:	40007000 	.word	0x40007000
 8003764:	420e0044 	.word	0x420e0044

08003768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0cc      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800377c:	4b68      	ldr	r3, [pc, #416]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d90c      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b65      	ldr	r3, [pc, #404]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0b8      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	494d      	ldr	r1, [pc, #308]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d044      	beq.n	8003888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d119      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d003      	beq.n	8003826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003822:	2b03      	cmp	r3, #3
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e06f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003836:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e067      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003846:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4934      	ldr	r1, [pc, #208]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003858:	f7fe ff2c 	bl	80026b4 <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	e00a      	b.n	8003876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003860:	f7fe ff28 	bl	80026b4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e04f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 020c 	and.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	429a      	cmp	r2, r3
 8003886:	d1eb      	bne.n	8003860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d20c      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b22      	ldr	r3, [pc, #136]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4916      	ldr	r1, [pc, #88]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ee:	f000 f855 	bl	800399c <HAL_RCC_GetSysClockFreq>
 80038f2:	4601      	mov	r1, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	fa21 f303 	lsr.w	r3, r1, r3
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fe8c 	bl	800262c <HAL_InitTick>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023c00 	.word	0x40023c00
 8003924:	40023800 	.word	0x40023800
 8003928:	08007b10 	.word	0x08007b10
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_RCC_GetHCLKFreq+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000000 	.word	0x20000000

0800394c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003950:	f7ff fff0 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003954:	4601      	mov	r1, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0a9b      	lsrs	r3, r3, #10
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4a03      	ldr	r2, [pc, #12]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	08007b20 	.word	0x08007b20

08003974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003978:	f7ff ffdc 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 800397c:	4601      	mov	r1, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	0b5b      	lsrs	r3, r3, #13
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4a03      	ldr	r2, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	08007b20 	.word	0x08007b20

0800399c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b6:	4bc6      	ldr	r3, [pc, #792]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b0c      	cmp	r3, #12
 80039c0:	f200 817e 	bhi.w	8003cc0 <HAL_RCC_GetSysClockFreq+0x324>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <HAL_RCC_GetSysClockFreq+0x30>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	08003a01 	.word	0x08003a01
 80039d0:	08003cc1 	.word	0x08003cc1
 80039d4:	08003cc1 	.word	0x08003cc1
 80039d8:	08003cc1 	.word	0x08003cc1
 80039dc:	08003a07 	.word	0x08003a07
 80039e0:	08003cc1 	.word	0x08003cc1
 80039e4:	08003cc1 	.word	0x08003cc1
 80039e8:	08003cc1 	.word	0x08003cc1
 80039ec:	08003a0d 	.word	0x08003a0d
 80039f0:	08003cc1 	.word	0x08003cc1
 80039f4:	08003cc1 	.word	0x08003cc1
 80039f8:	08003cc1 	.word	0x08003cc1
 80039fc:	08003b69 	.word	0x08003b69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4bb4      	ldr	r3, [pc, #720]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x338>)
 8003a02:	613b      	str	r3, [r7, #16]
       break;
 8003a04:	e15f      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a06:	4bb4      	ldr	r3, [pc, #720]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003a08:	613b      	str	r3, [r7, #16]
      break;
 8003a0a:	e15c      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a0c:	4bb0      	ldr	r3, [pc, #704]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a14:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a16:	4bae      	ldr	r3, [pc, #696]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d04a      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a22:	4bab      	ldr	r3, [pc, #684]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	099b      	lsrs	r3, r3, #6
 8003a28:	f04f 0400 	mov.w	r4, #0
 8003a2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	ea03 0501 	and.w	r5, r3, r1
 8003a38:	ea04 0602 	and.w	r6, r4, r2
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	4632      	mov	r2, r6
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	0154      	lsls	r4, r2, #5
 8003a4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a4e:	014b      	lsls	r3, r1, #5
 8003a50:	4619      	mov	r1, r3
 8003a52:	4622      	mov	r2, r4
 8003a54:	1b49      	subs	r1, r1, r5
 8003a56:	eb62 0206 	sbc.w	r2, r2, r6
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	f04f 0400 	mov.w	r4, #0
 8003a62:	0194      	lsls	r4, r2, #6
 8003a64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a68:	018b      	lsls	r3, r1, #6
 8003a6a:	1a5b      	subs	r3, r3, r1
 8003a6c:	eb64 0402 	sbc.w	r4, r4, r2
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	00e2      	lsls	r2, r4, #3
 8003a7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a7e:	00d9      	lsls	r1, r3, #3
 8003a80:	460b      	mov	r3, r1
 8003a82:	4614      	mov	r4, r2
 8003a84:	195b      	adds	r3, r3, r5
 8003a86:	eb44 0406 	adc.w	r4, r4, r6
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	0262      	lsls	r2, r4, #9
 8003a94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a98:	0259      	lsls	r1, r3, #9
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f04f 0400 	mov.w	r4, #0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4623      	mov	r3, r4
 8003aac:	f7fd f8ec 	bl	8000c88 <__aeabi_uldivmod>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e049      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab8:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	f04f 0400 	mov.w	r4, #0
 8003ac2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	ea03 0501 	and.w	r5, r3, r1
 8003ace:	ea04 0602 	and.w	r6, r4, r2
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	f04f 0400 	mov.w	r4, #0
 8003ade:	0154      	lsls	r4, r2, #5
 8003ae0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ae4:	014b      	lsls	r3, r1, #5
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4622      	mov	r2, r4
 8003aea:	1b49      	subs	r1, r1, r5
 8003aec:	eb62 0206 	sbc.w	r2, r2, r6
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	0194      	lsls	r4, r2, #6
 8003afa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003afe:	018b      	lsls	r3, r1, #6
 8003b00:	1a5b      	subs	r3, r3, r1
 8003b02:	eb64 0402 	sbc.w	r4, r4, r2
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	00e2      	lsls	r2, r4, #3
 8003b10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b14:	00d9      	lsls	r1, r3, #3
 8003b16:	460b      	mov	r3, r1
 8003b18:	4614      	mov	r4, r2
 8003b1a:	195b      	adds	r3, r3, r5
 8003b1c:	eb44 0406 	adc.w	r4, r4, r6
 8003b20:	f04f 0100 	mov.w	r1, #0
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	02a2      	lsls	r2, r4, #10
 8003b2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b2e:	0299      	lsls	r1, r3, #10
 8003b30:	460b      	mov	r3, r1
 8003b32:	4614      	mov	r4, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	4621      	mov	r1, r4
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f04f 0400 	mov.w	r4, #0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4623      	mov	r3, r4
 8003b42:	f7fd f8a1 	bl	8000c88 <__aeabi_uldivmod>
 8003b46:	4603      	mov	r3, r0
 8003b48:	460c      	mov	r4, r1
 8003b4a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b4c:	4b60      	ldr	r3, [pc, #384]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	3301      	adds	r3, #1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	613b      	str	r3, [r7, #16]
      break;
 8003b66:	e0ae      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b68:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b72:	4b57      	ldr	r3, [pc, #348]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04a      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7e:	4b54      	ldr	r3, [pc, #336]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	f04f 0400 	mov.w	r4, #0
 8003b88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	ea03 0501 	and.w	r5, r3, r1
 8003b94:	ea04 0602 	and.w	r6, r4, r2
 8003b98:	4629      	mov	r1, r5
 8003b9a:	4632      	mov	r2, r6
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	f04f 0400 	mov.w	r4, #0
 8003ba4:	0154      	lsls	r4, r2, #5
 8003ba6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003baa:	014b      	lsls	r3, r1, #5
 8003bac:	4619      	mov	r1, r3
 8003bae:	4622      	mov	r2, r4
 8003bb0:	1b49      	subs	r1, r1, r5
 8003bb2:	eb62 0206 	sbc.w	r2, r2, r6
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	f04f 0400 	mov.w	r4, #0
 8003bbe:	0194      	lsls	r4, r2, #6
 8003bc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bc4:	018b      	lsls	r3, r1, #6
 8003bc6:	1a5b      	subs	r3, r3, r1
 8003bc8:	eb64 0402 	sbc.w	r4, r4, r2
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	00e2      	lsls	r2, r4, #3
 8003bd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bda:	00d9      	lsls	r1, r3, #3
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4614      	mov	r4, r2
 8003be0:	195b      	adds	r3, r3, r5
 8003be2:	eb44 0406 	adc.w	r4, r4, r6
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	0262      	lsls	r2, r4, #9
 8003bf0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003bf4:	0259      	lsls	r1, r3, #9
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f04f 0400 	mov.w	r4, #0
 8003c04:	461a      	mov	r2, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	f7fd f83e 	bl	8000c88 <__aeabi_uldivmod>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e049      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c14:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	f04f 0400 	mov.w	r4, #0
 8003c1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	ea03 0501 	and.w	r5, r3, r1
 8003c2a:	ea04 0602 	and.w	r6, r4, r2
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4632      	mov	r2, r6
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	f04f 0400 	mov.w	r4, #0
 8003c3a:	0154      	lsls	r4, r2, #5
 8003c3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c40:	014b      	lsls	r3, r1, #5
 8003c42:	4619      	mov	r1, r3
 8003c44:	4622      	mov	r2, r4
 8003c46:	1b49      	subs	r1, r1, r5
 8003c48:	eb62 0206 	sbc.w	r2, r2, r6
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	f04f 0400 	mov.w	r4, #0
 8003c54:	0194      	lsls	r4, r2, #6
 8003c56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c5a:	018b      	lsls	r3, r1, #6
 8003c5c:	1a5b      	subs	r3, r3, r1
 8003c5e:	eb64 0402 	sbc.w	r4, r4, r2
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	00e2      	lsls	r2, r4, #3
 8003c6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c70:	00d9      	lsls	r1, r3, #3
 8003c72:	460b      	mov	r3, r1
 8003c74:	4614      	mov	r4, r2
 8003c76:	195b      	adds	r3, r3, r5
 8003c78:	eb44 0406 	adc.w	r4, r4, r6
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	02a2      	lsls	r2, r4, #10
 8003c86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c8a:	0299      	lsls	r1, r3, #10
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	4621      	mov	r1, r4
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	f7fc fff3 	bl	8000c88 <__aeabi_uldivmod>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0f1b      	lsrs	r3, r3, #28
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	613b      	str	r3, [r7, #16]
      break;
 8003cbe:	e002      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x338>)
 8003cc2:	613b      	str	r3, [r7, #16]
      break;
 8003cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc6:	693b      	ldr	r3, [r7, #16]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	00f42400 	.word	0x00f42400
 8003cd8:	007a1200 	.word	0x007a1200

08003cdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8083 	beq.w	8003dfc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cf6:	4b95      	ldr	r3, [pc, #596]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d019      	beq.n	8003d36 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d02:	4b92      	ldr	r3, [pc, #584]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d106      	bne.n	8003d1c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d0e:	4b8f      	ldr	r3, [pc, #572]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1a:	d00c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1c:	4b8b      	ldr	r3, [pc, #556]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d112      	bne.n	8003d4e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d28:	4b88      	ldr	r3, [pc, #544]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d34:	d10b      	bne.n	8003d4e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d36:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d05b      	beq.n	8003dfa <HAL_RCC_OscConfig+0x11e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d157      	bne.n	8003dfa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e216      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x8a>
 8003d58:	4b7c      	ldr	r3, [pc, #496]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7b      	ldr	r2, [pc, #492]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e01d      	b.n	8003da2 <HAL_RCC_OscConfig+0xc6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCC_OscConfig+0xae>
 8003d70:	4b76      	ldr	r3, [pc, #472]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a75      	ldr	r2, [pc, #468]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a72      	ldr	r2, [pc, #456]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	e00b      	b.n	8003da2 <HAL_RCC_OscConfig+0xc6>
 8003d8a:	4b70      	ldr	r3, [pc, #448]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6f      	ldr	r2, [pc, #444]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b6d      	ldr	r3, [pc, #436]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6c      	ldr	r2, [pc, #432]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d013      	beq.n	8003dd2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fe fc83 	bl	80026b4 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db2:	f7fe fc7f 	bl	80026b4 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	; 0x64
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e1db      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc4:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0xd6>
 8003dd0:	e014      	b.n	8003dfc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fe fc6f 	bl	80026b4 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dda:	f7fe fc6b 	bl	80026b4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b64      	cmp	r3, #100	; 0x64
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e1c7      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dec:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCC_OscConfig+0xfe>
 8003df8:	e000      	b.n	8003dfc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d06f      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e08:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d017      	beq.n	8003e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e14:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e20:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2c:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d11c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e38:	4b44      	ldr	r3, [pc, #272]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d116      	bne.n	8003e72 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e44:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_OscConfig+0x180>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e18f      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4938      	ldr	r1, [pc, #224]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e70:	e03a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d020      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7a:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fc18 	bl	80026b4 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fe fc14 	bl	80026b4 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e170      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4925      	ldr	r1, [pc, #148]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	e015      	b.n	8003ee8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fe fbf7 	bl	80026b4 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fe fbf3 	bl	80026b4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e14f      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d037      	beq.n	8003f64 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d016      	beq.n	8003f2a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_RCC_OscConfig+0x278>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fe fbd7 	bl	80026b4 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fe fbd3 	bl	80026b4 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e12f      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x22e>
 8003f28:	e01c      	b.n	8003f64 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_RCC_OscConfig+0x278>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fe fbc0 	bl	80026b4 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f36:	e00f      	b.n	8003f58 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fe fbbc 	bl	80026b4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d908      	bls.n	8003f58 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e118      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	42470000 	.word	0x42470000
 8003f54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	4b8a      	ldr	r3, [pc, #552]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e9      	bne.n	8003f38 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8097 	beq.w	80040a0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f76:	4b83      	ldr	r3, [pc, #524]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b7f      	ldr	r3, [pc, #508]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a7e      	ldr	r2, [pc, #504]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b7c      	ldr	r3, [pc, #496]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	4b79      	ldr	r3, [pc, #484]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d118      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fae:	4b76      	ldr	r3, [pc, #472]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a75      	ldr	r2, [pc, #468]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fe fb7b 	bl	80026b4 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7fe fb77 	bl	80026b4 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0d3      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	4b6c      	ldr	r3, [pc, #432]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x31a>
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a65      	ldr	r2, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	e01c      	b.n	8004030 <HAL_RCC_OscConfig+0x354>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x33c>
 8003ffe:	4b61      	ldr	r3, [pc, #388]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4a60      	ldr	r2, [pc, #384]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004004:	f043 0304 	orr.w	r3, r3, #4
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
 800400a:	4b5e      	ldr	r3, [pc, #376]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a5d      	ldr	r2, [pc, #372]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6713      	str	r3, [r2, #112]	; 0x70
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0x354>
 8004018:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	4a59      	ldr	r2, [pc, #356]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	; 0x70
 8004024:	4b57      	ldr	r3, [pc, #348]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a56      	ldr	r2, [pc, #344]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800402a:	f023 0304 	bic.w	r3, r3, #4
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d015      	beq.n	8004064 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fe fb3c 	bl	80026b4 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fe fb38 	bl	80026b4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e092      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004056:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ee      	beq.n	8004040 <HAL_RCC_OscConfig+0x364>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fe fb26 	bl	80026b4 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fe fb22 	bl	80026b4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e07c      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004082:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ee      	bne.n	800406c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	4a3a      	ldr	r2, [pc, #232]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d068      	beq.n	800417a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a8:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d060      	beq.n	8004176 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d145      	bne.n	8004148 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040bc:	4b33      	ldr	r3, [pc, #204]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe faf7 	bl	80026b4 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe faf3 	bl	80026b4 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e04f      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	019b      	lsls	r3, r3, #6
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	3b01      	subs	r3, #1
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	071b      	lsls	r3, r3, #28
 8004114:	491b      	ldr	r1, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411a:	4b1c      	ldr	r3, [pc, #112]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fe fac8 	bl	80026b4 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe fac4 	bl	80026b4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e020      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x44c>
 8004146:	e018      	b.n	800417a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe fab1 	bl	80026b4 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004156:	f7fe faad 	bl	80026b4 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e009      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x47a>
 8004174:	e001      	b.n	800417a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000
 800418c:	42470060 	.word	0x42470060

08004190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e056      	b.n	8004250 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fd ffcd 	bl	800215c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	ea42 0103 	orr.w	r1, r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	f003 0104 	and.w	r1, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800423e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_SPI_Transmit_DMA+0x20>
 8004274:	2302      	movs	r3, #2
 8004276:	e093      	b.n	80043a0 <HAL_SPI_Transmit_DMA+0x148>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d002      	beq.n	8004292 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800428c:	2302      	movs	r3, #2
 800428e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004290:	e081      	b.n	8004396 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SPI_Transmit_DMA+0x46>
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042a2:	e078      	b.n	8004396 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2203      	movs	r2, #3
 80042a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ea:	d107      	bne.n	80042fc <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004300:	4a29      	ldr	r2, [pc, #164]	; (80043a8 <HAL_SPI_Transmit_DMA+0x150>)
 8004302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004308:	4a28      	ldr	r2, [pc, #160]	; (80043ac <HAL_SPI_Transmit_DMA+0x154>)
 800430a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004310:	4a27      	ldr	r2, [pc, #156]	; (80043b0 <HAL_SPI_Transmit_DMA+0x158>)
 8004312:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004318:	2200      	movs	r2, #0
 800431a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	4619      	mov	r1, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004332:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004334:	f7fe fbac 	bl	8002a90 <HAL_DMA_Start_IT>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f043 0210 	orr.w	r2, r3, #16
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004356:	e01e      	b.n	8004396 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004362:	2b40      	cmp	r3, #64	; 0x40
 8004364:	d007      	beq.n	8004376 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0220 	orr.w	r2, r2, #32
 8004384:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0202 	orr.w	r2, r2, #2
 8004394:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800439e:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	08004685 	.word	0x08004685
 80043ac:	080045dd 	.word	0x080045dd
 80043b0:	080046a1 	.word	0x080046a1

080043b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10f      	bne.n	80043f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
    return;
 80043f6:	e0d8      	b.n	80045aa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_SPI_IRQHandler+0x66>
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	09db      	lsrs	r3, r3, #7
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
    return;
 8004418:	e0c7      	b.n	80045aa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10c      	bne.n	8004440 <HAL_SPI_IRQHandler+0x8c>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	099b      	lsrs	r3, r3, #6
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	0a1b      	lsrs	r3, r3, #8
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80b5 	beq.w	80045aa <HAL_SPI_IRQHandler+0x1f6>
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80ae 	beq.w	80045aa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d023      	beq.n	80044a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b03      	cmp	r3, #3
 8004464:	d011      	beq.n	800448a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	f043 0204 	orr.w	r2, r3, #4
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	e00b      	b.n	80044a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448a:	2300      	movs	r3, #0
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	693b      	ldr	r3, [r7, #16]
        return;
 80044a0:	e083      	b.n	80045aa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d014      	beq.n	80044d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	f043 0208 	orr.w	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044f0:	2300      	movs	r3, #0
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	2b00      	cmp	r3, #0
 8004504:	d050      	beq.n	80045a8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004514:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <HAL_SPI_IRQHandler+0x17e>
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d034      	beq.n	800459c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0203 	bic.w	r2, r2, #3
 8004540:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d011      	beq.n	800456e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <HAL_SPI_IRQHandler+0x1fc>)
 8004550:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe faf2 	bl	8002b40 <HAL_DMA_Abort_IT>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457a:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <HAL_SPI_IRQHandler+0x1fc>)
 800457c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe fadc 	bl	8002b40 <HAL_DMA_Abort_IT>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800459a:	e003      	b.n	80045a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f813 	bl	80045c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045a2:	e000      	b.n	80045a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80045a4:	bf00      	nop
    return;
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
  }
}
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	080046e1 	.word	0x080046e1

080045b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ea:	f7fe f863 	bl	80026b4 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fe:	d03b      	beq.n	8004678 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0220 	bic.w	r2, r2, #32
 800460e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0202 	bic.w	r2, r2, #2
 800461e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	2164      	movs	r1, #100	; 0x64
 8004624:	6978      	ldr	r0, [r7, #20]
 8004626:	f000 f8d9 	bl	80047dc <SPI_EndRxTxTransaction>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2200      	movs	r2, #0
 800465e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004670:	6978      	ldr	r0, [r7, #20]
 8004672:	f7ff ffa9 	bl	80045c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004676:	e002      	b.n	800467e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004678:	6978      	ldr	r0, [r7, #20]
 800467a:	f7fc ff65 	bl	8001548 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ff8e 	bl	80045b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0203 	bic.w	r2, r2, #3
 80046bc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	f043 0210 	orr.w	r2, r3, #16
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff ff78 	bl	80045c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff ff64 	bl	80045c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004718:	e04c      	b.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d048      	beq.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004722:	f7fd ffc7 	bl	80026b4 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d902      	bls.n	8004738 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d13d      	bne.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004746:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004750:	d111      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475a:	d004      	beq.n	8004766 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004764:	d107      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004774:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800477e:	d10f      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800479e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e00f      	b.n	80047d4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4013      	ands	r3, r2
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d1a3      	bne.n	800471a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047e8:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <SPI_EndRxTxTransaction+0x7c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1b      	ldr	r2, [pc, #108]	; (800485c <SPI_EndRxTxTransaction+0x80>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	0d5b      	lsrs	r3, r3, #21
 80047f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004806:	d112      	bne.n	800482e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2200      	movs	r2, #0
 8004810:	2180      	movs	r1, #128	; 0x80
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff ff78 	bl	8004708 <SPI_WaitFlagStateUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e00f      	b.n	800484e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	3b01      	subs	r3, #1
 8004838:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004844:	2b80      	cmp	r3, #128	; 0x80
 8004846:	d0f2      	beq.n	800482e <SPI_EndRxTxTransaction+0x52>
 8004848:	e000      	b.n	800484c <SPI_EndRxTxTransaction+0x70>
        break;
 800484a:	bf00      	nop
  }

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000000 	.word	0x20000000
 800485c:	165e9f81 	.word	0x165e9f81

08004860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e01d      	b.n	80048ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fd fd5e 	bl	8002348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f000 fa38 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b06      	cmp	r3, #6
 80048d6:	d007      	beq.n	80048e8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b06      	cmp	r3, #6
 8004926:	d007      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d122      	bne.n	80049a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b02      	cmp	r3, #2
 8004968:	d11b      	bne.n	80049a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0202 	mvn.w	r2, #2
 8004972:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f9a5 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 800498e:	e005      	b.n	800499c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f997 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9a8 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d122      	bne.n	80049f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d11b      	bne.n	80049f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f06f 0204 	mvn.w	r2, #4
 80049c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f97b 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 80049e2:	e005      	b.n	80049f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f96d 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f97e 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d122      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d11b      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f06f 0208 	mvn.w	r2, #8
 8004a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2204      	movs	r2, #4
 8004a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f951 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004a36:	e005      	b.n	8004a44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f943 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f954 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d122      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d11b      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f06f 0210 	mvn.w	r2, #16
 8004a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2208      	movs	r2, #8
 8004a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f927 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004a8a:	e005      	b.n	8004a98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f919 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f92a 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d10e      	bne.n	8004aca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d107      	bne.n	8004aca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0201 	mvn.w	r2, #1
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fc fce5 	bl	8001494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d10e      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 facf 	bl	8005094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d10e      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d107      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8ef 	bl	8004d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d10e      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d107      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f06f 0220 	mvn.w	r2, #32
 8004b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fa99 	bl	8005080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_ConfigClockSource+0x18>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e0a6      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x166>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b8c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b94:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d067      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x120>
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d80b      	bhi.n	8004bc2 <HAL_TIM_ConfigClockSource+0x6c>
 8004baa:	2b10      	cmp	r3, #16
 8004bac:	d073      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x140>
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d802      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x62>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d06f      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004bb6:	e078      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d06c      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x140>
 8004bbc:	2b30      	cmp	r3, #48	; 0x30
 8004bbe:	d06a      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004bc0:	e073      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bc2:	2b70      	cmp	r3, #112	; 0x70
 8004bc4:	d00d      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x8c>
 8004bc6:	2b70      	cmp	r3, #112	; 0x70
 8004bc8:	d804      	bhi.n	8004bd4 <HAL_TIM_ConfigClockSource+0x7e>
 8004bca:	2b50      	cmp	r3, #80	; 0x50
 8004bcc:	d033      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xe0>
 8004bce:	2b60      	cmp	r3, #96	; 0x60
 8004bd0:	d041      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004bd2:	e06a      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	d066      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0x152>
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	d017      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004be0:	e063      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6899      	ldr	r1, [r3, #8]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f000 f9a9 	bl	8004f48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	609a      	str	r2, [r3, #8]
      break;
 8004c0e:	e04c      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f000 f992 	bl	8004f48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c32:	609a      	str	r2, [r3, #8]
      break;
 8004c34:	e039      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 f906 	bl	8004e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2150      	movs	r1, #80	; 0x50
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f95f 	bl	8004f12 <TIM_ITRx_SetConfig>
      break;
 8004c54:	e029      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 f925 	bl	8004eb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2160      	movs	r1, #96	; 0x60
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f94f 	bl	8004f12 <TIM_ITRx_SetConfig>
      break;
 8004c74:	e019      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 f8e6 	bl	8004e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2140      	movs	r1, #64	; 0x40
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f93f 	bl	8004f12 <TIM_ITRx_SetConfig>
      break;
 8004c94:	e009      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f000 f936 	bl	8004f12 <TIM_ITRx_SetConfig>
      break;
 8004ca6:	e000      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ca8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a40      	ldr	r2, [pc, #256]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a3d      	ldr	r2, [pc, #244]	; (8004e2c <TIM_Base_SetConfig+0x118>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a3c      	ldr	r2, [pc, #240]	; (8004e30 <TIM_Base_SetConfig+0x11c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3b      	ldr	r2, [pc, #236]	; (8004e34 <TIM_Base_SetConfig+0x120>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3a      	ldr	r2, [pc, #232]	; (8004e38 <TIM_Base_SetConfig+0x124>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d108      	bne.n	8004d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2f      	ldr	r2, [pc, #188]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02b      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d027      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <TIM_Base_SetConfig+0x118>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d023      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <TIM_Base_SetConfig+0x11c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01f      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <TIM_Base_SetConfig+0x120>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01b      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <TIM_Base_SetConfig+0x124>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d017      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <TIM_Base_SetConfig+0x128>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a27      	ldr	r2, [pc, #156]	; (8004e40 <TIM_Base_SetConfig+0x12c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00f      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a26      	ldr	r2, [pc, #152]	; (8004e44 <TIM_Base_SetConfig+0x130>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a25      	ldr	r2, [pc, #148]	; (8004e48 <TIM_Base_SetConfig+0x134>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d007      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a24      	ldr	r2, [pc, #144]	; (8004e4c <TIM_Base_SetConfig+0x138>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <TIM_Base_SetConfig+0x13c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d108      	bne.n	8004dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_Base_SetConfig+0xf8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <TIM_Base_SetConfig+0x124>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d103      	bne.n	8004e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	615a      	str	r2, [r3, #20]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40010400 	.word	0x40010400
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40014400 	.word	0x40014400
 8004e44:	40014800 	.word	0x40014800
 8004e48:	40001800 	.word	0x40001800
 8004e4c:	40001c00 	.word	0x40001c00
 8004e50:	40002000 	.word	0x40002000

08004e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0201 	bic.w	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f023 030a 	bic.w	r3, r3, #10
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f023 0210 	bic.w	r2, r3, #16
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	031b      	lsls	r3, r3, #12
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f043 0307 	orr.w	r3, r3, #7
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	021a      	lsls	r2, r3, #8
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e05a      	b.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a21      	ldr	r2, [pc, #132]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d022      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fec:	d01d      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d018      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1b      	ldr	r2, [pc, #108]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a18      	ldr	r2, [pc, #96]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a17      	ldr	r2, [pc, #92]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a15      	ldr	r2, [pc, #84]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d10c      	bne.n	8005044 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	4313      	orrs	r3, r2
 800503a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000
 8005068:	40000400 	.word	0x40000400
 800506c:	40000800 	.word	0x40000800
 8005070:	40000c00 	.word	0x40000c00
 8005074:	40010400 	.word	0x40010400
 8005078:	40014000 	.word	0x40014000
 800507c:	40001800 	.word	0x40001800

08005080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e03f      	b.n	800513a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fd f978 	bl	80023c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2224      	movs	r2, #36	; 0x24
 80050d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f90b 	bl	8005308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b088      	sub	sp, #32
 8005146:	af02      	add	r7, sp, #8
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b20      	cmp	r3, #32
 8005160:	f040 8083 	bne.w	800526a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_UART_Transmit+0x2e>
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e07b      	b.n	800526c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_UART_Transmit+0x40>
 800517e:	2302      	movs	r3, #2
 8005180:	e074      	b.n	800526c <HAL_UART_Transmit+0x12a>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2221      	movs	r2, #33	; 0x21
 8005194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005198:	f7fd fa8c 	bl	80026b4 <HAL_GetTick>
 800519c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	88fa      	ldrh	r2, [r7, #6]
 80051a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	88fa      	ldrh	r2, [r7, #6]
 80051a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80051b2:	e042      	b.n	800523a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d122      	bne.n	8005212 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2200      	movs	r2, #0
 80051d4:	2180      	movs	r1, #128	; 0x80
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f84c 	bl	8005274 <UART_WaitOnFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e042      	b.n	800526c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	3302      	adds	r3, #2
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	e017      	b.n	800523a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3301      	adds	r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	e013      	b.n	800523a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	2180      	movs	r1, #128	; 0x80
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f829 	bl	8005274 <UART_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e01f      	b.n	800526c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	60ba      	str	r2, [r7, #8]
 8005232:	781a      	ldrb	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1b7      	bne.n	80051b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2200      	movs	r2, #0
 800524c:	2140      	movs	r1, #64	; 0x40
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f810 	bl	8005274 <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e006      	b.n	800526c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e000      	b.n	800526c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800526a:	2302      	movs	r3, #2
  }
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005284:	e02c      	b.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d028      	beq.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005294:	f7fd fa0e 	bl	80026b4 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d21d      	bcs.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695a      	ldr	r2, [r3, #20]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e00f      	b.n	8005300 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4013      	ands	r3, r2
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d0c3      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800534a:	f023 030c 	bic.w	r3, r3, #12
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	430b      	orrs	r3, r1
 8005356:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005376:	f040 818b 	bne.w	8005690 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4ac1      	ldr	r2, [pc, #772]	; (8005684 <UART_SetConfig+0x37c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d005      	beq.n	8005390 <UART_SetConfig+0x88>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4abf      	ldr	r2, [pc, #764]	; (8005688 <UART_SetConfig+0x380>)
 800538a:	4293      	cmp	r3, r2
 800538c:	f040 80bd 	bne.w	800550a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005390:	f7fe faf0 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 8005394:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	461d      	mov	r5, r3
 800539a:	f04f 0600 	mov.w	r6, #0
 800539e:	46a8      	mov	r8, r5
 80053a0:	46b1      	mov	r9, r6
 80053a2:	eb18 0308 	adds.w	r3, r8, r8
 80053a6:	eb49 0409 	adc.w	r4, r9, r9
 80053aa:	4698      	mov	r8, r3
 80053ac:	46a1      	mov	r9, r4
 80053ae:	eb18 0805 	adds.w	r8, r8, r5
 80053b2:	eb49 0906 	adc.w	r9, r9, r6
 80053b6:	f04f 0100 	mov.w	r1, #0
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053ca:	4688      	mov	r8, r1
 80053cc:	4691      	mov	r9, r2
 80053ce:	eb18 0005 	adds.w	r0, r8, r5
 80053d2:	eb49 0106 	adc.w	r1, r9, r6
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	461d      	mov	r5, r3
 80053dc:	f04f 0600 	mov.w	r6, #0
 80053e0:	196b      	adds	r3, r5, r5
 80053e2:	eb46 0406 	adc.w	r4, r6, r6
 80053e6:	461a      	mov	r2, r3
 80053e8:	4623      	mov	r3, r4
 80053ea:	f7fb fc4d 	bl	8000c88 <__aeabi_uldivmod>
 80053ee:	4603      	mov	r3, r0
 80053f0:	460c      	mov	r4, r1
 80053f2:	461a      	mov	r2, r3
 80053f4:	4ba5      	ldr	r3, [pc, #660]	; (800568c <UART_SetConfig+0x384>)
 80053f6:	fba3 2302 	umull	r2, r3, r3, r2
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	461d      	mov	r5, r3
 8005404:	f04f 0600 	mov.w	r6, #0
 8005408:	46a9      	mov	r9, r5
 800540a:	46b2      	mov	sl, r6
 800540c:	eb19 0309 	adds.w	r3, r9, r9
 8005410:	eb4a 040a 	adc.w	r4, sl, sl
 8005414:	4699      	mov	r9, r3
 8005416:	46a2      	mov	sl, r4
 8005418:	eb19 0905 	adds.w	r9, r9, r5
 800541c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005420:	f04f 0100 	mov.w	r1, #0
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800542c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005434:	4689      	mov	r9, r1
 8005436:	4692      	mov	sl, r2
 8005438:	eb19 0005 	adds.w	r0, r9, r5
 800543c:	eb4a 0106 	adc.w	r1, sl, r6
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	461d      	mov	r5, r3
 8005446:	f04f 0600 	mov.w	r6, #0
 800544a:	196b      	adds	r3, r5, r5
 800544c:	eb46 0406 	adc.w	r4, r6, r6
 8005450:	461a      	mov	r2, r3
 8005452:	4623      	mov	r3, r4
 8005454:	f7fb fc18 	bl	8000c88 <__aeabi_uldivmod>
 8005458:	4603      	mov	r3, r0
 800545a:	460c      	mov	r4, r1
 800545c:	461a      	mov	r2, r3
 800545e:	4b8b      	ldr	r3, [pc, #556]	; (800568c <UART_SetConfig+0x384>)
 8005460:	fba3 1302 	umull	r1, r3, r3, r2
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	2164      	movs	r1, #100	; 0x64
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	3332      	adds	r3, #50	; 0x32
 8005472:	4a86      	ldr	r2, [pc, #536]	; (800568c <UART_SetConfig+0x384>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005480:	4498      	add	r8, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	461d      	mov	r5, r3
 8005486:	f04f 0600 	mov.w	r6, #0
 800548a:	46a9      	mov	r9, r5
 800548c:	46b2      	mov	sl, r6
 800548e:	eb19 0309 	adds.w	r3, r9, r9
 8005492:	eb4a 040a 	adc.w	r4, sl, sl
 8005496:	4699      	mov	r9, r3
 8005498:	46a2      	mov	sl, r4
 800549a:	eb19 0905 	adds.w	r9, r9, r5
 800549e:	eb4a 0a06 	adc.w	sl, sl, r6
 80054a2:	f04f 0100 	mov.w	r1, #0
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054b6:	4689      	mov	r9, r1
 80054b8:	4692      	mov	sl, r2
 80054ba:	eb19 0005 	adds.w	r0, r9, r5
 80054be:	eb4a 0106 	adc.w	r1, sl, r6
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	461d      	mov	r5, r3
 80054c8:	f04f 0600 	mov.w	r6, #0
 80054cc:	196b      	adds	r3, r5, r5
 80054ce:	eb46 0406 	adc.w	r4, r6, r6
 80054d2:	461a      	mov	r2, r3
 80054d4:	4623      	mov	r3, r4
 80054d6:	f7fb fbd7 	bl	8000c88 <__aeabi_uldivmod>
 80054da:	4603      	mov	r3, r0
 80054dc:	460c      	mov	r4, r1
 80054de:	461a      	mov	r2, r3
 80054e0:	4b6a      	ldr	r3, [pc, #424]	; (800568c <UART_SetConfig+0x384>)
 80054e2:	fba3 1302 	umull	r1, r3, r3, r2
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	2164      	movs	r1, #100	; 0x64
 80054ea:	fb01 f303 	mul.w	r3, r1, r3
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	3332      	adds	r3, #50	; 0x32
 80054f4:	4a65      	ldr	r2, [pc, #404]	; (800568c <UART_SetConfig+0x384>)
 80054f6:	fba2 2303 	umull	r2, r3, r2, r3
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	f003 0207 	and.w	r2, r3, #7
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4442      	add	r2, r8
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	e26f      	b.n	80059ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800550a:	f7fe fa1f 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 800550e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	461d      	mov	r5, r3
 8005514:	f04f 0600 	mov.w	r6, #0
 8005518:	46a8      	mov	r8, r5
 800551a:	46b1      	mov	r9, r6
 800551c:	eb18 0308 	adds.w	r3, r8, r8
 8005520:	eb49 0409 	adc.w	r4, r9, r9
 8005524:	4698      	mov	r8, r3
 8005526:	46a1      	mov	r9, r4
 8005528:	eb18 0805 	adds.w	r8, r8, r5
 800552c:	eb49 0906 	adc.w	r9, r9, r6
 8005530:	f04f 0100 	mov.w	r1, #0
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800553c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005540:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005544:	4688      	mov	r8, r1
 8005546:	4691      	mov	r9, r2
 8005548:	eb18 0005 	adds.w	r0, r8, r5
 800554c:	eb49 0106 	adc.w	r1, r9, r6
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	461d      	mov	r5, r3
 8005556:	f04f 0600 	mov.w	r6, #0
 800555a:	196b      	adds	r3, r5, r5
 800555c:	eb46 0406 	adc.w	r4, r6, r6
 8005560:	461a      	mov	r2, r3
 8005562:	4623      	mov	r3, r4
 8005564:	f7fb fb90 	bl	8000c88 <__aeabi_uldivmod>
 8005568:	4603      	mov	r3, r0
 800556a:	460c      	mov	r4, r1
 800556c:	461a      	mov	r2, r3
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <UART_SetConfig+0x384>)
 8005570:	fba3 2302 	umull	r2, r3, r3, r2
 8005574:	095b      	lsrs	r3, r3, #5
 8005576:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	461d      	mov	r5, r3
 800557e:	f04f 0600 	mov.w	r6, #0
 8005582:	46a9      	mov	r9, r5
 8005584:	46b2      	mov	sl, r6
 8005586:	eb19 0309 	adds.w	r3, r9, r9
 800558a:	eb4a 040a 	adc.w	r4, sl, sl
 800558e:	4699      	mov	r9, r3
 8005590:	46a2      	mov	sl, r4
 8005592:	eb19 0905 	adds.w	r9, r9, r5
 8005596:	eb4a 0a06 	adc.w	sl, sl, r6
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055ae:	4689      	mov	r9, r1
 80055b0:	4692      	mov	sl, r2
 80055b2:	eb19 0005 	adds.w	r0, r9, r5
 80055b6:	eb4a 0106 	adc.w	r1, sl, r6
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	461d      	mov	r5, r3
 80055c0:	f04f 0600 	mov.w	r6, #0
 80055c4:	196b      	adds	r3, r5, r5
 80055c6:	eb46 0406 	adc.w	r4, r6, r6
 80055ca:	461a      	mov	r2, r3
 80055cc:	4623      	mov	r3, r4
 80055ce:	f7fb fb5b 	bl	8000c88 <__aeabi_uldivmod>
 80055d2:	4603      	mov	r3, r0
 80055d4:	460c      	mov	r4, r1
 80055d6:	461a      	mov	r2, r3
 80055d8:	4b2c      	ldr	r3, [pc, #176]	; (800568c <UART_SetConfig+0x384>)
 80055da:	fba3 1302 	umull	r1, r3, r3, r2
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	2164      	movs	r1, #100	; 0x64
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	3332      	adds	r3, #50	; 0x32
 80055ec:	4a27      	ldr	r2, [pc, #156]	; (800568c <UART_SetConfig+0x384>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055fa:	4498      	add	r8, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	461d      	mov	r5, r3
 8005600:	f04f 0600 	mov.w	r6, #0
 8005604:	46a9      	mov	r9, r5
 8005606:	46b2      	mov	sl, r6
 8005608:	eb19 0309 	adds.w	r3, r9, r9
 800560c:	eb4a 040a 	adc.w	r4, sl, sl
 8005610:	4699      	mov	r9, r3
 8005612:	46a2      	mov	sl, r4
 8005614:	eb19 0905 	adds.w	r9, r9, r5
 8005618:	eb4a 0a06 	adc.w	sl, sl, r6
 800561c:	f04f 0100 	mov.w	r1, #0
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800562c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005630:	4689      	mov	r9, r1
 8005632:	4692      	mov	sl, r2
 8005634:	eb19 0005 	adds.w	r0, r9, r5
 8005638:	eb4a 0106 	adc.w	r1, sl, r6
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	461d      	mov	r5, r3
 8005642:	f04f 0600 	mov.w	r6, #0
 8005646:	196b      	adds	r3, r5, r5
 8005648:	eb46 0406 	adc.w	r4, r6, r6
 800564c:	461a      	mov	r2, r3
 800564e:	4623      	mov	r3, r4
 8005650:	f7fb fb1a 	bl	8000c88 <__aeabi_uldivmod>
 8005654:	4603      	mov	r3, r0
 8005656:	460c      	mov	r4, r1
 8005658:	461a      	mov	r2, r3
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <UART_SetConfig+0x384>)
 800565c:	fba3 1302 	umull	r1, r3, r3, r2
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	2164      	movs	r1, #100	; 0x64
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	3332      	adds	r3, #50	; 0x32
 800566e:	4a07      	ldr	r2, [pc, #28]	; (800568c <UART_SetConfig+0x384>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	f003 0207 	and.w	r2, r3, #7
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4442      	add	r2, r8
 8005680:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005682:	e1b2      	b.n	80059ea <UART_SetConfig+0x6e2>
 8005684:	40011000 	.word	0x40011000
 8005688:	40011400 	.word	0x40011400
 800568c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4ad7      	ldr	r2, [pc, #860]	; (80059f4 <UART_SetConfig+0x6ec>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d005      	beq.n	80056a6 <UART_SetConfig+0x39e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4ad6      	ldr	r2, [pc, #856]	; (80059f8 <UART_SetConfig+0x6f0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	f040 80d1 	bne.w	8005848 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a6:	f7fe f965 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 80056aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	469a      	mov	sl, r3
 80056b0:	f04f 0b00 	mov.w	fp, #0
 80056b4:	46d0      	mov	r8, sl
 80056b6:	46d9      	mov	r9, fp
 80056b8:	eb18 0308 	adds.w	r3, r8, r8
 80056bc:	eb49 0409 	adc.w	r4, r9, r9
 80056c0:	4698      	mov	r8, r3
 80056c2:	46a1      	mov	r9, r4
 80056c4:	eb18 080a 	adds.w	r8, r8, sl
 80056c8:	eb49 090b 	adc.w	r9, r9, fp
 80056cc:	f04f 0100 	mov.w	r1, #0
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056e0:	4688      	mov	r8, r1
 80056e2:	4691      	mov	r9, r2
 80056e4:	eb1a 0508 	adds.w	r5, sl, r8
 80056e8:	eb4b 0609 	adc.w	r6, fp, r9
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4619      	mov	r1, r3
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	f04f 0400 	mov.w	r4, #0
 80056fe:	0094      	lsls	r4, r2, #2
 8005700:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005704:	008b      	lsls	r3, r1, #2
 8005706:	461a      	mov	r2, r3
 8005708:	4623      	mov	r3, r4
 800570a:	4628      	mov	r0, r5
 800570c:	4631      	mov	r1, r6
 800570e:	f7fb fabb 	bl	8000c88 <__aeabi_uldivmod>
 8005712:	4603      	mov	r3, r0
 8005714:	460c      	mov	r4, r1
 8005716:	461a      	mov	r2, r3
 8005718:	4bb8      	ldr	r3, [pc, #736]	; (80059fc <UART_SetConfig+0x6f4>)
 800571a:	fba3 2302 	umull	r2, r3, r3, r2
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	469b      	mov	fp, r3
 8005728:	f04f 0c00 	mov.w	ip, #0
 800572c:	46d9      	mov	r9, fp
 800572e:	46e2      	mov	sl, ip
 8005730:	eb19 0309 	adds.w	r3, r9, r9
 8005734:	eb4a 040a 	adc.w	r4, sl, sl
 8005738:	4699      	mov	r9, r3
 800573a:	46a2      	mov	sl, r4
 800573c:	eb19 090b 	adds.w	r9, r9, fp
 8005740:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005744:	f04f 0100 	mov.w	r1, #0
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005758:	4689      	mov	r9, r1
 800575a:	4692      	mov	sl, r2
 800575c:	eb1b 0509 	adds.w	r5, fp, r9
 8005760:	eb4c 060a 	adc.w	r6, ip, sl
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4619      	mov	r1, r3
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	f04f 0400 	mov.w	r4, #0
 8005776:	0094      	lsls	r4, r2, #2
 8005778:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800577c:	008b      	lsls	r3, r1, #2
 800577e:	461a      	mov	r2, r3
 8005780:	4623      	mov	r3, r4
 8005782:	4628      	mov	r0, r5
 8005784:	4631      	mov	r1, r6
 8005786:	f7fb fa7f 	bl	8000c88 <__aeabi_uldivmod>
 800578a:	4603      	mov	r3, r0
 800578c:	460c      	mov	r4, r1
 800578e:	461a      	mov	r2, r3
 8005790:	4b9a      	ldr	r3, [pc, #616]	; (80059fc <UART_SetConfig+0x6f4>)
 8005792:	fba3 1302 	umull	r1, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2164      	movs	r1, #100	; 0x64
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	3332      	adds	r3, #50	; 0x32
 80057a4:	4a95      	ldr	r2, [pc, #596]	; (80059fc <UART_SetConfig+0x6f4>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b0:	4498      	add	r8, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	469b      	mov	fp, r3
 80057b6:	f04f 0c00 	mov.w	ip, #0
 80057ba:	46d9      	mov	r9, fp
 80057bc:	46e2      	mov	sl, ip
 80057be:	eb19 0309 	adds.w	r3, r9, r9
 80057c2:	eb4a 040a 	adc.w	r4, sl, sl
 80057c6:	4699      	mov	r9, r3
 80057c8:	46a2      	mov	sl, r4
 80057ca:	eb19 090b 	adds.w	r9, r9, fp
 80057ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057d2:	f04f 0100 	mov.w	r1, #0
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057e6:	4689      	mov	r9, r1
 80057e8:	4692      	mov	sl, r2
 80057ea:	eb1b 0509 	adds.w	r5, fp, r9
 80057ee:	eb4c 060a 	adc.w	r6, ip, sl
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4619      	mov	r1, r3
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	f04f 0400 	mov.w	r4, #0
 8005804:	0094      	lsls	r4, r2, #2
 8005806:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800580a:	008b      	lsls	r3, r1, #2
 800580c:	461a      	mov	r2, r3
 800580e:	4623      	mov	r3, r4
 8005810:	4628      	mov	r0, r5
 8005812:	4631      	mov	r1, r6
 8005814:	f7fb fa38 	bl	8000c88 <__aeabi_uldivmod>
 8005818:	4603      	mov	r3, r0
 800581a:	460c      	mov	r4, r1
 800581c:	461a      	mov	r2, r3
 800581e:	4b77      	ldr	r3, [pc, #476]	; (80059fc <UART_SetConfig+0x6f4>)
 8005820:	fba3 1302 	umull	r1, r3, r3, r2
 8005824:	095b      	lsrs	r3, r3, #5
 8005826:	2164      	movs	r1, #100	; 0x64
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	3332      	adds	r3, #50	; 0x32
 8005832:	4a72      	ldr	r2, [pc, #456]	; (80059fc <UART_SetConfig+0x6f4>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	f003 020f 	and.w	r2, r3, #15
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4442      	add	r2, r8
 8005844:	609a      	str	r2, [r3, #8]
 8005846:	e0d0      	b.n	80059ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005848:	f7fe f880 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 800584c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	469a      	mov	sl, r3
 8005852:	f04f 0b00 	mov.w	fp, #0
 8005856:	46d0      	mov	r8, sl
 8005858:	46d9      	mov	r9, fp
 800585a:	eb18 0308 	adds.w	r3, r8, r8
 800585e:	eb49 0409 	adc.w	r4, r9, r9
 8005862:	4698      	mov	r8, r3
 8005864:	46a1      	mov	r9, r4
 8005866:	eb18 080a 	adds.w	r8, r8, sl
 800586a:	eb49 090b 	adc.w	r9, r9, fp
 800586e:	f04f 0100 	mov.w	r1, #0
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800587a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800587e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005882:	4688      	mov	r8, r1
 8005884:	4691      	mov	r9, r2
 8005886:	eb1a 0508 	adds.w	r5, sl, r8
 800588a:	eb4b 0609 	adc.w	r6, fp, r9
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4619      	mov	r1, r3
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	f04f 0400 	mov.w	r4, #0
 80058a0:	0094      	lsls	r4, r2, #2
 80058a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058a6:	008b      	lsls	r3, r1, #2
 80058a8:	461a      	mov	r2, r3
 80058aa:	4623      	mov	r3, r4
 80058ac:	4628      	mov	r0, r5
 80058ae:	4631      	mov	r1, r6
 80058b0:	f7fb f9ea 	bl	8000c88 <__aeabi_uldivmod>
 80058b4:	4603      	mov	r3, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	461a      	mov	r2, r3
 80058ba:	4b50      	ldr	r3, [pc, #320]	; (80059fc <UART_SetConfig+0x6f4>)
 80058bc:	fba3 2302 	umull	r2, r3, r3, r2
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	469b      	mov	fp, r3
 80058ca:	f04f 0c00 	mov.w	ip, #0
 80058ce:	46d9      	mov	r9, fp
 80058d0:	46e2      	mov	sl, ip
 80058d2:	eb19 0309 	adds.w	r3, r9, r9
 80058d6:	eb4a 040a 	adc.w	r4, sl, sl
 80058da:	4699      	mov	r9, r3
 80058dc:	46a2      	mov	sl, r4
 80058de:	eb19 090b 	adds.w	r9, r9, fp
 80058e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058e6:	f04f 0100 	mov.w	r1, #0
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058fa:	4689      	mov	r9, r1
 80058fc:	4692      	mov	sl, r2
 80058fe:	eb1b 0509 	adds.w	r5, fp, r9
 8005902:	eb4c 060a 	adc.w	r6, ip, sl
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4619      	mov	r1, r3
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	f04f 0400 	mov.w	r4, #0
 8005918:	0094      	lsls	r4, r2, #2
 800591a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800591e:	008b      	lsls	r3, r1, #2
 8005920:	461a      	mov	r2, r3
 8005922:	4623      	mov	r3, r4
 8005924:	4628      	mov	r0, r5
 8005926:	4631      	mov	r1, r6
 8005928:	f7fb f9ae 	bl	8000c88 <__aeabi_uldivmod>
 800592c:	4603      	mov	r3, r0
 800592e:	460c      	mov	r4, r1
 8005930:	461a      	mov	r2, r3
 8005932:	4b32      	ldr	r3, [pc, #200]	; (80059fc <UART_SetConfig+0x6f4>)
 8005934:	fba3 1302 	umull	r1, r3, r3, r2
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	2164      	movs	r1, #100	; 0x64
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	3332      	adds	r3, #50	; 0x32
 8005946:	4a2d      	ldr	r2, [pc, #180]	; (80059fc <UART_SetConfig+0x6f4>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005952:	4498      	add	r8, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	469b      	mov	fp, r3
 8005958:	f04f 0c00 	mov.w	ip, #0
 800595c:	46d9      	mov	r9, fp
 800595e:	46e2      	mov	sl, ip
 8005960:	eb19 0309 	adds.w	r3, r9, r9
 8005964:	eb4a 040a 	adc.w	r4, sl, sl
 8005968:	4699      	mov	r9, r3
 800596a:	46a2      	mov	sl, r4
 800596c:	eb19 090b 	adds.w	r9, r9, fp
 8005970:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005974:	f04f 0100 	mov.w	r1, #0
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005980:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005984:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005988:	4689      	mov	r9, r1
 800598a:	4692      	mov	sl, r2
 800598c:	eb1b 0509 	adds.w	r5, fp, r9
 8005990:	eb4c 060a 	adc.w	r6, ip, sl
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	4619      	mov	r1, r3
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	f04f 0400 	mov.w	r4, #0
 80059a6:	0094      	lsls	r4, r2, #2
 80059a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059ac:	008b      	lsls	r3, r1, #2
 80059ae:	461a      	mov	r2, r3
 80059b0:	4623      	mov	r3, r4
 80059b2:	4628      	mov	r0, r5
 80059b4:	4631      	mov	r1, r6
 80059b6:	f7fb f967 	bl	8000c88 <__aeabi_uldivmod>
 80059ba:	4603      	mov	r3, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	461a      	mov	r2, r3
 80059c0:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <UART_SetConfig+0x6f4>)
 80059c2:	fba3 1302 	umull	r1, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2164      	movs	r1, #100	; 0x64
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	3332      	adds	r3, #50	; 0x32
 80059d4:	4a09      	ldr	r2, [pc, #36]	; (80059fc <UART_SetConfig+0x6f4>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4442      	add	r2, r8
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	e7ff      	b.n	80059ea <UART_SetConfig+0x6e2>
 80059ea:	bf00      	nop
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f4:	40011000 	.word	0x40011000
 80059f8:	40011400 	.word	0x40011400
 80059fc:	51eb851f 	.word	0x51eb851f

08005a00 <__errno>:
 8005a00:	4b01      	ldr	r3, [pc, #4]	; (8005a08 <__errno+0x8>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	2000000c 	.word	0x2000000c

08005a0c <__libc_init_array>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	4e0d      	ldr	r6, [pc, #52]	; (8005a44 <__libc_init_array+0x38>)
 8005a10:	4c0d      	ldr	r4, [pc, #52]	; (8005a48 <__libc_init_array+0x3c>)
 8005a12:	1ba4      	subs	r4, r4, r6
 8005a14:	10a4      	asrs	r4, r4, #2
 8005a16:	2500      	movs	r5, #0
 8005a18:	42a5      	cmp	r5, r4
 8005a1a:	d109      	bne.n	8005a30 <__libc_init_array+0x24>
 8005a1c:	4e0b      	ldr	r6, [pc, #44]	; (8005a4c <__libc_init_array+0x40>)
 8005a1e:	4c0c      	ldr	r4, [pc, #48]	; (8005a50 <__libc_init_array+0x44>)
 8005a20:	f002 f85e 	bl	8007ae0 <_init>
 8005a24:	1ba4      	subs	r4, r4, r6
 8005a26:	10a4      	asrs	r4, r4, #2
 8005a28:	2500      	movs	r5, #0
 8005a2a:	42a5      	cmp	r5, r4
 8005a2c:	d105      	bne.n	8005a3a <__libc_init_array+0x2e>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a34:	4798      	blx	r3
 8005a36:	3501      	adds	r5, #1
 8005a38:	e7ee      	b.n	8005a18 <__libc_init_array+0xc>
 8005a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a3e:	4798      	blx	r3
 8005a40:	3501      	adds	r5, #1
 8005a42:	e7f2      	b.n	8005a2a <__libc_init_array+0x1e>
 8005a44:	08007d98 	.word	0x08007d98
 8005a48:	08007d98 	.word	0x08007d98
 8005a4c:	08007d98 	.word	0x08007d98
 8005a50:	08007d9c 	.word	0x08007d9c

08005a54 <memset>:
 8005a54:	4402      	add	r2, r0
 8005a56:	4603      	mov	r3, r0
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d100      	bne.n	8005a5e <memset+0xa>
 8005a5c:	4770      	bx	lr
 8005a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a62:	e7f9      	b.n	8005a58 <memset+0x4>

08005a64 <__cvt>:
 8005a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	ec55 4b10 	vmov	r4, r5, d0
 8005a6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005a6e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a72:	2d00      	cmp	r5, #0
 8005a74:	460e      	mov	r6, r1
 8005a76:	4691      	mov	r9, r2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	bfb8      	it	lt
 8005a7c:	4622      	movlt	r2, r4
 8005a7e:	462b      	mov	r3, r5
 8005a80:	f027 0720 	bic.w	r7, r7, #32
 8005a84:	bfbb      	ittet	lt
 8005a86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a8a:	461d      	movlt	r5, r3
 8005a8c:	2300      	movge	r3, #0
 8005a8e:	232d      	movlt	r3, #45	; 0x2d
 8005a90:	bfb8      	it	lt
 8005a92:	4614      	movlt	r4, r2
 8005a94:	2f46      	cmp	r7, #70	; 0x46
 8005a96:	700b      	strb	r3, [r1, #0]
 8005a98:	d004      	beq.n	8005aa4 <__cvt+0x40>
 8005a9a:	2f45      	cmp	r7, #69	; 0x45
 8005a9c:	d100      	bne.n	8005aa0 <__cvt+0x3c>
 8005a9e:	3601      	adds	r6, #1
 8005aa0:	2102      	movs	r1, #2
 8005aa2:	e000      	b.n	8005aa6 <__cvt+0x42>
 8005aa4:	2103      	movs	r1, #3
 8005aa6:	ab03      	add	r3, sp, #12
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	ab02      	add	r3, sp, #8
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	4632      	mov	r2, r6
 8005ab0:	4653      	mov	r3, sl
 8005ab2:	ec45 4b10 	vmov	d0, r4, r5
 8005ab6:	f000 fcdf 	bl	8006478 <_dtoa_r>
 8005aba:	2f47      	cmp	r7, #71	; 0x47
 8005abc:	4680      	mov	r8, r0
 8005abe:	d102      	bne.n	8005ac6 <__cvt+0x62>
 8005ac0:	f019 0f01 	tst.w	r9, #1
 8005ac4:	d026      	beq.n	8005b14 <__cvt+0xb0>
 8005ac6:	2f46      	cmp	r7, #70	; 0x46
 8005ac8:	eb08 0906 	add.w	r9, r8, r6
 8005acc:	d111      	bne.n	8005af2 <__cvt+0x8e>
 8005ace:	f898 3000 	ldrb.w	r3, [r8]
 8005ad2:	2b30      	cmp	r3, #48	; 0x30
 8005ad4:	d10a      	bne.n	8005aec <__cvt+0x88>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4620      	mov	r0, r4
 8005adc:	4629      	mov	r1, r5
 8005ade:	f7fb f813 	bl	8000b08 <__aeabi_dcmpeq>
 8005ae2:	b918      	cbnz	r0, 8005aec <__cvt+0x88>
 8005ae4:	f1c6 0601 	rsb	r6, r6, #1
 8005ae8:	f8ca 6000 	str.w	r6, [sl]
 8005aec:	f8da 3000 	ldr.w	r3, [sl]
 8005af0:	4499      	add	r9, r3
 8005af2:	2200      	movs	r2, #0
 8005af4:	2300      	movs	r3, #0
 8005af6:	4620      	mov	r0, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	f7fb f805 	bl	8000b08 <__aeabi_dcmpeq>
 8005afe:	b938      	cbnz	r0, 8005b10 <__cvt+0xac>
 8005b00:	2230      	movs	r2, #48	; 0x30
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	454b      	cmp	r3, r9
 8005b06:	d205      	bcs.n	8005b14 <__cvt+0xb0>
 8005b08:	1c59      	adds	r1, r3, #1
 8005b0a:	9103      	str	r1, [sp, #12]
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e7f8      	b.n	8005b02 <__cvt+0x9e>
 8005b10:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b14:	9b03      	ldr	r3, [sp, #12]
 8005b16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b18:	eba3 0308 	sub.w	r3, r3, r8
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	b004      	add	sp, #16
 8005b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005b26 <__exponent>:
 8005b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	bfba      	itte	lt
 8005b2e:	4249      	neglt	r1, r1
 8005b30:	232d      	movlt	r3, #45	; 0x2d
 8005b32:	232b      	movge	r3, #43	; 0x2b
 8005b34:	2909      	cmp	r1, #9
 8005b36:	f804 2b02 	strb.w	r2, [r4], #2
 8005b3a:	7043      	strb	r3, [r0, #1]
 8005b3c:	dd20      	ble.n	8005b80 <__exponent+0x5a>
 8005b3e:	f10d 0307 	add.w	r3, sp, #7
 8005b42:	461f      	mov	r7, r3
 8005b44:	260a      	movs	r6, #10
 8005b46:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b4a:	fb06 1115 	mls	r1, r6, r5, r1
 8005b4e:	3130      	adds	r1, #48	; 0x30
 8005b50:	2d09      	cmp	r5, #9
 8005b52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b56:	f103 32ff 	add.w	r2, r3, #4294967295
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	dc09      	bgt.n	8005b72 <__exponent+0x4c>
 8005b5e:	3130      	adds	r1, #48	; 0x30
 8005b60:	3b02      	subs	r3, #2
 8005b62:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b66:	42bb      	cmp	r3, r7
 8005b68:	4622      	mov	r2, r4
 8005b6a:	d304      	bcc.n	8005b76 <__exponent+0x50>
 8005b6c:	1a10      	subs	r0, r2, r0
 8005b6e:	b003      	add	sp, #12
 8005b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b72:	4613      	mov	r3, r2
 8005b74:	e7e7      	b.n	8005b46 <__exponent+0x20>
 8005b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b7a:	f804 2b01 	strb.w	r2, [r4], #1
 8005b7e:	e7f2      	b.n	8005b66 <__exponent+0x40>
 8005b80:	2330      	movs	r3, #48	; 0x30
 8005b82:	4419      	add	r1, r3
 8005b84:	7083      	strb	r3, [r0, #2]
 8005b86:	1d02      	adds	r2, r0, #4
 8005b88:	70c1      	strb	r1, [r0, #3]
 8005b8a:	e7ef      	b.n	8005b6c <__exponent+0x46>

08005b8c <_printf_float>:
 8005b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	b08d      	sub	sp, #52	; 0x34
 8005b92:	460c      	mov	r4, r1
 8005b94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005b98:	4616      	mov	r6, r2
 8005b9a:	461f      	mov	r7, r3
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	f001 fa23 	bl	8006fe8 <_localeconv_r>
 8005ba2:	6803      	ldr	r3, [r0, #0]
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fa fb32 	bl	8000210 <strlen>
 8005bac:	2300      	movs	r3, #0
 8005bae:	930a      	str	r3, [sp, #40]	; 0x28
 8005bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb4:	9005      	str	r0, [sp, #20]
 8005bb6:	3307      	adds	r3, #7
 8005bb8:	f023 0307 	bic.w	r3, r3, #7
 8005bbc:	f103 0208 	add.w	r2, r3, #8
 8005bc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bc4:	f8d4 b000 	ldr.w	fp, [r4]
 8005bc8:	f8c8 2000 	str.w	r2, [r8]
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bd4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bdc:	9307      	str	r3, [sp, #28]
 8005bde:	f8cd 8018 	str.w	r8, [sp, #24]
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	4ba7      	ldr	r3, [pc, #668]	; (8005e84 <_printf_float+0x2f8>)
 8005be8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bec:	f7fa ffbe 	bl	8000b6c <__aeabi_dcmpun>
 8005bf0:	bb70      	cbnz	r0, 8005c50 <_printf_float+0xc4>
 8005bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf6:	4ba3      	ldr	r3, [pc, #652]	; (8005e84 <_printf_float+0x2f8>)
 8005bf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bfc:	f7fa ff98 	bl	8000b30 <__aeabi_dcmple>
 8005c00:	bb30      	cbnz	r0, 8005c50 <_printf_float+0xc4>
 8005c02:	2200      	movs	r2, #0
 8005c04:	2300      	movs	r3, #0
 8005c06:	4640      	mov	r0, r8
 8005c08:	4649      	mov	r1, r9
 8005c0a:	f7fa ff87 	bl	8000b1c <__aeabi_dcmplt>
 8005c0e:	b110      	cbz	r0, 8005c16 <_printf_float+0x8a>
 8005c10:	232d      	movs	r3, #45	; 0x2d
 8005c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c16:	4a9c      	ldr	r2, [pc, #624]	; (8005e88 <_printf_float+0x2fc>)
 8005c18:	4b9c      	ldr	r3, [pc, #624]	; (8005e8c <_printf_float+0x300>)
 8005c1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005c1e:	bf8c      	ite	hi
 8005c20:	4690      	movhi	r8, r2
 8005c22:	4698      	movls	r8, r3
 8005c24:	2303      	movs	r3, #3
 8005c26:	f02b 0204 	bic.w	r2, fp, #4
 8005c2a:	6123      	str	r3, [r4, #16]
 8005c2c:	6022      	str	r2, [r4, #0]
 8005c2e:	f04f 0900 	mov.w	r9, #0
 8005c32:	9700      	str	r7, [sp, #0]
 8005c34:	4633      	mov	r3, r6
 8005c36:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 f9e6 	bl	800600c <_printf_common>
 8005c40:	3001      	adds	r0, #1
 8005c42:	f040 808d 	bne.w	8005d60 <_printf_float+0x1d4>
 8005c46:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4a:	b00d      	add	sp, #52	; 0x34
 8005c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa ff88 	bl	8000b6c <__aeabi_dcmpun>
 8005c5c:	b110      	cbz	r0, 8005c64 <_printf_float+0xd8>
 8005c5e:	4a8c      	ldr	r2, [pc, #560]	; (8005e90 <_printf_float+0x304>)
 8005c60:	4b8c      	ldr	r3, [pc, #560]	; (8005e94 <_printf_float+0x308>)
 8005c62:	e7da      	b.n	8005c1a <_printf_float+0x8e>
 8005c64:	6861      	ldr	r1, [r4, #4]
 8005c66:	1c4b      	adds	r3, r1, #1
 8005c68:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005c6c:	a80a      	add	r0, sp, #40	; 0x28
 8005c6e:	d13e      	bne.n	8005cee <_printf_float+0x162>
 8005c70:	2306      	movs	r3, #6
 8005c72:	6063      	str	r3, [r4, #4]
 8005c74:	2300      	movs	r3, #0
 8005c76:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005c7a:	ab09      	add	r3, sp, #36	; 0x24
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	ec49 8b10 	vmov	d0, r8, r9
 8005c82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c86:	6022      	str	r2, [r4, #0]
 8005c88:	f8cd a004 	str.w	sl, [sp, #4]
 8005c8c:	6861      	ldr	r1, [r4, #4]
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f7ff fee8 	bl	8005a64 <__cvt>
 8005c94:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005c98:	2b47      	cmp	r3, #71	; 0x47
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	d109      	bne.n	8005cb2 <_printf_float+0x126>
 8005c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca0:	1cd8      	adds	r0, r3, #3
 8005ca2:	db02      	blt.n	8005caa <_printf_float+0x11e>
 8005ca4:	6862      	ldr	r2, [r4, #4]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	dd47      	ble.n	8005d3a <_printf_float+0x1ae>
 8005caa:	f1aa 0a02 	sub.w	sl, sl, #2
 8005cae:	fa5f fa8a 	uxtb.w	sl, sl
 8005cb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005cb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cb8:	d824      	bhi.n	8005d04 <_printf_float+0x178>
 8005cba:	3901      	subs	r1, #1
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cc2:	9109      	str	r1, [sp, #36]	; 0x24
 8005cc4:	f7ff ff2f 	bl	8005b26 <__exponent>
 8005cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cca:	1813      	adds	r3, r2, r0
 8005ccc:	2a01      	cmp	r2, #1
 8005cce:	4681      	mov	r9, r0
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	dc02      	bgt.n	8005cda <_printf_float+0x14e>
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	07d1      	lsls	r1, r2, #31
 8005cd8:	d501      	bpl.n	8005cde <_printf_float+0x152>
 8005cda:	3301      	adds	r3, #1
 8005cdc:	6123      	str	r3, [r4, #16]
 8005cde:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0a5      	beq.n	8005c32 <_printf_float+0xa6>
 8005ce6:	232d      	movs	r3, #45	; 0x2d
 8005ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cec:	e7a1      	b.n	8005c32 <_printf_float+0xa6>
 8005cee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005cf2:	f000 8177 	beq.w	8005fe4 <_printf_float+0x458>
 8005cf6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005cfa:	d1bb      	bne.n	8005c74 <_printf_float+0xe8>
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	d1b9      	bne.n	8005c74 <_printf_float+0xe8>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e7b6      	b.n	8005c72 <_printf_float+0xe6>
 8005d04:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005d08:	d119      	bne.n	8005d3e <_printf_float+0x1b2>
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	dd0c      	ble.n	8005d2a <_printf_float+0x19e>
 8005d10:	6121      	str	r1, [r4, #16]
 8005d12:	b913      	cbnz	r3, 8005d1a <_printf_float+0x18e>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	07d2      	lsls	r2, r2, #31
 8005d18:	d502      	bpl.n	8005d20 <_printf_float+0x194>
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	440b      	add	r3, r1
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d22:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d24:	f04f 0900 	mov.w	r9, #0
 8005d28:	e7d9      	b.n	8005cde <_printf_float+0x152>
 8005d2a:	b913      	cbnz	r3, 8005d32 <_printf_float+0x1a6>
 8005d2c:	6822      	ldr	r2, [r4, #0]
 8005d2e:	07d0      	lsls	r0, r2, #31
 8005d30:	d501      	bpl.n	8005d36 <_printf_float+0x1aa>
 8005d32:	3302      	adds	r3, #2
 8005d34:	e7f3      	b.n	8005d1e <_printf_float+0x192>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7f1      	b.n	8005d1e <_printf_float+0x192>
 8005d3a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005d3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d42:	4293      	cmp	r3, r2
 8005d44:	db05      	blt.n	8005d52 <_printf_float+0x1c6>
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	6123      	str	r3, [r4, #16]
 8005d4a:	07d1      	lsls	r1, r2, #31
 8005d4c:	d5e8      	bpl.n	8005d20 <_printf_float+0x194>
 8005d4e:	3301      	adds	r3, #1
 8005d50:	e7e5      	b.n	8005d1e <_printf_float+0x192>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bfd4      	ite	le
 8005d56:	f1c3 0302 	rsble	r3, r3, #2
 8005d5a:	2301      	movgt	r3, #1
 8005d5c:	4413      	add	r3, r2
 8005d5e:	e7de      	b.n	8005d1e <_printf_float+0x192>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	055a      	lsls	r2, r3, #21
 8005d64:	d407      	bmi.n	8005d76 <_printf_float+0x1ea>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	4642      	mov	r2, r8
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	d12b      	bne.n	8005dcc <_printf_float+0x240>
 8005d74:	e767      	b.n	8005c46 <_printf_float+0xba>
 8005d76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005d7a:	f240 80dc 	bls.w	8005f36 <_printf_float+0x3aa>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d86:	f7fa febf 	bl	8000b08 <__aeabi_dcmpeq>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d033      	beq.n	8005df6 <_printf_float+0x26a>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4a41      	ldr	r2, [pc, #260]	; (8005e98 <_printf_float+0x30c>)
 8005d92:	4631      	mov	r1, r6
 8005d94:	4628      	mov	r0, r5
 8005d96:	47b8      	blx	r7
 8005d98:	3001      	adds	r0, #1
 8005d9a:	f43f af54 	beq.w	8005c46 <_printf_float+0xba>
 8005d9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005da2:	429a      	cmp	r2, r3
 8005da4:	db02      	blt.n	8005dac <_printf_float+0x220>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	07d8      	lsls	r0, r3, #31
 8005daa:	d50f      	bpl.n	8005dcc <_printf_float+0x240>
 8005dac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005db0:	4631      	mov	r1, r6
 8005db2:	4628      	mov	r0, r5
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f af45 	beq.w	8005c46 <_printf_float+0xba>
 8005dbc:	f04f 0800 	mov.w	r8, #0
 8005dc0:	f104 091a 	add.w	r9, r4, #26
 8005dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	4543      	cmp	r3, r8
 8005dca:	dc09      	bgt.n	8005de0 <_printf_float+0x254>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	079b      	lsls	r3, r3, #30
 8005dd0:	f100 8103 	bmi.w	8005fda <_printf_float+0x44e>
 8005dd4:	68e0      	ldr	r0, [r4, #12]
 8005dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd8:	4298      	cmp	r0, r3
 8005dda:	bfb8      	it	lt
 8005ddc:	4618      	movlt	r0, r3
 8005dde:	e734      	b.n	8005c4a <_printf_float+0xbe>
 8005de0:	2301      	movs	r3, #1
 8005de2:	464a      	mov	r2, r9
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af2b 	beq.w	8005c46 <_printf_float+0xba>
 8005df0:	f108 0801 	add.w	r8, r8, #1
 8005df4:	e7e6      	b.n	8005dc4 <_printf_float+0x238>
 8005df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	dc2b      	bgt.n	8005e54 <_printf_float+0x2c8>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4a26      	ldr	r2, [pc, #152]	; (8005e98 <_printf_float+0x30c>)
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	f43f af1d 	beq.w	8005c46 <_printf_float+0xba>
 8005e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0e:	b923      	cbnz	r3, 8005e1a <_printf_float+0x28e>
 8005e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e12:	b913      	cbnz	r3, 8005e1a <_printf_float+0x28e>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	07d9      	lsls	r1, r3, #31
 8005e18:	d5d8      	bpl.n	8005dcc <_printf_float+0x240>
 8005e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f af0e 	beq.w	8005c46 <_printf_float+0xba>
 8005e2a:	f04f 0900 	mov.w	r9, #0
 8005e2e:	f104 0a1a 	add.w	sl, r4, #26
 8005e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e34:	425b      	negs	r3, r3
 8005e36:	454b      	cmp	r3, r9
 8005e38:	dc01      	bgt.n	8005e3e <_printf_float+0x2b2>
 8005e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3c:	e794      	b.n	8005d68 <_printf_float+0x1dc>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4652      	mov	r2, sl
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	f43f aefc 	beq.w	8005c46 <_printf_float+0xba>
 8005e4e:	f109 0901 	add.w	r9, r9, #1
 8005e52:	e7ee      	b.n	8005e32 <_printf_float+0x2a6>
 8005e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	bfa8      	it	ge
 8005e5c:	461a      	movge	r2, r3
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	4691      	mov	r9, r2
 8005e62:	dd07      	ble.n	8005e74 <_printf_float+0x2e8>
 8005e64:	4613      	mov	r3, r2
 8005e66:	4631      	mov	r1, r6
 8005e68:	4642      	mov	r2, r8
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b8      	blx	r7
 8005e6e:	3001      	adds	r0, #1
 8005e70:	f43f aee9 	beq.w	8005c46 <_printf_float+0xba>
 8005e74:	f104 031a 	add.w	r3, r4, #26
 8005e78:	f04f 0b00 	mov.w	fp, #0
 8005e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e80:	9306      	str	r3, [sp, #24]
 8005e82:	e015      	b.n	8005eb0 <_printf_float+0x324>
 8005e84:	7fefffff 	.word	0x7fefffff
 8005e88:	08007b34 	.word	0x08007b34
 8005e8c:	08007b30 	.word	0x08007b30
 8005e90:	08007b3c 	.word	0x08007b3c
 8005e94:	08007b38 	.word	0x08007b38
 8005e98:	08007b40 	.word	0x08007b40
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	9a06      	ldr	r2, [sp, #24]
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	47b8      	blx	r7
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	f43f aecd 	beq.w	8005c46 <_printf_float+0xba>
 8005eac:	f10b 0b01 	add.w	fp, fp, #1
 8005eb0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005eb4:	ebaa 0309 	sub.w	r3, sl, r9
 8005eb8:	455b      	cmp	r3, fp
 8005eba:	dcef      	bgt.n	8005e9c <_printf_float+0x310>
 8005ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	44d0      	add	r8, sl
 8005ec4:	db15      	blt.n	8005ef2 <_printf_float+0x366>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	07da      	lsls	r2, r3, #31
 8005eca:	d412      	bmi.n	8005ef2 <_printf_float+0x366>
 8005ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ed0:	eba3 020a 	sub.w	r2, r3, sl
 8005ed4:	eba3 0a01 	sub.w	sl, r3, r1
 8005ed8:	4592      	cmp	sl, r2
 8005eda:	bfa8      	it	ge
 8005edc:	4692      	movge	sl, r2
 8005ede:	f1ba 0f00 	cmp.w	sl, #0
 8005ee2:	dc0e      	bgt.n	8005f02 <_printf_float+0x376>
 8005ee4:	f04f 0800 	mov.w	r8, #0
 8005ee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005eec:	f104 091a 	add.w	r9, r4, #26
 8005ef0:	e019      	b.n	8005f26 <_printf_float+0x39a>
 8005ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b8      	blx	r7
 8005efc:	3001      	adds	r0, #1
 8005efe:	d1e5      	bne.n	8005ecc <_printf_float+0x340>
 8005f00:	e6a1      	b.n	8005c46 <_printf_float+0xba>
 8005f02:	4653      	mov	r3, sl
 8005f04:	4642      	mov	r2, r8
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1e9      	bne.n	8005ee4 <_printf_float+0x358>
 8005f10:	e699      	b.n	8005c46 <_printf_float+0xba>
 8005f12:	2301      	movs	r3, #1
 8005f14:	464a      	mov	r2, r9
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f ae92 	beq.w	8005c46 <_printf_float+0xba>
 8005f22:	f108 0801 	add.w	r8, r8, #1
 8005f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	eba3 030a 	sub.w	r3, r3, sl
 8005f30:	4543      	cmp	r3, r8
 8005f32:	dcee      	bgt.n	8005f12 <_printf_float+0x386>
 8005f34:	e74a      	b.n	8005dcc <_printf_float+0x240>
 8005f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f38:	2a01      	cmp	r2, #1
 8005f3a:	dc01      	bgt.n	8005f40 <_printf_float+0x3b4>
 8005f3c:	07db      	lsls	r3, r3, #31
 8005f3e:	d53a      	bpl.n	8005fb6 <_printf_float+0x42a>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4642      	mov	r2, r8
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	f43f ae7b 	beq.w	8005c46 <_printf_float+0xba>
 8005f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f108 0801 	add.w	r8, r8, #1
 8005f60:	f43f ae71 	beq.w	8005c46 <_printf_float+0xba>
 8005f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f66:	2200      	movs	r2, #0
 8005f68:	f103 3aff 	add.w	sl, r3, #4294967295
 8005f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f70:	2300      	movs	r3, #0
 8005f72:	f7fa fdc9 	bl	8000b08 <__aeabi_dcmpeq>
 8005f76:	b9c8      	cbnz	r0, 8005fac <_printf_float+0x420>
 8005f78:	4653      	mov	r3, sl
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b8      	blx	r7
 8005f82:	3001      	adds	r0, #1
 8005f84:	d10e      	bne.n	8005fa4 <_printf_float+0x418>
 8005f86:	e65e      	b.n	8005c46 <_printf_float+0xba>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4652      	mov	r2, sl
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4628      	mov	r0, r5
 8005f90:	47b8      	blx	r7
 8005f92:	3001      	adds	r0, #1
 8005f94:	f43f ae57 	beq.w	8005c46 <_printf_float+0xba>
 8005f98:	f108 0801 	add.w	r8, r8, #1
 8005f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	4543      	cmp	r3, r8
 8005fa2:	dcf1      	bgt.n	8005f88 <_printf_float+0x3fc>
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005faa:	e6de      	b.n	8005d6a <_printf_float+0x1de>
 8005fac:	f04f 0800 	mov.w	r8, #0
 8005fb0:	f104 0a1a 	add.w	sl, r4, #26
 8005fb4:	e7f2      	b.n	8005f9c <_printf_float+0x410>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e7df      	b.n	8005f7a <_printf_float+0x3ee>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	464a      	mov	r2, r9
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	f43f ae3e 	beq.w	8005c46 <_printf_float+0xba>
 8005fca:	f108 0801 	add.w	r8, r8, #1
 8005fce:	68e3      	ldr	r3, [r4, #12]
 8005fd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	4543      	cmp	r3, r8
 8005fd6:	dcf0      	bgt.n	8005fba <_printf_float+0x42e>
 8005fd8:	e6fc      	b.n	8005dd4 <_printf_float+0x248>
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	f104 0919 	add.w	r9, r4, #25
 8005fe2:	e7f4      	b.n	8005fce <_printf_float+0x442>
 8005fe4:	2900      	cmp	r1, #0
 8005fe6:	f43f ae8b 	beq.w	8005d00 <_printf_float+0x174>
 8005fea:	2300      	movs	r3, #0
 8005fec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005ff0:	ab09      	add	r3, sp, #36	; 0x24
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	ec49 8b10 	vmov	d0, r8, r9
 8005ff8:	6022      	str	r2, [r4, #0]
 8005ffa:	f8cd a004 	str.w	sl, [sp, #4]
 8005ffe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006002:	4628      	mov	r0, r5
 8006004:	f7ff fd2e 	bl	8005a64 <__cvt>
 8006008:	4680      	mov	r8, r0
 800600a:	e648      	b.n	8005c9e <_printf_float+0x112>

0800600c <_printf_common>:
 800600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	4691      	mov	r9, r2
 8006012:	461f      	mov	r7, r3
 8006014:	688a      	ldr	r2, [r1, #8]
 8006016:	690b      	ldr	r3, [r1, #16]
 8006018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800601c:	4293      	cmp	r3, r2
 800601e:	bfb8      	it	lt
 8006020:	4613      	movlt	r3, r2
 8006022:	f8c9 3000 	str.w	r3, [r9]
 8006026:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800602a:	4606      	mov	r6, r0
 800602c:	460c      	mov	r4, r1
 800602e:	b112      	cbz	r2, 8006036 <_printf_common+0x2a>
 8006030:	3301      	adds	r3, #1
 8006032:	f8c9 3000 	str.w	r3, [r9]
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	0699      	lsls	r1, r3, #26
 800603a:	bf42      	ittt	mi
 800603c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006040:	3302      	addmi	r3, #2
 8006042:	f8c9 3000 	strmi.w	r3, [r9]
 8006046:	6825      	ldr	r5, [r4, #0]
 8006048:	f015 0506 	ands.w	r5, r5, #6
 800604c:	d107      	bne.n	800605e <_printf_common+0x52>
 800604e:	f104 0a19 	add.w	sl, r4, #25
 8006052:	68e3      	ldr	r3, [r4, #12]
 8006054:	f8d9 2000 	ldr.w	r2, [r9]
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	42ab      	cmp	r3, r5
 800605c:	dc28      	bgt.n	80060b0 <_printf_common+0xa4>
 800605e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	3300      	adds	r3, #0
 8006066:	bf18      	it	ne
 8006068:	2301      	movne	r3, #1
 800606a:	0692      	lsls	r2, r2, #26
 800606c:	d42d      	bmi.n	80060ca <_printf_common+0xbe>
 800606e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006072:	4639      	mov	r1, r7
 8006074:	4630      	mov	r0, r6
 8006076:	47c0      	blx	r8
 8006078:	3001      	adds	r0, #1
 800607a:	d020      	beq.n	80060be <_printf_common+0xb2>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	68e5      	ldr	r5, [r4, #12]
 8006080:	f8d9 2000 	ldr.w	r2, [r9]
 8006084:	f003 0306 	and.w	r3, r3, #6
 8006088:	2b04      	cmp	r3, #4
 800608a:	bf08      	it	eq
 800608c:	1aad      	subeq	r5, r5, r2
 800608e:	68a3      	ldr	r3, [r4, #8]
 8006090:	6922      	ldr	r2, [r4, #16]
 8006092:	bf0c      	ite	eq
 8006094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006098:	2500      	movne	r5, #0
 800609a:	4293      	cmp	r3, r2
 800609c:	bfc4      	itt	gt
 800609e:	1a9b      	subgt	r3, r3, r2
 80060a0:	18ed      	addgt	r5, r5, r3
 80060a2:	f04f 0900 	mov.w	r9, #0
 80060a6:	341a      	adds	r4, #26
 80060a8:	454d      	cmp	r5, r9
 80060aa:	d11a      	bne.n	80060e2 <_printf_common+0xd6>
 80060ac:	2000      	movs	r0, #0
 80060ae:	e008      	b.n	80060c2 <_printf_common+0xb6>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4652      	mov	r2, sl
 80060b4:	4639      	mov	r1, r7
 80060b6:	4630      	mov	r0, r6
 80060b8:	47c0      	blx	r8
 80060ba:	3001      	adds	r0, #1
 80060bc:	d103      	bne.n	80060c6 <_printf_common+0xba>
 80060be:	f04f 30ff 	mov.w	r0, #4294967295
 80060c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c6:	3501      	adds	r5, #1
 80060c8:	e7c3      	b.n	8006052 <_printf_common+0x46>
 80060ca:	18e1      	adds	r1, r4, r3
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	2030      	movs	r0, #48	; 0x30
 80060d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060d4:	4422      	add	r2, r4
 80060d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060de:	3302      	adds	r3, #2
 80060e0:	e7c5      	b.n	800606e <_printf_common+0x62>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4622      	mov	r2, r4
 80060e6:	4639      	mov	r1, r7
 80060e8:	4630      	mov	r0, r6
 80060ea:	47c0      	blx	r8
 80060ec:	3001      	adds	r0, #1
 80060ee:	d0e6      	beq.n	80060be <_printf_common+0xb2>
 80060f0:	f109 0901 	add.w	r9, r9, #1
 80060f4:	e7d8      	b.n	80060a8 <_printf_common+0x9c>
	...

080060f8 <_printf_i>:
 80060f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006100:	460c      	mov	r4, r1
 8006102:	7e09      	ldrb	r1, [r1, #24]
 8006104:	b085      	sub	sp, #20
 8006106:	296e      	cmp	r1, #110	; 0x6e
 8006108:	4617      	mov	r7, r2
 800610a:	4606      	mov	r6, r0
 800610c:	4698      	mov	r8, r3
 800610e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006110:	f000 80b3 	beq.w	800627a <_printf_i+0x182>
 8006114:	d822      	bhi.n	800615c <_printf_i+0x64>
 8006116:	2963      	cmp	r1, #99	; 0x63
 8006118:	d036      	beq.n	8006188 <_printf_i+0x90>
 800611a:	d80a      	bhi.n	8006132 <_printf_i+0x3a>
 800611c:	2900      	cmp	r1, #0
 800611e:	f000 80b9 	beq.w	8006294 <_printf_i+0x19c>
 8006122:	2958      	cmp	r1, #88	; 0x58
 8006124:	f000 8083 	beq.w	800622e <_printf_i+0x136>
 8006128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800612c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006130:	e032      	b.n	8006198 <_printf_i+0xa0>
 8006132:	2964      	cmp	r1, #100	; 0x64
 8006134:	d001      	beq.n	800613a <_printf_i+0x42>
 8006136:	2969      	cmp	r1, #105	; 0x69
 8006138:	d1f6      	bne.n	8006128 <_printf_i+0x30>
 800613a:	6820      	ldr	r0, [r4, #0]
 800613c:	6813      	ldr	r3, [r2, #0]
 800613e:	0605      	lsls	r5, r0, #24
 8006140:	f103 0104 	add.w	r1, r3, #4
 8006144:	d52a      	bpl.n	800619c <_printf_i+0xa4>
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6011      	str	r1, [r2, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da03      	bge.n	8006156 <_printf_i+0x5e>
 800614e:	222d      	movs	r2, #45	; 0x2d
 8006150:	425b      	negs	r3, r3
 8006152:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006156:	486f      	ldr	r0, [pc, #444]	; (8006314 <_printf_i+0x21c>)
 8006158:	220a      	movs	r2, #10
 800615a:	e039      	b.n	80061d0 <_printf_i+0xd8>
 800615c:	2973      	cmp	r1, #115	; 0x73
 800615e:	f000 809d 	beq.w	800629c <_printf_i+0x1a4>
 8006162:	d808      	bhi.n	8006176 <_printf_i+0x7e>
 8006164:	296f      	cmp	r1, #111	; 0x6f
 8006166:	d020      	beq.n	80061aa <_printf_i+0xb2>
 8006168:	2970      	cmp	r1, #112	; 0x70
 800616a:	d1dd      	bne.n	8006128 <_printf_i+0x30>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	f043 0320 	orr.w	r3, r3, #32
 8006172:	6023      	str	r3, [r4, #0]
 8006174:	e003      	b.n	800617e <_printf_i+0x86>
 8006176:	2975      	cmp	r1, #117	; 0x75
 8006178:	d017      	beq.n	80061aa <_printf_i+0xb2>
 800617a:	2978      	cmp	r1, #120	; 0x78
 800617c:	d1d4      	bne.n	8006128 <_printf_i+0x30>
 800617e:	2378      	movs	r3, #120	; 0x78
 8006180:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006184:	4864      	ldr	r0, [pc, #400]	; (8006318 <_printf_i+0x220>)
 8006186:	e055      	b.n	8006234 <_printf_i+0x13c>
 8006188:	6813      	ldr	r3, [r2, #0]
 800618a:	1d19      	adds	r1, r3, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6011      	str	r1, [r2, #0]
 8006190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006198:	2301      	movs	r3, #1
 800619a:	e08c      	b.n	80062b6 <_printf_i+0x1be>
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6011      	str	r1, [r2, #0]
 80061a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061a4:	bf18      	it	ne
 80061a6:	b21b      	sxthne	r3, r3
 80061a8:	e7cf      	b.n	800614a <_printf_i+0x52>
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	6825      	ldr	r5, [r4, #0]
 80061ae:	1d18      	adds	r0, r3, #4
 80061b0:	6010      	str	r0, [r2, #0]
 80061b2:	0628      	lsls	r0, r5, #24
 80061b4:	d501      	bpl.n	80061ba <_printf_i+0xc2>
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	e002      	b.n	80061c0 <_printf_i+0xc8>
 80061ba:	0668      	lsls	r0, r5, #25
 80061bc:	d5fb      	bpl.n	80061b6 <_printf_i+0xbe>
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	4854      	ldr	r0, [pc, #336]	; (8006314 <_printf_i+0x21c>)
 80061c2:	296f      	cmp	r1, #111	; 0x6f
 80061c4:	bf14      	ite	ne
 80061c6:	220a      	movne	r2, #10
 80061c8:	2208      	moveq	r2, #8
 80061ca:	2100      	movs	r1, #0
 80061cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061d0:	6865      	ldr	r5, [r4, #4]
 80061d2:	60a5      	str	r5, [r4, #8]
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	f2c0 8095 	blt.w	8006304 <_printf_i+0x20c>
 80061da:	6821      	ldr	r1, [r4, #0]
 80061dc:	f021 0104 	bic.w	r1, r1, #4
 80061e0:	6021      	str	r1, [r4, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d13d      	bne.n	8006262 <_printf_i+0x16a>
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	f040 808e 	bne.w	8006308 <_printf_i+0x210>
 80061ec:	4665      	mov	r5, ip
 80061ee:	2a08      	cmp	r2, #8
 80061f0:	d10b      	bne.n	800620a <_printf_i+0x112>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	07db      	lsls	r3, r3, #31
 80061f6:	d508      	bpl.n	800620a <_printf_i+0x112>
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	6862      	ldr	r2, [r4, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	bfde      	ittt	le
 8006200:	2330      	movle	r3, #48	; 0x30
 8006202:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006206:	f105 35ff 	addle.w	r5, r5, #4294967295
 800620a:	ebac 0305 	sub.w	r3, ip, r5
 800620e:	6123      	str	r3, [r4, #16]
 8006210:	f8cd 8000 	str.w	r8, [sp]
 8006214:	463b      	mov	r3, r7
 8006216:	aa03      	add	r2, sp, #12
 8006218:	4621      	mov	r1, r4
 800621a:	4630      	mov	r0, r6
 800621c:	f7ff fef6 	bl	800600c <_printf_common>
 8006220:	3001      	adds	r0, #1
 8006222:	d14d      	bne.n	80062c0 <_printf_i+0x1c8>
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	b005      	add	sp, #20
 800622a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800622e:	4839      	ldr	r0, [pc, #228]	; (8006314 <_printf_i+0x21c>)
 8006230:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006234:	6813      	ldr	r3, [r2, #0]
 8006236:	6821      	ldr	r1, [r4, #0]
 8006238:	1d1d      	adds	r5, r3, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6015      	str	r5, [r2, #0]
 800623e:	060a      	lsls	r2, r1, #24
 8006240:	d50b      	bpl.n	800625a <_printf_i+0x162>
 8006242:	07ca      	lsls	r2, r1, #31
 8006244:	bf44      	itt	mi
 8006246:	f041 0120 	orrmi.w	r1, r1, #32
 800624a:	6021      	strmi	r1, [r4, #0]
 800624c:	b91b      	cbnz	r3, 8006256 <_printf_i+0x15e>
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	f022 0220 	bic.w	r2, r2, #32
 8006254:	6022      	str	r2, [r4, #0]
 8006256:	2210      	movs	r2, #16
 8006258:	e7b7      	b.n	80061ca <_printf_i+0xd2>
 800625a:	064d      	lsls	r5, r1, #25
 800625c:	bf48      	it	mi
 800625e:	b29b      	uxthmi	r3, r3
 8006260:	e7ef      	b.n	8006242 <_printf_i+0x14a>
 8006262:	4665      	mov	r5, ip
 8006264:	fbb3 f1f2 	udiv	r1, r3, r2
 8006268:	fb02 3311 	mls	r3, r2, r1, r3
 800626c:	5cc3      	ldrb	r3, [r0, r3]
 800626e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006272:	460b      	mov	r3, r1
 8006274:	2900      	cmp	r1, #0
 8006276:	d1f5      	bne.n	8006264 <_printf_i+0x16c>
 8006278:	e7b9      	b.n	80061ee <_printf_i+0xf6>
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	6825      	ldr	r5, [r4, #0]
 800627e:	6961      	ldr	r1, [r4, #20]
 8006280:	1d18      	adds	r0, r3, #4
 8006282:	6010      	str	r0, [r2, #0]
 8006284:	0628      	lsls	r0, r5, #24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	d501      	bpl.n	800628e <_printf_i+0x196>
 800628a:	6019      	str	r1, [r3, #0]
 800628c:	e002      	b.n	8006294 <_printf_i+0x19c>
 800628e:	066a      	lsls	r2, r5, #25
 8006290:	d5fb      	bpl.n	800628a <_printf_i+0x192>
 8006292:	8019      	strh	r1, [r3, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	6123      	str	r3, [r4, #16]
 8006298:	4665      	mov	r5, ip
 800629a:	e7b9      	b.n	8006210 <_printf_i+0x118>
 800629c:	6813      	ldr	r3, [r2, #0]
 800629e:	1d19      	adds	r1, r3, #4
 80062a0:	6011      	str	r1, [r2, #0]
 80062a2:	681d      	ldr	r5, [r3, #0]
 80062a4:	6862      	ldr	r2, [r4, #4]
 80062a6:	2100      	movs	r1, #0
 80062a8:	4628      	mov	r0, r5
 80062aa:	f7f9 ffb9 	bl	8000220 <memchr>
 80062ae:	b108      	cbz	r0, 80062b4 <_printf_i+0x1bc>
 80062b0:	1b40      	subs	r0, r0, r5
 80062b2:	6060      	str	r0, [r4, #4]
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	6123      	str	r3, [r4, #16]
 80062b8:	2300      	movs	r3, #0
 80062ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062be:	e7a7      	b.n	8006210 <_printf_i+0x118>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	462a      	mov	r2, r5
 80062c4:	4639      	mov	r1, r7
 80062c6:	4630      	mov	r0, r6
 80062c8:	47c0      	blx	r8
 80062ca:	3001      	adds	r0, #1
 80062cc:	d0aa      	beq.n	8006224 <_printf_i+0x12c>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	079b      	lsls	r3, r3, #30
 80062d2:	d413      	bmi.n	80062fc <_printf_i+0x204>
 80062d4:	68e0      	ldr	r0, [r4, #12]
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	4298      	cmp	r0, r3
 80062da:	bfb8      	it	lt
 80062dc:	4618      	movlt	r0, r3
 80062de:	e7a3      	b.n	8006228 <_printf_i+0x130>
 80062e0:	2301      	movs	r3, #1
 80062e2:	464a      	mov	r2, r9
 80062e4:	4639      	mov	r1, r7
 80062e6:	4630      	mov	r0, r6
 80062e8:	47c0      	blx	r8
 80062ea:	3001      	adds	r0, #1
 80062ec:	d09a      	beq.n	8006224 <_printf_i+0x12c>
 80062ee:	3501      	adds	r5, #1
 80062f0:	68e3      	ldr	r3, [r4, #12]
 80062f2:	9a03      	ldr	r2, [sp, #12]
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	42ab      	cmp	r3, r5
 80062f8:	dcf2      	bgt.n	80062e0 <_printf_i+0x1e8>
 80062fa:	e7eb      	b.n	80062d4 <_printf_i+0x1dc>
 80062fc:	2500      	movs	r5, #0
 80062fe:	f104 0919 	add.w	r9, r4, #25
 8006302:	e7f5      	b.n	80062f0 <_printf_i+0x1f8>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1ac      	bne.n	8006262 <_printf_i+0x16a>
 8006308:	7803      	ldrb	r3, [r0, #0]
 800630a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800630e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006312:	e76c      	b.n	80061ee <_printf_i+0xf6>
 8006314:	08007b42 	.word	0x08007b42
 8006318:	08007b53 	.word	0x08007b53

0800631c <siprintf>:
 800631c:	b40e      	push	{r1, r2, r3}
 800631e:	b500      	push	{lr}
 8006320:	b09c      	sub	sp, #112	; 0x70
 8006322:	ab1d      	add	r3, sp, #116	; 0x74
 8006324:	9002      	str	r0, [sp, #8]
 8006326:	9006      	str	r0, [sp, #24]
 8006328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800632c:	4809      	ldr	r0, [pc, #36]	; (8006354 <siprintf+0x38>)
 800632e:	9107      	str	r1, [sp, #28]
 8006330:	9104      	str	r1, [sp, #16]
 8006332:	4909      	ldr	r1, [pc, #36]	; (8006358 <siprintf+0x3c>)
 8006334:	f853 2b04 	ldr.w	r2, [r3], #4
 8006338:	9105      	str	r1, [sp, #20]
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	a902      	add	r1, sp, #8
 8006340:	f001 fa5e 	bl	8007800 <_svfiprintf_r>
 8006344:	9b02      	ldr	r3, [sp, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	b01c      	add	sp, #112	; 0x70
 800634c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006350:	b003      	add	sp, #12
 8006352:	4770      	bx	lr
 8006354:	2000000c 	.word	0x2000000c
 8006358:	ffff0208 	.word	0xffff0208

0800635c <quorem>:
 800635c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	6903      	ldr	r3, [r0, #16]
 8006362:	690c      	ldr	r4, [r1, #16]
 8006364:	42a3      	cmp	r3, r4
 8006366:	4680      	mov	r8, r0
 8006368:	f2c0 8082 	blt.w	8006470 <quorem+0x114>
 800636c:	3c01      	subs	r4, #1
 800636e:	f101 0714 	add.w	r7, r1, #20
 8006372:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006376:	f100 0614 	add.w	r6, r0, #20
 800637a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800637e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006382:	eb06 030c 	add.w	r3, r6, ip
 8006386:	3501      	adds	r5, #1
 8006388:	eb07 090c 	add.w	r9, r7, ip
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	fbb0 f5f5 	udiv	r5, r0, r5
 8006392:	b395      	cbz	r5, 80063fa <quorem+0x9e>
 8006394:	f04f 0a00 	mov.w	sl, #0
 8006398:	4638      	mov	r0, r7
 800639a:	46b6      	mov	lr, r6
 800639c:	46d3      	mov	fp, sl
 800639e:	f850 2b04 	ldr.w	r2, [r0], #4
 80063a2:	b293      	uxth	r3, r2
 80063a4:	fb05 a303 	mla	r3, r5, r3, sl
 80063a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	ebab 0303 	sub.w	r3, fp, r3
 80063b2:	0c12      	lsrs	r2, r2, #16
 80063b4:	f8de b000 	ldr.w	fp, [lr]
 80063b8:	fb05 a202 	mla	r2, r5, r2, sl
 80063bc:	fa13 f38b 	uxtah	r3, r3, fp
 80063c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80063c4:	fa1f fb82 	uxth.w	fp, r2
 80063c8:	f8de 2000 	ldr.w	r2, [lr]
 80063cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80063d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063da:	4581      	cmp	r9, r0
 80063dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80063e0:	f84e 3b04 	str.w	r3, [lr], #4
 80063e4:	d2db      	bcs.n	800639e <quorem+0x42>
 80063e6:	f856 300c 	ldr.w	r3, [r6, ip]
 80063ea:	b933      	cbnz	r3, 80063fa <quorem+0x9e>
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	3b04      	subs	r3, #4
 80063f0:	429e      	cmp	r6, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	d330      	bcc.n	8006458 <quorem+0xfc>
 80063f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80063fa:	4640      	mov	r0, r8
 80063fc:	f001 f82a 	bl	8007454 <__mcmp>
 8006400:	2800      	cmp	r0, #0
 8006402:	db25      	blt.n	8006450 <quorem+0xf4>
 8006404:	3501      	adds	r5, #1
 8006406:	4630      	mov	r0, r6
 8006408:	f04f 0c00 	mov.w	ip, #0
 800640c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006410:	f8d0 e000 	ldr.w	lr, [r0]
 8006414:	b293      	uxth	r3, r2
 8006416:	ebac 0303 	sub.w	r3, ip, r3
 800641a:	0c12      	lsrs	r2, r2, #16
 800641c:	fa13 f38e 	uxtah	r3, r3, lr
 8006420:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800642e:	45b9      	cmp	r9, r7
 8006430:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006434:	f840 3b04 	str.w	r3, [r0], #4
 8006438:	d2e8      	bcs.n	800640c <quorem+0xb0>
 800643a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800643e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006442:	b92a      	cbnz	r2, 8006450 <quorem+0xf4>
 8006444:	3b04      	subs	r3, #4
 8006446:	429e      	cmp	r6, r3
 8006448:	461a      	mov	r2, r3
 800644a:	d30b      	bcc.n	8006464 <quorem+0x108>
 800644c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006450:	4628      	mov	r0, r5
 8006452:	b003      	add	sp, #12
 8006454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	3b04      	subs	r3, #4
 800645c:	2a00      	cmp	r2, #0
 800645e:	d1ca      	bne.n	80063f6 <quorem+0x9a>
 8006460:	3c01      	subs	r4, #1
 8006462:	e7c5      	b.n	80063f0 <quorem+0x94>
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	3b04      	subs	r3, #4
 8006468:	2a00      	cmp	r2, #0
 800646a:	d1ef      	bne.n	800644c <quorem+0xf0>
 800646c:	3c01      	subs	r4, #1
 800646e:	e7ea      	b.n	8006446 <quorem+0xea>
 8006470:	2000      	movs	r0, #0
 8006472:	e7ee      	b.n	8006452 <quorem+0xf6>
 8006474:	0000      	movs	r0, r0
	...

08006478 <_dtoa_r>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	ec57 6b10 	vmov	r6, r7, d0
 8006480:	b097      	sub	sp, #92	; 0x5c
 8006482:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006484:	9106      	str	r1, [sp, #24]
 8006486:	4604      	mov	r4, r0
 8006488:	920b      	str	r2, [sp, #44]	; 0x2c
 800648a:	9312      	str	r3, [sp, #72]	; 0x48
 800648c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006490:	e9cd 6700 	strd	r6, r7, [sp]
 8006494:	b93d      	cbnz	r5, 80064a6 <_dtoa_r+0x2e>
 8006496:	2010      	movs	r0, #16
 8006498:	f000 fdb4 	bl	8007004 <malloc>
 800649c:	6260      	str	r0, [r4, #36]	; 0x24
 800649e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064a2:	6005      	str	r5, [r0, #0]
 80064a4:	60c5      	str	r5, [r0, #12]
 80064a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a8:	6819      	ldr	r1, [r3, #0]
 80064aa:	b151      	cbz	r1, 80064c2 <_dtoa_r+0x4a>
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	604a      	str	r2, [r1, #4]
 80064b0:	2301      	movs	r3, #1
 80064b2:	4093      	lsls	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 fdeb 	bl	8007092 <_Bfree>
 80064bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	1e3b      	subs	r3, r7, #0
 80064c4:	bfbb      	ittet	lt
 80064c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064ca:	9301      	strlt	r3, [sp, #4]
 80064cc:	2300      	movge	r3, #0
 80064ce:	2201      	movlt	r2, #1
 80064d0:	bfac      	ite	ge
 80064d2:	f8c8 3000 	strge.w	r3, [r8]
 80064d6:	f8c8 2000 	strlt.w	r2, [r8]
 80064da:	4baf      	ldr	r3, [pc, #700]	; (8006798 <_dtoa_r+0x320>)
 80064dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80064e0:	ea33 0308 	bics.w	r3, r3, r8
 80064e4:	d114      	bne.n	8006510 <_dtoa_r+0x98>
 80064e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	9b00      	ldr	r3, [sp, #0]
 80064f0:	b923      	cbnz	r3, 80064fc <_dtoa_r+0x84>
 80064f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f000 8542 	beq.w	8006f80 <_dtoa_r+0xb08>
 80064fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80067ac <_dtoa_r+0x334>
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8544 	beq.w	8006f90 <_dtoa_r+0xb18>
 8006508:	f10b 0303 	add.w	r3, fp, #3
 800650c:	f000 bd3e 	b.w	8006f8c <_dtoa_r+0xb14>
 8006510:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006514:	2200      	movs	r2, #0
 8006516:	2300      	movs	r3, #0
 8006518:	4630      	mov	r0, r6
 800651a:	4639      	mov	r1, r7
 800651c:	f7fa faf4 	bl	8000b08 <__aeabi_dcmpeq>
 8006520:	4681      	mov	r9, r0
 8006522:	b168      	cbz	r0, 8006540 <_dtoa_r+0xc8>
 8006524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006526:	2301      	movs	r3, #1
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8524 	beq.w	8006f7a <_dtoa_r+0xb02>
 8006532:	4b9a      	ldr	r3, [pc, #616]	; (800679c <_dtoa_r+0x324>)
 8006534:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006536:	f103 3bff 	add.w	fp, r3, #4294967295
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	f000 bd28 	b.w	8006f90 <_dtoa_r+0xb18>
 8006540:	aa14      	add	r2, sp, #80	; 0x50
 8006542:	a915      	add	r1, sp, #84	; 0x54
 8006544:	ec47 6b10 	vmov	d0, r6, r7
 8006548:	4620      	mov	r0, r4
 800654a:	f000 fffa 	bl	8007542 <__d2b>
 800654e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006552:	9004      	str	r0, [sp, #16]
 8006554:	2d00      	cmp	r5, #0
 8006556:	d07c      	beq.n	8006652 <_dtoa_r+0x1da>
 8006558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800655c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006560:	46b2      	mov	sl, r6
 8006562:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800656a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800656e:	2200      	movs	r2, #0
 8006570:	4b8b      	ldr	r3, [pc, #556]	; (80067a0 <_dtoa_r+0x328>)
 8006572:	4650      	mov	r0, sl
 8006574:	4659      	mov	r1, fp
 8006576:	f7f9 fea7 	bl	80002c8 <__aeabi_dsub>
 800657a:	a381      	add	r3, pc, #516	; (adr r3, 8006780 <_dtoa_r+0x308>)
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f7fa f85a 	bl	8000638 <__aeabi_dmul>
 8006584:	a380      	add	r3, pc, #512	; (adr r3, 8006788 <_dtoa_r+0x310>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f7f9 fe9f 	bl	80002cc <__adddf3>
 800658e:	4606      	mov	r6, r0
 8006590:	4628      	mov	r0, r5
 8006592:	460f      	mov	r7, r1
 8006594:	f7f9 ffe6 	bl	8000564 <__aeabi_i2d>
 8006598:	a37d      	add	r3, pc, #500	; (adr r3, 8006790 <_dtoa_r+0x318>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f7fa f84b 	bl	8000638 <__aeabi_dmul>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4630      	mov	r0, r6
 80065a8:	4639      	mov	r1, r7
 80065aa:	f7f9 fe8f 	bl	80002cc <__adddf3>
 80065ae:	4606      	mov	r6, r0
 80065b0:	460f      	mov	r7, r1
 80065b2:	f7fa faf1 	bl	8000b98 <__aeabi_d2iz>
 80065b6:	2200      	movs	r2, #0
 80065b8:	4682      	mov	sl, r0
 80065ba:	2300      	movs	r3, #0
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7fa faac 	bl	8000b1c <__aeabi_dcmplt>
 80065c4:	b148      	cbz	r0, 80065da <_dtoa_r+0x162>
 80065c6:	4650      	mov	r0, sl
 80065c8:	f7f9 ffcc 	bl	8000564 <__aeabi_i2d>
 80065cc:	4632      	mov	r2, r6
 80065ce:	463b      	mov	r3, r7
 80065d0:	f7fa fa9a 	bl	8000b08 <__aeabi_dcmpeq>
 80065d4:	b908      	cbnz	r0, 80065da <_dtoa_r+0x162>
 80065d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065da:	f1ba 0f16 	cmp.w	sl, #22
 80065de:	d859      	bhi.n	8006694 <_dtoa_r+0x21c>
 80065e0:	4970      	ldr	r1, [pc, #448]	; (80067a4 <_dtoa_r+0x32c>)
 80065e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80065e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065ee:	f7fa fab3 	bl	8000b58 <__aeabi_dcmpgt>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d050      	beq.n	8006698 <_dtoa_r+0x220>
 80065f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065fa:	2300      	movs	r3, #0
 80065fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80065fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006600:	1b5d      	subs	r5, r3, r5
 8006602:	f1b5 0801 	subs.w	r8, r5, #1
 8006606:	bf49      	itett	mi
 8006608:	f1c5 0301 	rsbmi	r3, r5, #1
 800660c:	2300      	movpl	r3, #0
 800660e:	9305      	strmi	r3, [sp, #20]
 8006610:	f04f 0800 	movmi.w	r8, #0
 8006614:	bf58      	it	pl
 8006616:	9305      	strpl	r3, [sp, #20]
 8006618:	f1ba 0f00 	cmp.w	sl, #0
 800661c:	db3e      	blt.n	800669c <_dtoa_r+0x224>
 800661e:	2300      	movs	r3, #0
 8006620:	44d0      	add	r8, sl
 8006622:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006626:	9307      	str	r3, [sp, #28]
 8006628:	9b06      	ldr	r3, [sp, #24]
 800662a:	2b09      	cmp	r3, #9
 800662c:	f200 8090 	bhi.w	8006750 <_dtoa_r+0x2d8>
 8006630:	2b05      	cmp	r3, #5
 8006632:	bfc4      	itt	gt
 8006634:	3b04      	subgt	r3, #4
 8006636:	9306      	strgt	r3, [sp, #24]
 8006638:	9b06      	ldr	r3, [sp, #24]
 800663a:	f1a3 0302 	sub.w	r3, r3, #2
 800663e:	bfcc      	ite	gt
 8006640:	2500      	movgt	r5, #0
 8006642:	2501      	movle	r5, #1
 8006644:	2b03      	cmp	r3, #3
 8006646:	f200 808f 	bhi.w	8006768 <_dtoa_r+0x2f0>
 800664a:	e8df f003 	tbb	[pc, r3]
 800664e:	7f7d      	.short	0x7f7d
 8006650:	7131      	.short	0x7131
 8006652:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006656:	441d      	add	r5, r3
 8006658:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800665c:	2820      	cmp	r0, #32
 800665e:	dd13      	ble.n	8006688 <_dtoa_r+0x210>
 8006660:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006664:	9b00      	ldr	r3, [sp, #0]
 8006666:	fa08 f800 	lsl.w	r8, r8, r0
 800666a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800666e:	fa23 f000 	lsr.w	r0, r3, r0
 8006672:	ea48 0000 	orr.w	r0, r8, r0
 8006676:	f7f9 ff65 	bl	8000544 <__aeabi_ui2d>
 800667a:	2301      	movs	r3, #1
 800667c:	4682      	mov	sl, r0
 800667e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006682:	3d01      	subs	r5, #1
 8006684:	9313      	str	r3, [sp, #76]	; 0x4c
 8006686:	e772      	b.n	800656e <_dtoa_r+0xf6>
 8006688:	9b00      	ldr	r3, [sp, #0]
 800668a:	f1c0 0020 	rsb	r0, r0, #32
 800668e:	fa03 f000 	lsl.w	r0, r3, r0
 8006692:	e7f0      	b.n	8006676 <_dtoa_r+0x1fe>
 8006694:	2301      	movs	r3, #1
 8006696:	e7b1      	b.n	80065fc <_dtoa_r+0x184>
 8006698:	900f      	str	r0, [sp, #60]	; 0x3c
 800669a:	e7b0      	b.n	80065fe <_dtoa_r+0x186>
 800669c:	9b05      	ldr	r3, [sp, #20]
 800669e:	eba3 030a 	sub.w	r3, r3, sl
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	f1ca 0300 	rsb	r3, sl, #0
 80066a8:	9307      	str	r3, [sp, #28]
 80066aa:	2300      	movs	r3, #0
 80066ac:	930e      	str	r3, [sp, #56]	; 0x38
 80066ae:	e7bb      	b.n	8006628 <_dtoa_r+0x1b0>
 80066b0:	2301      	movs	r3, #1
 80066b2:	930a      	str	r3, [sp, #40]	; 0x28
 80066b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	dd59      	ble.n	800676e <_dtoa_r+0x2f6>
 80066ba:	9302      	str	r3, [sp, #8]
 80066bc:	4699      	mov	r9, r3
 80066be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066c0:	2200      	movs	r2, #0
 80066c2:	6072      	str	r2, [r6, #4]
 80066c4:	2204      	movs	r2, #4
 80066c6:	f102 0014 	add.w	r0, r2, #20
 80066ca:	4298      	cmp	r0, r3
 80066cc:	6871      	ldr	r1, [r6, #4]
 80066ce:	d953      	bls.n	8006778 <_dtoa_r+0x300>
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 fcaa 	bl	800702a <_Balloc>
 80066d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d8:	6030      	str	r0, [r6, #0]
 80066da:	f1b9 0f0e 	cmp.w	r9, #14
 80066de:	f8d3 b000 	ldr.w	fp, [r3]
 80066e2:	f200 80e6 	bhi.w	80068b2 <_dtoa_r+0x43a>
 80066e6:	2d00      	cmp	r5, #0
 80066e8:	f000 80e3 	beq.w	80068b2 <_dtoa_r+0x43a>
 80066ec:	ed9d 7b00 	vldr	d7, [sp]
 80066f0:	f1ba 0f00 	cmp.w	sl, #0
 80066f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80066f8:	dd74      	ble.n	80067e4 <_dtoa_r+0x36c>
 80066fa:	4a2a      	ldr	r2, [pc, #168]	; (80067a4 <_dtoa_r+0x32c>)
 80066fc:	f00a 030f 	and.w	r3, sl, #15
 8006700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006704:	ed93 7b00 	vldr	d7, [r3]
 8006708:	ea4f 162a 	mov.w	r6, sl, asr #4
 800670c:	06f0      	lsls	r0, r6, #27
 800670e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006712:	d565      	bpl.n	80067e0 <_dtoa_r+0x368>
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <_dtoa_r+0x330>)
 8006716:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800671a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800671e:	f7fa f8b5 	bl	800088c <__aeabi_ddiv>
 8006722:	e9cd 0100 	strd	r0, r1, [sp]
 8006726:	f006 060f 	and.w	r6, r6, #15
 800672a:	2503      	movs	r5, #3
 800672c:	4f1e      	ldr	r7, [pc, #120]	; (80067a8 <_dtoa_r+0x330>)
 800672e:	e04c      	b.n	80067ca <_dtoa_r+0x352>
 8006730:	2301      	movs	r3, #1
 8006732:	930a      	str	r3, [sp, #40]	; 0x28
 8006734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006736:	4453      	add	r3, sl
 8006738:	f103 0901 	add.w	r9, r3, #1
 800673c:	9302      	str	r3, [sp, #8]
 800673e:	464b      	mov	r3, r9
 8006740:	2b01      	cmp	r3, #1
 8006742:	bfb8      	it	lt
 8006744:	2301      	movlt	r3, #1
 8006746:	e7ba      	b.n	80066be <_dtoa_r+0x246>
 8006748:	2300      	movs	r3, #0
 800674a:	e7b2      	b.n	80066b2 <_dtoa_r+0x23a>
 800674c:	2300      	movs	r3, #0
 800674e:	e7f0      	b.n	8006732 <_dtoa_r+0x2ba>
 8006750:	2501      	movs	r5, #1
 8006752:	2300      	movs	r3, #0
 8006754:	9306      	str	r3, [sp, #24]
 8006756:	950a      	str	r5, [sp, #40]	; 0x28
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
 800675c:	9302      	str	r3, [sp, #8]
 800675e:	4699      	mov	r9, r3
 8006760:	2200      	movs	r2, #0
 8006762:	2312      	movs	r3, #18
 8006764:	920b      	str	r2, [sp, #44]	; 0x2c
 8006766:	e7aa      	b.n	80066be <_dtoa_r+0x246>
 8006768:	2301      	movs	r3, #1
 800676a:	930a      	str	r3, [sp, #40]	; 0x28
 800676c:	e7f4      	b.n	8006758 <_dtoa_r+0x2e0>
 800676e:	2301      	movs	r3, #1
 8006770:	9302      	str	r3, [sp, #8]
 8006772:	4699      	mov	r9, r3
 8006774:	461a      	mov	r2, r3
 8006776:	e7f5      	b.n	8006764 <_dtoa_r+0x2ec>
 8006778:	3101      	adds	r1, #1
 800677a:	6071      	str	r1, [r6, #4]
 800677c:	0052      	lsls	r2, r2, #1
 800677e:	e7a2      	b.n	80066c6 <_dtoa_r+0x24e>
 8006780:	636f4361 	.word	0x636f4361
 8006784:	3fd287a7 	.word	0x3fd287a7
 8006788:	8b60c8b3 	.word	0x8b60c8b3
 800678c:	3fc68a28 	.word	0x3fc68a28
 8006790:	509f79fb 	.word	0x509f79fb
 8006794:	3fd34413 	.word	0x3fd34413
 8006798:	7ff00000 	.word	0x7ff00000
 800679c:	08007b41 	.word	0x08007b41
 80067a0:	3ff80000 	.word	0x3ff80000
 80067a4:	08007ba0 	.word	0x08007ba0
 80067a8:	08007b78 	.word	0x08007b78
 80067ac:	08007b6d 	.word	0x08007b6d
 80067b0:	07f1      	lsls	r1, r6, #31
 80067b2:	d508      	bpl.n	80067c6 <_dtoa_r+0x34e>
 80067b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067bc:	f7f9 ff3c 	bl	8000638 <__aeabi_dmul>
 80067c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067c4:	3501      	adds	r5, #1
 80067c6:	1076      	asrs	r6, r6, #1
 80067c8:	3708      	adds	r7, #8
 80067ca:	2e00      	cmp	r6, #0
 80067cc:	d1f0      	bne.n	80067b0 <_dtoa_r+0x338>
 80067ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067d6:	f7fa f859 	bl	800088c <__aeabi_ddiv>
 80067da:	e9cd 0100 	strd	r0, r1, [sp]
 80067de:	e01a      	b.n	8006816 <_dtoa_r+0x39e>
 80067e0:	2502      	movs	r5, #2
 80067e2:	e7a3      	b.n	800672c <_dtoa_r+0x2b4>
 80067e4:	f000 80a0 	beq.w	8006928 <_dtoa_r+0x4b0>
 80067e8:	f1ca 0600 	rsb	r6, sl, #0
 80067ec:	4b9f      	ldr	r3, [pc, #636]	; (8006a6c <_dtoa_r+0x5f4>)
 80067ee:	4fa0      	ldr	r7, [pc, #640]	; (8006a70 <_dtoa_r+0x5f8>)
 80067f0:	f006 020f 	and.w	r2, r6, #15
 80067f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006800:	f7f9 ff1a 	bl	8000638 <__aeabi_dmul>
 8006804:	e9cd 0100 	strd	r0, r1, [sp]
 8006808:	1136      	asrs	r6, r6, #4
 800680a:	2300      	movs	r3, #0
 800680c:	2502      	movs	r5, #2
 800680e:	2e00      	cmp	r6, #0
 8006810:	d17f      	bne.n	8006912 <_dtoa_r+0x49a>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e1      	bne.n	80067da <_dtoa_r+0x362>
 8006816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8087 	beq.w	800692c <_dtoa_r+0x4b4>
 800681e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006822:	2200      	movs	r2, #0
 8006824:	4b93      	ldr	r3, [pc, #588]	; (8006a74 <_dtoa_r+0x5fc>)
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f977 	bl	8000b1c <__aeabi_dcmplt>
 800682e:	2800      	cmp	r0, #0
 8006830:	d07c      	beq.n	800692c <_dtoa_r+0x4b4>
 8006832:	f1b9 0f00 	cmp.w	r9, #0
 8006836:	d079      	beq.n	800692c <_dtoa_r+0x4b4>
 8006838:	9b02      	ldr	r3, [sp, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	dd35      	ble.n	80068aa <_dtoa_r+0x432>
 800683e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006842:	9308      	str	r3, [sp, #32]
 8006844:	4639      	mov	r1, r7
 8006846:	2200      	movs	r2, #0
 8006848:	4b8b      	ldr	r3, [pc, #556]	; (8006a78 <_dtoa_r+0x600>)
 800684a:	4630      	mov	r0, r6
 800684c:	f7f9 fef4 	bl	8000638 <__aeabi_dmul>
 8006850:	e9cd 0100 	strd	r0, r1, [sp]
 8006854:	9f02      	ldr	r7, [sp, #8]
 8006856:	3501      	adds	r5, #1
 8006858:	4628      	mov	r0, r5
 800685a:	f7f9 fe83 	bl	8000564 <__aeabi_i2d>
 800685e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006862:	f7f9 fee9 	bl	8000638 <__aeabi_dmul>
 8006866:	2200      	movs	r2, #0
 8006868:	4b84      	ldr	r3, [pc, #528]	; (8006a7c <_dtoa_r+0x604>)
 800686a:	f7f9 fd2f 	bl	80002cc <__adddf3>
 800686e:	4605      	mov	r5, r0
 8006870:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006874:	2f00      	cmp	r7, #0
 8006876:	d15d      	bne.n	8006934 <_dtoa_r+0x4bc>
 8006878:	2200      	movs	r2, #0
 800687a:	4b81      	ldr	r3, [pc, #516]	; (8006a80 <_dtoa_r+0x608>)
 800687c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006880:	f7f9 fd22 	bl	80002c8 <__aeabi_dsub>
 8006884:	462a      	mov	r2, r5
 8006886:	4633      	mov	r3, r6
 8006888:	e9cd 0100 	strd	r0, r1, [sp]
 800688c:	f7fa f964 	bl	8000b58 <__aeabi_dcmpgt>
 8006890:	2800      	cmp	r0, #0
 8006892:	f040 8288 	bne.w	8006da6 <_dtoa_r+0x92e>
 8006896:	462a      	mov	r2, r5
 8006898:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800689c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068a0:	f7fa f93c 	bl	8000b1c <__aeabi_dcmplt>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	f040 827c 	bne.w	8006da2 <_dtoa_r+0x92a>
 80068aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068ae:	e9cd 2300 	strd	r2, r3, [sp]
 80068b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f2c0 8150 	blt.w	8006b5a <_dtoa_r+0x6e2>
 80068ba:	f1ba 0f0e 	cmp.w	sl, #14
 80068be:	f300 814c 	bgt.w	8006b5a <_dtoa_r+0x6e2>
 80068c2:	4b6a      	ldr	r3, [pc, #424]	; (8006a6c <_dtoa_r+0x5f4>)
 80068c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068c8:	ed93 7b00 	vldr	d7, [r3]
 80068cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068d4:	f280 80d8 	bge.w	8006a88 <_dtoa_r+0x610>
 80068d8:	f1b9 0f00 	cmp.w	r9, #0
 80068dc:	f300 80d4 	bgt.w	8006a88 <_dtoa_r+0x610>
 80068e0:	f040 825e 	bne.w	8006da0 <_dtoa_r+0x928>
 80068e4:	2200      	movs	r2, #0
 80068e6:	4b66      	ldr	r3, [pc, #408]	; (8006a80 <_dtoa_r+0x608>)
 80068e8:	ec51 0b17 	vmov	r0, r1, d7
 80068ec:	f7f9 fea4 	bl	8000638 <__aeabi_dmul>
 80068f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068f4:	f7fa f926 	bl	8000b44 <__aeabi_dcmpge>
 80068f8:	464f      	mov	r7, r9
 80068fa:	464e      	mov	r6, r9
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f040 8234 	bne.w	8006d6a <_dtoa_r+0x8f2>
 8006902:	2331      	movs	r3, #49	; 0x31
 8006904:	f10b 0501 	add.w	r5, fp, #1
 8006908:	f88b 3000 	strb.w	r3, [fp]
 800690c:	f10a 0a01 	add.w	sl, sl, #1
 8006910:	e22f      	b.n	8006d72 <_dtoa_r+0x8fa>
 8006912:	07f2      	lsls	r2, r6, #31
 8006914:	d505      	bpl.n	8006922 <_dtoa_r+0x4aa>
 8006916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691a:	f7f9 fe8d 	bl	8000638 <__aeabi_dmul>
 800691e:	3501      	adds	r5, #1
 8006920:	2301      	movs	r3, #1
 8006922:	1076      	asrs	r6, r6, #1
 8006924:	3708      	adds	r7, #8
 8006926:	e772      	b.n	800680e <_dtoa_r+0x396>
 8006928:	2502      	movs	r5, #2
 800692a:	e774      	b.n	8006816 <_dtoa_r+0x39e>
 800692c:	f8cd a020 	str.w	sl, [sp, #32]
 8006930:	464f      	mov	r7, r9
 8006932:	e791      	b.n	8006858 <_dtoa_r+0x3e0>
 8006934:	4b4d      	ldr	r3, [pc, #308]	; (8006a6c <_dtoa_r+0x5f4>)
 8006936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800693a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800693e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006940:	2b00      	cmp	r3, #0
 8006942:	d047      	beq.n	80069d4 <_dtoa_r+0x55c>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	2000      	movs	r0, #0
 800694a:	494e      	ldr	r1, [pc, #312]	; (8006a84 <_dtoa_r+0x60c>)
 800694c:	f7f9 ff9e 	bl	800088c <__aeabi_ddiv>
 8006950:	462a      	mov	r2, r5
 8006952:	4633      	mov	r3, r6
 8006954:	f7f9 fcb8 	bl	80002c8 <__aeabi_dsub>
 8006958:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800695c:	465d      	mov	r5, fp
 800695e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006962:	f7fa f919 	bl	8000b98 <__aeabi_d2iz>
 8006966:	4606      	mov	r6, r0
 8006968:	f7f9 fdfc 	bl	8000564 <__aeabi_i2d>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006974:	f7f9 fca8 	bl	80002c8 <__aeabi_dsub>
 8006978:	3630      	adds	r6, #48	; 0x30
 800697a:	f805 6b01 	strb.w	r6, [r5], #1
 800697e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006982:	e9cd 0100 	strd	r0, r1, [sp]
 8006986:	f7fa f8c9 	bl	8000b1c <__aeabi_dcmplt>
 800698a:	2800      	cmp	r0, #0
 800698c:	d163      	bne.n	8006a56 <_dtoa_r+0x5de>
 800698e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006992:	2000      	movs	r0, #0
 8006994:	4937      	ldr	r1, [pc, #220]	; (8006a74 <_dtoa_r+0x5fc>)
 8006996:	f7f9 fc97 	bl	80002c8 <__aeabi_dsub>
 800699a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800699e:	f7fa f8bd 	bl	8000b1c <__aeabi_dcmplt>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f040 80b7 	bne.w	8006b16 <_dtoa_r+0x69e>
 80069a8:	eba5 030b 	sub.w	r3, r5, fp
 80069ac:	429f      	cmp	r7, r3
 80069ae:	f77f af7c 	ble.w	80068aa <_dtoa_r+0x432>
 80069b2:	2200      	movs	r2, #0
 80069b4:	4b30      	ldr	r3, [pc, #192]	; (8006a78 <_dtoa_r+0x600>)
 80069b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069ba:	f7f9 fe3d 	bl	8000638 <__aeabi_dmul>
 80069be:	2200      	movs	r2, #0
 80069c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80069c4:	4b2c      	ldr	r3, [pc, #176]	; (8006a78 <_dtoa_r+0x600>)
 80069c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069ca:	f7f9 fe35 	bl	8000638 <__aeabi_dmul>
 80069ce:	e9cd 0100 	strd	r0, r1, [sp]
 80069d2:	e7c4      	b.n	800695e <_dtoa_r+0x4e6>
 80069d4:	462a      	mov	r2, r5
 80069d6:	4633      	mov	r3, r6
 80069d8:	f7f9 fe2e 	bl	8000638 <__aeabi_dmul>
 80069dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80069e0:	eb0b 0507 	add.w	r5, fp, r7
 80069e4:	465e      	mov	r6, fp
 80069e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069ea:	f7fa f8d5 	bl	8000b98 <__aeabi_d2iz>
 80069ee:	4607      	mov	r7, r0
 80069f0:	f7f9 fdb8 	bl	8000564 <__aeabi_i2d>
 80069f4:	3730      	adds	r7, #48	; 0x30
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069fe:	f7f9 fc63 	bl	80002c8 <__aeabi_dsub>
 8006a02:	f806 7b01 	strb.w	r7, [r6], #1
 8006a06:	42ae      	cmp	r6, r5
 8006a08:	e9cd 0100 	strd	r0, r1, [sp]
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	d126      	bne.n	8006a60 <_dtoa_r+0x5e8>
 8006a12:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <_dtoa_r+0x60c>)
 8006a14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a18:	f7f9 fc58 	bl	80002cc <__adddf3>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a24:	f7fa f898 	bl	8000b58 <__aeabi_dcmpgt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d174      	bne.n	8006b16 <_dtoa_r+0x69e>
 8006a2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a30:	2000      	movs	r0, #0
 8006a32:	4914      	ldr	r1, [pc, #80]	; (8006a84 <_dtoa_r+0x60c>)
 8006a34:	f7f9 fc48 	bl	80002c8 <__aeabi_dsub>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a40:	f7fa f86c 	bl	8000b1c <__aeabi_dcmplt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	f43f af30 	beq.w	80068aa <_dtoa_r+0x432>
 8006a4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a4e:	2b30      	cmp	r3, #48	; 0x30
 8006a50:	f105 32ff 	add.w	r2, r5, #4294967295
 8006a54:	d002      	beq.n	8006a5c <_dtoa_r+0x5e4>
 8006a56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a5a:	e04a      	b.n	8006af2 <_dtoa_r+0x67a>
 8006a5c:	4615      	mov	r5, r2
 8006a5e:	e7f4      	b.n	8006a4a <_dtoa_r+0x5d2>
 8006a60:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <_dtoa_r+0x600>)
 8006a62:	f7f9 fde9 	bl	8000638 <__aeabi_dmul>
 8006a66:	e9cd 0100 	strd	r0, r1, [sp]
 8006a6a:	e7bc      	b.n	80069e6 <_dtoa_r+0x56e>
 8006a6c:	08007ba0 	.word	0x08007ba0
 8006a70:	08007b78 	.word	0x08007b78
 8006a74:	3ff00000 	.word	0x3ff00000
 8006a78:	40240000 	.word	0x40240000
 8006a7c:	401c0000 	.word	0x401c0000
 8006a80:	40140000 	.word	0x40140000
 8006a84:	3fe00000 	.word	0x3fe00000
 8006a88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a8c:	465d      	mov	r5, fp
 8006a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a92:	4630      	mov	r0, r6
 8006a94:	4639      	mov	r1, r7
 8006a96:	f7f9 fef9 	bl	800088c <__aeabi_ddiv>
 8006a9a:	f7fa f87d 	bl	8000b98 <__aeabi_d2iz>
 8006a9e:	4680      	mov	r8, r0
 8006aa0:	f7f9 fd60 	bl	8000564 <__aeabi_i2d>
 8006aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aa8:	f7f9 fdc6 	bl	8000638 <__aeabi_dmul>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006ab8:	f7f9 fc06 	bl	80002c8 <__aeabi_dsub>
 8006abc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ac0:	eba5 060b 	sub.w	r6, r5, fp
 8006ac4:	45b1      	cmp	r9, r6
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	d139      	bne.n	8006b40 <_dtoa_r+0x6c8>
 8006acc:	f7f9 fbfe 	bl	80002cc <__adddf3>
 8006ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	f7fa f83e 	bl	8000b58 <__aeabi_dcmpgt>
 8006adc:	b9c8      	cbnz	r0, 8006b12 <_dtoa_r+0x69a>
 8006ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	f7fa f80f 	bl	8000b08 <__aeabi_dcmpeq>
 8006aea:	b110      	cbz	r0, 8006af2 <_dtoa_r+0x67a>
 8006aec:	f018 0f01 	tst.w	r8, #1
 8006af0:	d10f      	bne.n	8006b12 <_dtoa_r+0x69a>
 8006af2:	9904      	ldr	r1, [sp, #16]
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 facc 	bl	8007092 <_Bfree>
 8006afa:	2300      	movs	r3, #0
 8006afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006afe:	702b      	strb	r3, [r5, #0]
 8006b00:	f10a 0301 	add.w	r3, sl, #1
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8241 	beq.w	8006f90 <_dtoa_r+0xb18>
 8006b0e:	601d      	str	r5, [r3, #0]
 8006b10:	e23e      	b.n	8006f90 <_dtoa_r+0xb18>
 8006b12:	f8cd a020 	str.w	sl, [sp, #32]
 8006b16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b1a:	2a39      	cmp	r2, #57	; 0x39
 8006b1c:	f105 33ff 	add.w	r3, r5, #4294967295
 8006b20:	d108      	bne.n	8006b34 <_dtoa_r+0x6bc>
 8006b22:	459b      	cmp	fp, r3
 8006b24:	d10a      	bne.n	8006b3c <_dtoa_r+0x6c4>
 8006b26:	9b08      	ldr	r3, [sp, #32]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	9308      	str	r3, [sp, #32]
 8006b2c:	2330      	movs	r3, #48	; 0x30
 8006b2e:	f88b 3000 	strb.w	r3, [fp]
 8006b32:	465b      	mov	r3, fp
 8006b34:	781a      	ldrb	r2, [r3, #0]
 8006b36:	3201      	adds	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	e78c      	b.n	8006a56 <_dtoa_r+0x5de>
 8006b3c:	461d      	mov	r5, r3
 8006b3e:	e7ea      	b.n	8006b16 <_dtoa_r+0x69e>
 8006b40:	2200      	movs	r2, #0
 8006b42:	4b9b      	ldr	r3, [pc, #620]	; (8006db0 <_dtoa_r+0x938>)
 8006b44:	f7f9 fd78 	bl	8000638 <__aeabi_dmul>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	460f      	mov	r7, r1
 8006b50:	f7f9 ffda 	bl	8000b08 <__aeabi_dcmpeq>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d09a      	beq.n	8006a8e <_dtoa_r+0x616>
 8006b58:	e7cb      	b.n	8006af2 <_dtoa_r+0x67a>
 8006b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	f000 808b 	beq.w	8006c78 <_dtoa_r+0x800>
 8006b62:	9a06      	ldr	r2, [sp, #24]
 8006b64:	2a01      	cmp	r2, #1
 8006b66:	dc6e      	bgt.n	8006c46 <_dtoa_r+0x7ce>
 8006b68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	d067      	beq.n	8006c3e <_dtoa_r+0x7c6>
 8006b6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b72:	9f07      	ldr	r7, [sp, #28]
 8006b74:	9d05      	ldr	r5, [sp, #20]
 8006b76:	9a05      	ldr	r2, [sp, #20]
 8006b78:	2101      	movs	r1, #1
 8006b7a:	441a      	add	r2, r3
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	9205      	str	r2, [sp, #20]
 8006b80:	4498      	add	r8, r3
 8006b82:	f000 fb26 	bl	80071d2 <__i2b>
 8006b86:	4606      	mov	r6, r0
 8006b88:	2d00      	cmp	r5, #0
 8006b8a:	dd0c      	ble.n	8006ba6 <_dtoa_r+0x72e>
 8006b8c:	f1b8 0f00 	cmp.w	r8, #0
 8006b90:	dd09      	ble.n	8006ba6 <_dtoa_r+0x72e>
 8006b92:	4545      	cmp	r5, r8
 8006b94:	9a05      	ldr	r2, [sp, #20]
 8006b96:	462b      	mov	r3, r5
 8006b98:	bfa8      	it	ge
 8006b9a:	4643      	movge	r3, r8
 8006b9c:	1ad2      	subs	r2, r2, r3
 8006b9e:	9205      	str	r2, [sp, #20]
 8006ba0:	1aed      	subs	r5, r5, r3
 8006ba2:	eba8 0803 	sub.w	r8, r8, r3
 8006ba6:	9b07      	ldr	r3, [sp, #28]
 8006ba8:	b1eb      	cbz	r3, 8006be6 <_dtoa_r+0x76e>
 8006baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d067      	beq.n	8006c80 <_dtoa_r+0x808>
 8006bb0:	b18f      	cbz	r7, 8006bd6 <_dtoa_r+0x75e>
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	463a      	mov	r2, r7
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 fbaa 	bl	8007310 <__pow5mult>
 8006bbc:	9a04      	ldr	r2, [sp, #16]
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f000 fb0e 	bl	80071e4 <__multiply>
 8006bc8:	9904      	ldr	r1, [sp, #16]
 8006bca:	9008      	str	r0, [sp, #32]
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fa60 	bl	8007092 <_Bfree>
 8006bd2:	9b08      	ldr	r3, [sp, #32]
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	9b07      	ldr	r3, [sp, #28]
 8006bd8:	1bda      	subs	r2, r3, r7
 8006bda:	d004      	beq.n	8006be6 <_dtoa_r+0x76e>
 8006bdc:	9904      	ldr	r1, [sp, #16]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 fb96 	bl	8007310 <__pow5mult>
 8006be4:	9004      	str	r0, [sp, #16]
 8006be6:	2101      	movs	r1, #1
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 faf2 	bl	80071d2 <__i2b>
 8006bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bf0:	4607      	mov	r7, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 81d0 	beq.w	8006f98 <_dtoa_r+0xb20>
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4601      	mov	r1, r0
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fb87 	bl	8007310 <__pow5mult>
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	4607      	mov	r7, r0
 8006c08:	dc40      	bgt.n	8006c8c <_dtoa_r+0x814>
 8006c0a:	9b00      	ldr	r3, [sp, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d139      	bne.n	8006c84 <_dtoa_r+0x80c>
 8006c10:	9b01      	ldr	r3, [sp, #4]
 8006c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d136      	bne.n	8006c88 <_dtoa_r+0x810>
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c20:	0d1b      	lsrs	r3, r3, #20
 8006c22:	051b      	lsls	r3, r3, #20
 8006c24:	b12b      	cbz	r3, 8006c32 <_dtoa_r+0x7ba>
 8006c26:	9b05      	ldr	r3, [sp, #20]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	9305      	str	r3, [sp, #20]
 8006c2c:	f108 0801 	add.w	r8, r8, #1
 8006c30:	2301      	movs	r3, #1
 8006c32:	9307      	str	r3, [sp, #28]
 8006c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d12a      	bne.n	8006c90 <_dtoa_r+0x818>
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	e030      	b.n	8006ca0 <_dtoa_r+0x828>
 8006c3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c44:	e795      	b.n	8006b72 <_dtoa_r+0x6fa>
 8006c46:	9b07      	ldr	r3, [sp, #28]
 8006c48:	f109 37ff 	add.w	r7, r9, #4294967295
 8006c4c:	42bb      	cmp	r3, r7
 8006c4e:	bfbf      	itttt	lt
 8006c50:	9b07      	ldrlt	r3, [sp, #28]
 8006c52:	9707      	strlt	r7, [sp, #28]
 8006c54:	1afa      	sublt	r2, r7, r3
 8006c56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006c58:	bfbb      	ittet	lt
 8006c5a:	189b      	addlt	r3, r3, r2
 8006c5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006c5e:	1bdf      	subge	r7, r3, r7
 8006c60:	2700      	movlt	r7, #0
 8006c62:	f1b9 0f00 	cmp.w	r9, #0
 8006c66:	bfb5      	itete	lt
 8006c68:	9b05      	ldrlt	r3, [sp, #20]
 8006c6a:	9d05      	ldrge	r5, [sp, #20]
 8006c6c:	eba3 0509 	sublt.w	r5, r3, r9
 8006c70:	464b      	movge	r3, r9
 8006c72:	bfb8      	it	lt
 8006c74:	2300      	movlt	r3, #0
 8006c76:	e77e      	b.n	8006b76 <_dtoa_r+0x6fe>
 8006c78:	9f07      	ldr	r7, [sp, #28]
 8006c7a:	9d05      	ldr	r5, [sp, #20]
 8006c7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006c7e:	e783      	b.n	8006b88 <_dtoa_r+0x710>
 8006c80:	9a07      	ldr	r2, [sp, #28]
 8006c82:	e7ab      	b.n	8006bdc <_dtoa_r+0x764>
 8006c84:	2300      	movs	r3, #0
 8006c86:	e7d4      	b.n	8006c32 <_dtoa_r+0x7ba>
 8006c88:	9b00      	ldr	r3, [sp, #0]
 8006c8a:	e7d2      	b.n	8006c32 <_dtoa_r+0x7ba>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9307      	str	r3, [sp, #28]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006c96:	6918      	ldr	r0, [r3, #16]
 8006c98:	f000 fa4d 	bl	8007136 <__hi0bits>
 8006c9c:	f1c0 0020 	rsb	r0, r0, #32
 8006ca0:	4440      	add	r0, r8
 8006ca2:	f010 001f 	ands.w	r0, r0, #31
 8006ca6:	d047      	beq.n	8006d38 <_dtoa_r+0x8c0>
 8006ca8:	f1c0 0320 	rsb	r3, r0, #32
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	dd3b      	ble.n	8006d28 <_dtoa_r+0x8b0>
 8006cb0:	9b05      	ldr	r3, [sp, #20]
 8006cb2:	f1c0 001c 	rsb	r0, r0, #28
 8006cb6:	4403      	add	r3, r0
 8006cb8:	9305      	str	r3, [sp, #20]
 8006cba:	4405      	add	r5, r0
 8006cbc:	4480      	add	r8, r0
 8006cbe:	9b05      	ldr	r3, [sp, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dd05      	ble.n	8006cd0 <_dtoa_r+0x858>
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	9904      	ldr	r1, [sp, #16]
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 fb6f 	bl	80073ac <__lshift>
 8006cce:	9004      	str	r0, [sp, #16]
 8006cd0:	f1b8 0f00 	cmp.w	r8, #0
 8006cd4:	dd05      	ble.n	8006ce2 <_dtoa_r+0x86a>
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	4642      	mov	r2, r8
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 fb66 	bl	80073ac <__lshift>
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ce4:	b353      	cbz	r3, 8006d3c <_dtoa_r+0x8c4>
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	9804      	ldr	r0, [sp, #16]
 8006cea:	f000 fbb3 	bl	8007454 <__mcmp>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	da24      	bge.n	8006d3c <_dtoa_r+0x8c4>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	220a      	movs	r2, #10
 8006cf6:	9904      	ldr	r1, [sp, #16]
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 f9e1 	bl	80070c0 <__multadd>
 8006cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d00:	9004      	str	r0, [sp, #16]
 8006d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 814d 	beq.w	8006fa6 <_dtoa_r+0xb2e>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4631      	mov	r1, r6
 8006d10:	220a      	movs	r2, #10
 8006d12:	4620      	mov	r0, r4
 8006d14:	f000 f9d4 	bl	80070c0 <__multadd>
 8006d18:	9b02      	ldr	r3, [sp, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	dc4f      	bgt.n	8006dc0 <_dtoa_r+0x948>
 8006d20:	9b06      	ldr	r3, [sp, #24]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	dd4c      	ble.n	8006dc0 <_dtoa_r+0x948>
 8006d26:	e011      	b.n	8006d4c <_dtoa_r+0x8d4>
 8006d28:	d0c9      	beq.n	8006cbe <_dtoa_r+0x846>
 8006d2a:	9a05      	ldr	r2, [sp, #20]
 8006d2c:	331c      	adds	r3, #28
 8006d2e:	441a      	add	r2, r3
 8006d30:	9205      	str	r2, [sp, #20]
 8006d32:	441d      	add	r5, r3
 8006d34:	4498      	add	r8, r3
 8006d36:	e7c2      	b.n	8006cbe <_dtoa_r+0x846>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	e7f6      	b.n	8006d2a <_dtoa_r+0x8b2>
 8006d3c:	f1b9 0f00 	cmp.w	r9, #0
 8006d40:	dc38      	bgt.n	8006db4 <_dtoa_r+0x93c>
 8006d42:	9b06      	ldr	r3, [sp, #24]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	dd35      	ble.n	8006db4 <_dtoa_r+0x93c>
 8006d48:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d4c:	9b02      	ldr	r3, [sp, #8]
 8006d4e:	b963      	cbnz	r3, 8006d6a <_dtoa_r+0x8f2>
 8006d50:	4639      	mov	r1, r7
 8006d52:	2205      	movs	r2, #5
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 f9b3 	bl	80070c0 <__multadd>
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	9804      	ldr	r0, [sp, #16]
 8006d60:	f000 fb78 	bl	8007454 <__mcmp>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	f73f adcc 	bgt.w	8006902 <_dtoa_r+0x48a>
 8006d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d6c:	465d      	mov	r5, fp
 8006d6e:	ea6f 0a03 	mvn.w	sl, r3
 8006d72:	f04f 0900 	mov.w	r9, #0
 8006d76:	4639      	mov	r1, r7
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 f98a 	bl	8007092 <_Bfree>
 8006d7e:	2e00      	cmp	r6, #0
 8006d80:	f43f aeb7 	beq.w	8006af2 <_dtoa_r+0x67a>
 8006d84:	f1b9 0f00 	cmp.w	r9, #0
 8006d88:	d005      	beq.n	8006d96 <_dtoa_r+0x91e>
 8006d8a:	45b1      	cmp	r9, r6
 8006d8c:	d003      	beq.n	8006d96 <_dtoa_r+0x91e>
 8006d8e:	4649      	mov	r1, r9
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 f97e 	bl	8007092 <_Bfree>
 8006d96:	4631      	mov	r1, r6
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 f97a 	bl	8007092 <_Bfree>
 8006d9e:	e6a8      	b.n	8006af2 <_dtoa_r+0x67a>
 8006da0:	2700      	movs	r7, #0
 8006da2:	463e      	mov	r6, r7
 8006da4:	e7e1      	b.n	8006d6a <_dtoa_r+0x8f2>
 8006da6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006daa:	463e      	mov	r6, r7
 8006dac:	e5a9      	b.n	8006902 <_dtoa_r+0x48a>
 8006dae:	bf00      	nop
 8006db0:	40240000 	.word	0x40240000
 8006db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80fa 	beq.w	8006fb4 <_dtoa_r+0xb3c>
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	dd05      	ble.n	8006dd0 <_dtoa_r+0x958>
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 faef 	bl	80073ac <__lshift>
 8006dce:	4606      	mov	r6, r0
 8006dd0:	9b07      	ldr	r3, [sp, #28]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d04c      	beq.n	8006e70 <_dtoa_r+0x9f8>
 8006dd6:	6871      	ldr	r1, [r6, #4]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 f926 	bl	800702a <_Balloc>
 8006dde:	6932      	ldr	r2, [r6, #16]
 8006de0:	3202      	adds	r2, #2
 8006de2:	4605      	mov	r5, r0
 8006de4:	0092      	lsls	r2, r2, #2
 8006de6:	f106 010c 	add.w	r1, r6, #12
 8006dea:	300c      	adds	r0, #12
 8006dec:	f000 f912 	bl	8007014 <memcpy>
 8006df0:	2201      	movs	r2, #1
 8006df2:	4629      	mov	r1, r5
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fad9 	bl	80073ac <__lshift>
 8006dfa:	9b00      	ldr	r3, [sp, #0]
 8006dfc:	f8cd b014 	str.w	fp, [sp, #20]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	46b1      	mov	r9, r6
 8006e06:	9307      	str	r3, [sp, #28]
 8006e08:	4606      	mov	r6, r0
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	9804      	ldr	r0, [sp, #16]
 8006e0e:	f7ff faa5 	bl	800635c <quorem>
 8006e12:	4649      	mov	r1, r9
 8006e14:	4605      	mov	r5, r0
 8006e16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e1a:	9804      	ldr	r0, [sp, #16]
 8006e1c:	f000 fb1a 	bl	8007454 <__mcmp>
 8006e20:	4632      	mov	r2, r6
 8006e22:	9000      	str	r0, [sp, #0]
 8006e24:	4639      	mov	r1, r7
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fb2e 	bl	8007488 <__mdiff>
 8006e2c:	68c3      	ldr	r3, [r0, #12]
 8006e2e:	4602      	mov	r2, r0
 8006e30:	bb03      	cbnz	r3, 8006e74 <_dtoa_r+0x9fc>
 8006e32:	4601      	mov	r1, r0
 8006e34:	9008      	str	r0, [sp, #32]
 8006e36:	9804      	ldr	r0, [sp, #16]
 8006e38:	f000 fb0c 	bl	8007454 <__mcmp>
 8006e3c:	9a08      	ldr	r2, [sp, #32]
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4611      	mov	r1, r2
 8006e42:	4620      	mov	r0, r4
 8006e44:	9308      	str	r3, [sp, #32]
 8006e46:	f000 f924 	bl	8007092 <_Bfree>
 8006e4a:	9b08      	ldr	r3, [sp, #32]
 8006e4c:	b9a3      	cbnz	r3, 8006e78 <_dtoa_r+0xa00>
 8006e4e:	9a06      	ldr	r2, [sp, #24]
 8006e50:	b992      	cbnz	r2, 8006e78 <_dtoa_r+0xa00>
 8006e52:	9a07      	ldr	r2, [sp, #28]
 8006e54:	b982      	cbnz	r2, 8006e78 <_dtoa_r+0xa00>
 8006e56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e5a:	d029      	beq.n	8006eb0 <_dtoa_r+0xa38>
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	dd01      	ble.n	8006e66 <_dtoa_r+0x9ee>
 8006e62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006e66:	9b05      	ldr	r3, [sp, #20]
 8006e68:	1c5d      	adds	r5, r3, #1
 8006e6a:	f883 8000 	strb.w	r8, [r3]
 8006e6e:	e782      	b.n	8006d76 <_dtoa_r+0x8fe>
 8006e70:	4630      	mov	r0, r6
 8006e72:	e7c2      	b.n	8006dfa <_dtoa_r+0x982>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e7e3      	b.n	8006e40 <_dtoa_r+0x9c8>
 8006e78:	9a00      	ldr	r2, [sp, #0]
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	db04      	blt.n	8006e88 <_dtoa_r+0xa10>
 8006e7e:	d125      	bne.n	8006ecc <_dtoa_r+0xa54>
 8006e80:	9a06      	ldr	r2, [sp, #24]
 8006e82:	bb1a      	cbnz	r2, 8006ecc <_dtoa_r+0xa54>
 8006e84:	9a07      	ldr	r2, [sp, #28]
 8006e86:	bb0a      	cbnz	r2, 8006ecc <_dtoa_r+0xa54>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	ddec      	ble.n	8006e66 <_dtoa_r+0x9ee>
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	9904      	ldr	r1, [sp, #16]
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fa8b 	bl	80073ac <__lshift>
 8006e96:	4639      	mov	r1, r7
 8006e98:	9004      	str	r0, [sp, #16]
 8006e9a:	f000 fadb 	bl	8007454 <__mcmp>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	dc03      	bgt.n	8006eaa <_dtoa_r+0xa32>
 8006ea2:	d1e0      	bne.n	8006e66 <_dtoa_r+0x9ee>
 8006ea4:	f018 0f01 	tst.w	r8, #1
 8006ea8:	d0dd      	beq.n	8006e66 <_dtoa_r+0x9ee>
 8006eaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006eae:	d1d8      	bne.n	8006e62 <_dtoa_r+0x9ea>
 8006eb0:	9b05      	ldr	r3, [sp, #20]
 8006eb2:	9a05      	ldr	r2, [sp, #20]
 8006eb4:	1c5d      	adds	r5, r3, #1
 8006eb6:	2339      	movs	r3, #57	; 0x39
 8006eb8:	7013      	strb	r3, [r2, #0]
 8006eba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ebe:	2b39      	cmp	r3, #57	; 0x39
 8006ec0:	f105 32ff 	add.w	r2, r5, #4294967295
 8006ec4:	d04f      	beq.n	8006f66 <_dtoa_r+0xaee>
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	7013      	strb	r3, [r2, #0]
 8006eca:	e754      	b.n	8006d76 <_dtoa_r+0x8fe>
 8006ecc:	9a05      	ldr	r2, [sp, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f102 0501 	add.w	r5, r2, #1
 8006ed4:	dd06      	ble.n	8006ee4 <_dtoa_r+0xa6c>
 8006ed6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006eda:	d0e9      	beq.n	8006eb0 <_dtoa_r+0xa38>
 8006edc:	f108 0801 	add.w	r8, r8, #1
 8006ee0:	9b05      	ldr	r3, [sp, #20]
 8006ee2:	e7c2      	b.n	8006e6a <_dtoa_r+0x9f2>
 8006ee4:	9a02      	ldr	r2, [sp, #8]
 8006ee6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006eea:	eba5 030b 	sub.w	r3, r5, fp
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d021      	beq.n	8006f36 <_dtoa_r+0xabe>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	220a      	movs	r2, #10
 8006ef6:	9904      	ldr	r1, [sp, #16]
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 f8e1 	bl	80070c0 <__multadd>
 8006efe:	45b1      	cmp	r9, r6
 8006f00:	9004      	str	r0, [sp, #16]
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	f04f 020a 	mov.w	r2, #10
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	d105      	bne.n	8006f1c <_dtoa_r+0xaa4>
 8006f10:	f000 f8d6 	bl	80070c0 <__multadd>
 8006f14:	4681      	mov	r9, r0
 8006f16:	4606      	mov	r6, r0
 8006f18:	9505      	str	r5, [sp, #20]
 8006f1a:	e776      	b.n	8006e0a <_dtoa_r+0x992>
 8006f1c:	f000 f8d0 	bl	80070c0 <__multadd>
 8006f20:	4631      	mov	r1, r6
 8006f22:	4681      	mov	r9, r0
 8006f24:	2300      	movs	r3, #0
 8006f26:	220a      	movs	r2, #10
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 f8c9 	bl	80070c0 <__multadd>
 8006f2e:	4606      	mov	r6, r0
 8006f30:	e7f2      	b.n	8006f18 <_dtoa_r+0xaa0>
 8006f32:	f04f 0900 	mov.w	r9, #0
 8006f36:	2201      	movs	r2, #1
 8006f38:	9904      	ldr	r1, [sp, #16]
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 fa36 	bl	80073ac <__lshift>
 8006f40:	4639      	mov	r1, r7
 8006f42:	9004      	str	r0, [sp, #16]
 8006f44:	f000 fa86 	bl	8007454 <__mcmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	dcb6      	bgt.n	8006eba <_dtoa_r+0xa42>
 8006f4c:	d102      	bne.n	8006f54 <_dtoa_r+0xadc>
 8006f4e:	f018 0f01 	tst.w	r8, #1
 8006f52:	d1b2      	bne.n	8006eba <_dtoa_r+0xa42>
 8006f54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f58:	2b30      	cmp	r3, #48	; 0x30
 8006f5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006f5e:	f47f af0a 	bne.w	8006d76 <_dtoa_r+0x8fe>
 8006f62:	4615      	mov	r5, r2
 8006f64:	e7f6      	b.n	8006f54 <_dtoa_r+0xadc>
 8006f66:	4593      	cmp	fp, r2
 8006f68:	d105      	bne.n	8006f76 <_dtoa_r+0xafe>
 8006f6a:	2331      	movs	r3, #49	; 0x31
 8006f6c:	f10a 0a01 	add.w	sl, sl, #1
 8006f70:	f88b 3000 	strb.w	r3, [fp]
 8006f74:	e6ff      	b.n	8006d76 <_dtoa_r+0x8fe>
 8006f76:	4615      	mov	r5, r2
 8006f78:	e79f      	b.n	8006eba <_dtoa_r+0xa42>
 8006f7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006fe0 <_dtoa_r+0xb68>
 8006f7e:	e007      	b.n	8006f90 <_dtoa_r+0xb18>
 8006f80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006fe4 <_dtoa_r+0xb6c>
 8006f86:	b11b      	cbz	r3, 8006f90 <_dtoa_r+0xb18>
 8006f88:	f10b 0308 	add.w	r3, fp, #8
 8006f8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	4658      	mov	r0, fp
 8006f92:	b017      	add	sp, #92	; 0x5c
 8006f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	f77f ae35 	ble.w	8006c0a <_dtoa_r+0x792>
 8006fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fa2:	9307      	str	r3, [sp, #28]
 8006fa4:	e649      	b.n	8006c3a <_dtoa_r+0x7c2>
 8006fa6:	9b02      	ldr	r3, [sp, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dc03      	bgt.n	8006fb4 <_dtoa_r+0xb3c>
 8006fac:	9b06      	ldr	r3, [sp, #24]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	f73f aecc 	bgt.w	8006d4c <_dtoa_r+0x8d4>
 8006fb4:	465d      	mov	r5, fp
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	9804      	ldr	r0, [sp, #16]
 8006fba:	f7ff f9cf 	bl	800635c <quorem>
 8006fbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006fc2:	f805 8b01 	strb.w	r8, [r5], #1
 8006fc6:	9a02      	ldr	r2, [sp, #8]
 8006fc8:	eba5 030b 	sub.w	r3, r5, fp
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	ddb0      	ble.n	8006f32 <_dtoa_r+0xaba>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	220a      	movs	r2, #10
 8006fd4:	9904      	ldr	r1, [sp, #16]
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 f872 	bl	80070c0 <__multadd>
 8006fdc:	9004      	str	r0, [sp, #16]
 8006fde:	e7ea      	b.n	8006fb6 <_dtoa_r+0xb3e>
 8006fe0:	08007b40 	.word	0x08007b40
 8006fe4:	08007b64 	.word	0x08007b64

08006fe8 <_localeconv_r>:
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <_localeconv_r+0x14>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6a18      	ldr	r0, [r3, #32]
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <_localeconv_r+0x18>)
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	bf08      	it	eq
 8006ff4:	4618      	moveq	r0, r3
 8006ff6:	30f0      	adds	r0, #240	; 0xf0
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	2000000c 	.word	0x2000000c
 8007000:	20000070 	.word	0x20000070

08007004 <malloc>:
 8007004:	4b02      	ldr	r3, [pc, #8]	; (8007010 <malloc+0xc>)
 8007006:	4601      	mov	r1, r0
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	f000 bb45 	b.w	8007698 <_malloc_r>
 800700e:	bf00      	nop
 8007010:	2000000c 	.word	0x2000000c

08007014 <memcpy>:
 8007014:	b510      	push	{r4, lr}
 8007016:	1e43      	subs	r3, r0, #1
 8007018:	440a      	add	r2, r1
 800701a:	4291      	cmp	r1, r2
 800701c:	d100      	bne.n	8007020 <memcpy+0xc>
 800701e:	bd10      	pop	{r4, pc}
 8007020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007028:	e7f7      	b.n	800701a <memcpy+0x6>

0800702a <_Balloc>:
 800702a:	b570      	push	{r4, r5, r6, lr}
 800702c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800702e:	4604      	mov	r4, r0
 8007030:	460e      	mov	r6, r1
 8007032:	b93d      	cbnz	r5, 8007044 <_Balloc+0x1a>
 8007034:	2010      	movs	r0, #16
 8007036:	f7ff ffe5 	bl	8007004 <malloc>
 800703a:	6260      	str	r0, [r4, #36]	; 0x24
 800703c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007040:	6005      	str	r5, [r0, #0]
 8007042:	60c5      	str	r5, [r0, #12]
 8007044:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007046:	68eb      	ldr	r3, [r5, #12]
 8007048:	b183      	cbz	r3, 800706c <_Balloc+0x42>
 800704a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007052:	b9b8      	cbnz	r0, 8007084 <_Balloc+0x5a>
 8007054:	2101      	movs	r1, #1
 8007056:	fa01 f506 	lsl.w	r5, r1, r6
 800705a:	1d6a      	adds	r2, r5, #5
 800705c:	0092      	lsls	r2, r2, #2
 800705e:	4620      	mov	r0, r4
 8007060:	f000 fabe 	bl	80075e0 <_calloc_r>
 8007064:	b160      	cbz	r0, 8007080 <_Balloc+0x56>
 8007066:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800706a:	e00e      	b.n	800708a <_Balloc+0x60>
 800706c:	2221      	movs	r2, #33	; 0x21
 800706e:	2104      	movs	r1, #4
 8007070:	4620      	mov	r0, r4
 8007072:	f000 fab5 	bl	80075e0 <_calloc_r>
 8007076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007078:	60e8      	str	r0, [r5, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e4      	bne.n	800704a <_Balloc+0x20>
 8007080:	2000      	movs	r0, #0
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	6802      	ldr	r2, [r0, #0]
 8007086:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800708a:	2300      	movs	r3, #0
 800708c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007090:	e7f7      	b.n	8007082 <_Balloc+0x58>

08007092 <_Bfree>:
 8007092:	b570      	push	{r4, r5, r6, lr}
 8007094:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007096:	4606      	mov	r6, r0
 8007098:	460d      	mov	r5, r1
 800709a:	b93c      	cbnz	r4, 80070ac <_Bfree+0x1a>
 800709c:	2010      	movs	r0, #16
 800709e:	f7ff ffb1 	bl	8007004 <malloc>
 80070a2:	6270      	str	r0, [r6, #36]	; 0x24
 80070a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070a8:	6004      	str	r4, [r0, #0]
 80070aa:	60c4      	str	r4, [r0, #12]
 80070ac:	b13d      	cbz	r5, 80070be <_Bfree+0x2c>
 80070ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80070b0:	686a      	ldr	r2, [r5, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070b8:	6029      	str	r1, [r5, #0]
 80070ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80070be:	bd70      	pop	{r4, r5, r6, pc}

080070c0 <__multadd>:
 80070c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	690d      	ldr	r5, [r1, #16]
 80070c6:	461f      	mov	r7, r3
 80070c8:	4606      	mov	r6, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	f101 0c14 	add.w	ip, r1, #20
 80070d0:	2300      	movs	r3, #0
 80070d2:	f8dc 0000 	ldr.w	r0, [ip]
 80070d6:	b281      	uxth	r1, r0
 80070d8:	fb02 7101 	mla	r1, r2, r1, r7
 80070dc:	0c0f      	lsrs	r7, r1, #16
 80070de:	0c00      	lsrs	r0, r0, #16
 80070e0:	fb02 7000 	mla	r0, r2, r0, r7
 80070e4:	b289      	uxth	r1, r1
 80070e6:	3301      	adds	r3, #1
 80070e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80070ec:	429d      	cmp	r5, r3
 80070ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80070f2:	f84c 1b04 	str.w	r1, [ip], #4
 80070f6:	dcec      	bgt.n	80070d2 <__multadd+0x12>
 80070f8:	b1d7      	cbz	r7, 8007130 <__multadd+0x70>
 80070fa:	68a3      	ldr	r3, [r4, #8]
 80070fc:	42ab      	cmp	r3, r5
 80070fe:	dc12      	bgt.n	8007126 <__multadd+0x66>
 8007100:	6861      	ldr	r1, [r4, #4]
 8007102:	4630      	mov	r0, r6
 8007104:	3101      	adds	r1, #1
 8007106:	f7ff ff90 	bl	800702a <_Balloc>
 800710a:	6922      	ldr	r2, [r4, #16]
 800710c:	3202      	adds	r2, #2
 800710e:	f104 010c 	add.w	r1, r4, #12
 8007112:	4680      	mov	r8, r0
 8007114:	0092      	lsls	r2, r2, #2
 8007116:	300c      	adds	r0, #12
 8007118:	f7ff ff7c 	bl	8007014 <memcpy>
 800711c:	4621      	mov	r1, r4
 800711e:	4630      	mov	r0, r6
 8007120:	f7ff ffb7 	bl	8007092 <_Bfree>
 8007124:	4644      	mov	r4, r8
 8007126:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800712a:	3501      	adds	r5, #1
 800712c:	615f      	str	r7, [r3, #20]
 800712e:	6125      	str	r5, [r4, #16]
 8007130:	4620      	mov	r0, r4
 8007132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007136 <__hi0bits>:
 8007136:	0c02      	lsrs	r2, r0, #16
 8007138:	0412      	lsls	r2, r2, #16
 800713a:	4603      	mov	r3, r0
 800713c:	b9b2      	cbnz	r2, 800716c <__hi0bits+0x36>
 800713e:	0403      	lsls	r3, r0, #16
 8007140:	2010      	movs	r0, #16
 8007142:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007146:	bf04      	itt	eq
 8007148:	021b      	lsleq	r3, r3, #8
 800714a:	3008      	addeq	r0, #8
 800714c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007150:	bf04      	itt	eq
 8007152:	011b      	lsleq	r3, r3, #4
 8007154:	3004      	addeq	r0, #4
 8007156:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800715a:	bf04      	itt	eq
 800715c:	009b      	lsleq	r3, r3, #2
 800715e:	3002      	addeq	r0, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	db06      	blt.n	8007172 <__hi0bits+0x3c>
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	d503      	bpl.n	8007170 <__hi0bits+0x3a>
 8007168:	3001      	adds	r0, #1
 800716a:	4770      	bx	lr
 800716c:	2000      	movs	r0, #0
 800716e:	e7e8      	b.n	8007142 <__hi0bits+0xc>
 8007170:	2020      	movs	r0, #32
 8007172:	4770      	bx	lr

08007174 <__lo0bits>:
 8007174:	6803      	ldr	r3, [r0, #0]
 8007176:	f013 0207 	ands.w	r2, r3, #7
 800717a:	4601      	mov	r1, r0
 800717c:	d00b      	beq.n	8007196 <__lo0bits+0x22>
 800717e:	07da      	lsls	r2, r3, #31
 8007180:	d423      	bmi.n	80071ca <__lo0bits+0x56>
 8007182:	0798      	lsls	r0, r3, #30
 8007184:	bf49      	itett	mi
 8007186:	085b      	lsrmi	r3, r3, #1
 8007188:	089b      	lsrpl	r3, r3, #2
 800718a:	2001      	movmi	r0, #1
 800718c:	600b      	strmi	r3, [r1, #0]
 800718e:	bf5c      	itt	pl
 8007190:	600b      	strpl	r3, [r1, #0]
 8007192:	2002      	movpl	r0, #2
 8007194:	4770      	bx	lr
 8007196:	b298      	uxth	r0, r3
 8007198:	b9a8      	cbnz	r0, 80071c6 <__lo0bits+0x52>
 800719a:	0c1b      	lsrs	r3, r3, #16
 800719c:	2010      	movs	r0, #16
 800719e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80071a2:	bf04      	itt	eq
 80071a4:	0a1b      	lsreq	r3, r3, #8
 80071a6:	3008      	addeq	r0, #8
 80071a8:	071a      	lsls	r2, r3, #28
 80071aa:	bf04      	itt	eq
 80071ac:	091b      	lsreq	r3, r3, #4
 80071ae:	3004      	addeq	r0, #4
 80071b0:	079a      	lsls	r2, r3, #30
 80071b2:	bf04      	itt	eq
 80071b4:	089b      	lsreq	r3, r3, #2
 80071b6:	3002      	addeq	r0, #2
 80071b8:	07da      	lsls	r2, r3, #31
 80071ba:	d402      	bmi.n	80071c2 <__lo0bits+0x4e>
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	d006      	beq.n	80071ce <__lo0bits+0x5a>
 80071c0:	3001      	adds	r0, #1
 80071c2:	600b      	str	r3, [r1, #0]
 80071c4:	4770      	bx	lr
 80071c6:	4610      	mov	r0, r2
 80071c8:	e7e9      	b.n	800719e <__lo0bits+0x2a>
 80071ca:	2000      	movs	r0, #0
 80071cc:	4770      	bx	lr
 80071ce:	2020      	movs	r0, #32
 80071d0:	4770      	bx	lr

080071d2 <__i2b>:
 80071d2:	b510      	push	{r4, lr}
 80071d4:	460c      	mov	r4, r1
 80071d6:	2101      	movs	r1, #1
 80071d8:	f7ff ff27 	bl	800702a <_Balloc>
 80071dc:	2201      	movs	r2, #1
 80071de:	6144      	str	r4, [r0, #20]
 80071e0:	6102      	str	r2, [r0, #16]
 80071e2:	bd10      	pop	{r4, pc}

080071e4 <__multiply>:
 80071e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	4614      	mov	r4, r2
 80071ea:	690a      	ldr	r2, [r1, #16]
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	bfb8      	it	lt
 80071f2:	460b      	movlt	r3, r1
 80071f4:	4688      	mov	r8, r1
 80071f6:	bfbc      	itt	lt
 80071f8:	46a0      	movlt	r8, r4
 80071fa:	461c      	movlt	r4, r3
 80071fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007200:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007204:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007208:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800720c:	eb07 0609 	add.w	r6, r7, r9
 8007210:	42b3      	cmp	r3, r6
 8007212:	bfb8      	it	lt
 8007214:	3101      	addlt	r1, #1
 8007216:	f7ff ff08 	bl	800702a <_Balloc>
 800721a:	f100 0514 	add.w	r5, r0, #20
 800721e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007222:	462b      	mov	r3, r5
 8007224:	2200      	movs	r2, #0
 8007226:	4573      	cmp	r3, lr
 8007228:	d316      	bcc.n	8007258 <__multiply+0x74>
 800722a:	f104 0214 	add.w	r2, r4, #20
 800722e:	f108 0114 	add.w	r1, r8, #20
 8007232:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007236:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	9b00      	ldr	r3, [sp, #0]
 800723e:	9201      	str	r2, [sp, #4]
 8007240:	4293      	cmp	r3, r2
 8007242:	d80c      	bhi.n	800725e <__multiply+0x7a>
 8007244:	2e00      	cmp	r6, #0
 8007246:	dd03      	ble.n	8007250 <__multiply+0x6c>
 8007248:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800724c:	2b00      	cmp	r3, #0
 800724e:	d05d      	beq.n	800730c <__multiply+0x128>
 8007250:	6106      	str	r6, [r0, #16]
 8007252:	b003      	add	sp, #12
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	f843 2b04 	str.w	r2, [r3], #4
 800725c:	e7e3      	b.n	8007226 <__multiply+0x42>
 800725e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007262:	f1bb 0f00 	cmp.w	fp, #0
 8007266:	d023      	beq.n	80072b0 <__multiply+0xcc>
 8007268:	4689      	mov	r9, r1
 800726a:	46ac      	mov	ip, r5
 800726c:	f04f 0800 	mov.w	r8, #0
 8007270:	f859 4b04 	ldr.w	r4, [r9], #4
 8007274:	f8dc a000 	ldr.w	sl, [ip]
 8007278:	b2a3      	uxth	r3, r4
 800727a:	fa1f fa8a 	uxth.w	sl, sl
 800727e:	fb0b a303 	mla	r3, fp, r3, sl
 8007282:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007286:	f8dc 4000 	ldr.w	r4, [ip]
 800728a:	4443      	add	r3, r8
 800728c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007290:	fb0b 840a 	mla	r4, fp, sl, r8
 8007294:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007298:	46e2      	mov	sl, ip
 800729a:	b29b      	uxth	r3, r3
 800729c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80072a0:	454f      	cmp	r7, r9
 80072a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80072a6:	f84a 3b04 	str.w	r3, [sl], #4
 80072aa:	d82b      	bhi.n	8007304 <__multiply+0x120>
 80072ac:	f8cc 8004 	str.w	r8, [ip, #4]
 80072b0:	9b01      	ldr	r3, [sp, #4]
 80072b2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80072b6:	3204      	adds	r2, #4
 80072b8:	f1ba 0f00 	cmp.w	sl, #0
 80072bc:	d020      	beq.n	8007300 <__multiply+0x11c>
 80072be:	682b      	ldr	r3, [r5, #0]
 80072c0:	4689      	mov	r9, r1
 80072c2:	46a8      	mov	r8, r5
 80072c4:	f04f 0b00 	mov.w	fp, #0
 80072c8:	f8b9 c000 	ldrh.w	ip, [r9]
 80072cc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80072d0:	fb0a 440c 	mla	r4, sl, ip, r4
 80072d4:	445c      	add	r4, fp
 80072d6:	46c4      	mov	ip, r8
 80072d8:	b29b      	uxth	r3, r3
 80072da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80072de:	f84c 3b04 	str.w	r3, [ip], #4
 80072e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80072e6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80072ea:	0c1b      	lsrs	r3, r3, #16
 80072ec:	fb0a b303 	mla	r3, sl, r3, fp
 80072f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80072f4:	454f      	cmp	r7, r9
 80072f6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80072fa:	d805      	bhi.n	8007308 <__multiply+0x124>
 80072fc:	f8c8 3004 	str.w	r3, [r8, #4]
 8007300:	3504      	adds	r5, #4
 8007302:	e79b      	b.n	800723c <__multiply+0x58>
 8007304:	46d4      	mov	ip, sl
 8007306:	e7b3      	b.n	8007270 <__multiply+0x8c>
 8007308:	46e0      	mov	r8, ip
 800730a:	e7dd      	b.n	80072c8 <__multiply+0xe4>
 800730c:	3e01      	subs	r6, #1
 800730e:	e799      	b.n	8007244 <__multiply+0x60>

08007310 <__pow5mult>:
 8007310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007314:	4615      	mov	r5, r2
 8007316:	f012 0203 	ands.w	r2, r2, #3
 800731a:	4606      	mov	r6, r0
 800731c:	460f      	mov	r7, r1
 800731e:	d007      	beq.n	8007330 <__pow5mult+0x20>
 8007320:	3a01      	subs	r2, #1
 8007322:	4c21      	ldr	r4, [pc, #132]	; (80073a8 <__pow5mult+0x98>)
 8007324:	2300      	movs	r3, #0
 8007326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800732a:	f7ff fec9 	bl	80070c0 <__multadd>
 800732e:	4607      	mov	r7, r0
 8007330:	10ad      	asrs	r5, r5, #2
 8007332:	d035      	beq.n	80073a0 <__pow5mult+0x90>
 8007334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007336:	b93c      	cbnz	r4, 8007348 <__pow5mult+0x38>
 8007338:	2010      	movs	r0, #16
 800733a:	f7ff fe63 	bl	8007004 <malloc>
 800733e:	6270      	str	r0, [r6, #36]	; 0x24
 8007340:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007344:	6004      	str	r4, [r0, #0]
 8007346:	60c4      	str	r4, [r0, #12]
 8007348:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800734c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007350:	b94c      	cbnz	r4, 8007366 <__pow5mult+0x56>
 8007352:	f240 2171 	movw	r1, #625	; 0x271
 8007356:	4630      	mov	r0, r6
 8007358:	f7ff ff3b 	bl	80071d2 <__i2b>
 800735c:	2300      	movs	r3, #0
 800735e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007362:	4604      	mov	r4, r0
 8007364:	6003      	str	r3, [r0, #0]
 8007366:	f04f 0800 	mov.w	r8, #0
 800736a:	07eb      	lsls	r3, r5, #31
 800736c:	d50a      	bpl.n	8007384 <__pow5mult+0x74>
 800736e:	4639      	mov	r1, r7
 8007370:	4622      	mov	r2, r4
 8007372:	4630      	mov	r0, r6
 8007374:	f7ff ff36 	bl	80071e4 <__multiply>
 8007378:	4639      	mov	r1, r7
 800737a:	4681      	mov	r9, r0
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff fe88 	bl	8007092 <_Bfree>
 8007382:	464f      	mov	r7, r9
 8007384:	106d      	asrs	r5, r5, #1
 8007386:	d00b      	beq.n	80073a0 <__pow5mult+0x90>
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	b938      	cbnz	r0, 800739c <__pow5mult+0x8c>
 800738c:	4622      	mov	r2, r4
 800738e:	4621      	mov	r1, r4
 8007390:	4630      	mov	r0, r6
 8007392:	f7ff ff27 	bl	80071e4 <__multiply>
 8007396:	6020      	str	r0, [r4, #0]
 8007398:	f8c0 8000 	str.w	r8, [r0]
 800739c:	4604      	mov	r4, r0
 800739e:	e7e4      	b.n	800736a <__pow5mult+0x5a>
 80073a0:	4638      	mov	r0, r7
 80073a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a6:	bf00      	nop
 80073a8:	08007c68 	.word	0x08007c68

080073ac <__lshift>:
 80073ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	460c      	mov	r4, r1
 80073b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	6849      	ldr	r1, [r1, #4]
 80073ba:	eb0a 0903 	add.w	r9, sl, r3
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	4607      	mov	r7, r0
 80073c2:	4616      	mov	r6, r2
 80073c4:	f109 0501 	add.w	r5, r9, #1
 80073c8:	42ab      	cmp	r3, r5
 80073ca:	db32      	blt.n	8007432 <__lshift+0x86>
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7ff fe2c 	bl	800702a <_Balloc>
 80073d2:	2300      	movs	r3, #0
 80073d4:	4680      	mov	r8, r0
 80073d6:	f100 0114 	add.w	r1, r0, #20
 80073da:	461a      	mov	r2, r3
 80073dc:	4553      	cmp	r3, sl
 80073de:	db2b      	blt.n	8007438 <__lshift+0x8c>
 80073e0:	6920      	ldr	r0, [r4, #16]
 80073e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073e6:	f104 0314 	add.w	r3, r4, #20
 80073ea:	f016 021f 	ands.w	r2, r6, #31
 80073ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073f6:	d025      	beq.n	8007444 <__lshift+0x98>
 80073f8:	f1c2 0e20 	rsb	lr, r2, #32
 80073fc:	2000      	movs	r0, #0
 80073fe:	681e      	ldr	r6, [r3, #0]
 8007400:	468a      	mov	sl, r1
 8007402:	4096      	lsls	r6, r2
 8007404:	4330      	orrs	r0, r6
 8007406:	f84a 0b04 	str.w	r0, [sl], #4
 800740a:	f853 0b04 	ldr.w	r0, [r3], #4
 800740e:	459c      	cmp	ip, r3
 8007410:	fa20 f00e 	lsr.w	r0, r0, lr
 8007414:	d814      	bhi.n	8007440 <__lshift+0x94>
 8007416:	6048      	str	r0, [r1, #4]
 8007418:	b108      	cbz	r0, 800741e <__lshift+0x72>
 800741a:	f109 0502 	add.w	r5, r9, #2
 800741e:	3d01      	subs	r5, #1
 8007420:	4638      	mov	r0, r7
 8007422:	f8c8 5010 	str.w	r5, [r8, #16]
 8007426:	4621      	mov	r1, r4
 8007428:	f7ff fe33 	bl	8007092 <_Bfree>
 800742c:	4640      	mov	r0, r8
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	3101      	adds	r1, #1
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	e7c7      	b.n	80073c8 <__lshift+0x1c>
 8007438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800743c:	3301      	adds	r3, #1
 800743e:	e7cd      	b.n	80073dc <__lshift+0x30>
 8007440:	4651      	mov	r1, sl
 8007442:	e7dc      	b.n	80073fe <__lshift+0x52>
 8007444:	3904      	subs	r1, #4
 8007446:	f853 2b04 	ldr.w	r2, [r3], #4
 800744a:	f841 2f04 	str.w	r2, [r1, #4]!
 800744e:	459c      	cmp	ip, r3
 8007450:	d8f9      	bhi.n	8007446 <__lshift+0x9a>
 8007452:	e7e4      	b.n	800741e <__lshift+0x72>

08007454 <__mcmp>:
 8007454:	6903      	ldr	r3, [r0, #16]
 8007456:	690a      	ldr	r2, [r1, #16]
 8007458:	1a9b      	subs	r3, r3, r2
 800745a:	b530      	push	{r4, r5, lr}
 800745c:	d10c      	bne.n	8007478 <__mcmp+0x24>
 800745e:	0092      	lsls	r2, r2, #2
 8007460:	3014      	adds	r0, #20
 8007462:	3114      	adds	r1, #20
 8007464:	1884      	adds	r4, r0, r2
 8007466:	4411      	add	r1, r2
 8007468:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800746c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007470:	4295      	cmp	r5, r2
 8007472:	d003      	beq.n	800747c <__mcmp+0x28>
 8007474:	d305      	bcc.n	8007482 <__mcmp+0x2e>
 8007476:	2301      	movs	r3, #1
 8007478:	4618      	mov	r0, r3
 800747a:	bd30      	pop	{r4, r5, pc}
 800747c:	42a0      	cmp	r0, r4
 800747e:	d3f3      	bcc.n	8007468 <__mcmp+0x14>
 8007480:	e7fa      	b.n	8007478 <__mcmp+0x24>
 8007482:	f04f 33ff 	mov.w	r3, #4294967295
 8007486:	e7f7      	b.n	8007478 <__mcmp+0x24>

08007488 <__mdiff>:
 8007488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	460d      	mov	r5, r1
 800748e:	4607      	mov	r7, r0
 8007490:	4611      	mov	r1, r2
 8007492:	4628      	mov	r0, r5
 8007494:	4614      	mov	r4, r2
 8007496:	f7ff ffdd 	bl	8007454 <__mcmp>
 800749a:	1e06      	subs	r6, r0, #0
 800749c:	d108      	bne.n	80074b0 <__mdiff+0x28>
 800749e:	4631      	mov	r1, r6
 80074a0:	4638      	mov	r0, r7
 80074a2:	f7ff fdc2 	bl	800702a <_Balloc>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80074ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b0:	bfa4      	itt	ge
 80074b2:	4623      	movge	r3, r4
 80074b4:	462c      	movge	r4, r5
 80074b6:	4638      	mov	r0, r7
 80074b8:	6861      	ldr	r1, [r4, #4]
 80074ba:	bfa6      	itte	ge
 80074bc:	461d      	movge	r5, r3
 80074be:	2600      	movge	r6, #0
 80074c0:	2601      	movlt	r6, #1
 80074c2:	f7ff fdb2 	bl	800702a <_Balloc>
 80074c6:	692b      	ldr	r3, [r5, #16]
 80074c8:	60c6      	str	r6, [r0, #12]
 80074ca:	6926      	ldr	r6, [r4, #16]
 80074cc:	f105 0914 	add.w	r9, r5, #20
 80074d0:	f104 0214 	add.w	r2, r4, #20
 80074d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80074d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80074dc:	f100 0514 	add.w	r5, r0, #20
 80074e0:	f04f 0e00 	mov.w	lr, #0
 80074e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80074e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80074ec:	fa1e f18a 	uxtah	r1, lr, sl
 80074f0:	b2a3      	uxth	r3, r4
 80074f2:	1ac9      	subs	r1, r1, r3
 80074f4:	0c23      	lsrs	r3, r4, #16
 80074f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80074fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80074fe:	b289      	uxth	r1, r1
 8007500:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007504:	45c8      	cmp	r8, r9
 8007506:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800750a:	4694      	mov	ip, r2
 800750c:	f845 3b04 	str.w	r3, [r5], #4
 8007510:	d8e8      	bhi.n	80074e4 <__mdiff+0x5c>
 8007512:	45bc      	cmp	ip, r7
 8007514:	d304      	bcc.n	8007520 <__mdiff+0x98>
 8007516:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800751a:	b183      	cbz	r3, 800753e <__mdiff+0xb6>
 800751c:	6106      	str	r6, [r0, #16]
 800751e:	e7c5      	b.n	80074ac <__mdiff+0x24>
 8007520:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007524:	fa1e f381 	uxtah	r3, lr, r1
 8007528:	141a      	asrs	r2, r3, #16
 800752a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800752e:	b29b      	uxth	r3, r3
 8007530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007534:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007538:	f845 3b04 	str.w	r3, [r5], #4
 800753c:	e7e9      	b.n	8007512 <__mdiff+0x8a>
 800753e:	3e01      	subs	r6, #1
 8007540:	e7e9      	b.n	8007516 <__mdiff+0x8e>

08007542 <__d2b>:
 8007542:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007546:	460e      	mov	r6, r1
 8007548:	2101      	movs	r1, #1
 800754a:	ec59 8b10 	vmov	r8, r9, d0
 800754e:	4615      	mov	r5, r2
 8007550:	f7ff fd6b 	bl	800702a <_Balloc>
 8007554:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007558:	4607      	mov	r7, r0
 800755a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800755e:	bb34      	cbnz	r4, 80075ae <__d2b+0x6c>
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	f1b8 0300 	subs.w	r3, r8, #0
 8007566:	d027      	beq.n	80075b8 <__d2b+0x76>
 8007568:	a802      	add	r0, sp, #8
 800756a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800756e:	f7ff fe01 	bl	8007174 <__lo0bits>
 8007572:	9900      	ldr	r1, [sp, #0]
 8007574:	b1f0      	cbz	r0, 80075b4 <__d2b+0x72>
 8007576:	9a01      	ldr	r2, [sp, #4]
 8007578:	f1c0 0320 	rsb	r3, r0, #32
 800757c:	fa02 f303 	lsl.w	r3, r2, r3
 8007580:	430b      	orrs	r3, r1
 8007582:	40c2      	lsrs	r2, r0
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	9201      	str	r2, [sp, #4]
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	bf14      	ite	ne
 8007590:	2102      	movne	r1, #2
 8007592:	2101      	moveq	r1, #1
 8007594:	6139      	str	r1, [r7, #16]
 8007596:	b1c4      	cbz	r4, 80075ca <__d2b+0x88>
 8007598:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800759c:	4404      	add	r4, r0
 800759e:	6034      	str	r4, [r6, #0]
 80075a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075a4:	6028      	str	r0, [r5, #0]
 80075a6:	4638      	mov	r0, r7
 80075a8:	b003      	add	sp, #12
 80075aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075b2:	e7d5      	b.n	8007560 <__d2b+0x1e>
 80075b4:	6179      	str	r1, [r7, #20]
 80075b6:	e7e7      	b.n	8007588 <__d2b+0x46>
 80075b8:	a801      	add	r0, sp, #4
 80075ba:	f7ff fddb 	bl	8007174 <__lo0bits>
 80075be:	9b01      	ldr	r3, [sp, #4]
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	2101      	movs	r1, #1
 80075c4:	6139      	str	r1, [r7, #16]
 80075c6:	3020      	adds	r0, #32
 80075c8:	e7e5      	b.n	8007596 <__d2b+0x54>
 80075ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80075ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075d2:	6030      	str	r0, [r6, #0]
 80075d4:	6918      	ldr	r0, [r3, #16]
 80075d6:	f7ff fdae 	bl	8007136 <__hi0bits>
 80075da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80075de:	e7e1      	b.n	80075a4 <__d2b+0x62>

080075e0 <_calloc_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	fb02 f401 	mul.w	r4, r2, r1
 80075e6:	4621      	mov	r1, r4
 80075e8:	f000 f856 	bl	8007698 <_malloc_r>
 80075ec:	4605      	mov	r5, r0
 80075ee:	b118      	cbz	r0, 80075f8 <_calloc_r+0x18>
 80075f0:	4622      	mov	r2, r4
 80075f2:	2100      	movs	r1, #0
 80075f4:	f7fe fa2e 	bl	8005a54 <memset>
 80075f8:	4628      	mov	r0, r5
 80075fa:	bd38      	pop	{r3, r4, r5, pc}

080075fc <_free_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4605      	mov	r5, r0
 8007600:	2900      	cmp	r1, #0
 8007602:	d045      	beq.n	8007690 <_free_r+0x94>
 8007604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007608:	1f0c      	subs	r4, r1, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	bfb8      	it	lt
 800760e:	18e4      	addlt	r4, r4, r3
 8007610:	f000 fa29 	bl	8007a66 <__malloc_lock>
 8007614:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <_free_r+0x98>)
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	4610      	mov	r0, r2
 800761a:	b933      	cbnz	r3, 800762a <_free_r+0x2e>
 800761c:	6063      	str	r3, [r4, #4]
 800761e:	6014      	str	r4, [r2, #0]
 8007620:	4628      	mov	r0, r5
 8007622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007626:	f000 ba1f 	b.w	8007a68 <__malloc_unlock>
 800762a:	42a3      	cmp	r3, r4
 800762c:	d90c      	bls.n	8007648 <_free_r+0x4c>
 800762e:	6821      	ldr	r1, [r4, #0]
 8007630:	1862      	adds	r2, r4, r1
 8007632:	4293      	cmp	r3, r2
 8007634:	bf04      	itt	eq
 8007636:	681a      	ldreq	r2, [r3, #0]
 8007638:	685b      	ldreq	r3, [r3, #4]
 800763a:	6063      	str	r3, [r4, #4]
 800763c:	bf04      	itt	eq
 800763e:	1852      	addeq	r2, r2, r1
 8007640:	6022      	streq	r2, [r4, #0]
 8007642:	6004      	str	r4, [r0, #0]
 8007644:	e7ec      	b.n	8007620 <_free_r+0x24>
 8007646:	4613      	mov	r3, r2
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	b10a      	cbz	r2, 8007650 <_free_r+0x54>
 800764c:	42a2      	cmp	r2, r4
 800764e:	d9fa      	bls.n	8007646 <_free_r+0x4a>
 8007650:	6819      	ldr	r1, [r3, #0]
 8007652:	1858      	adds	r0, r3, r1
 8007654:	42a0      	cmp	r0, r4
 8007656:	d10b      	bne.n	8007670 <_free_r+0x74>
 8007658:	6820      	ldr	r0, [r4, #0]
 800765a:	4401      	add	r1, r0
 800765c:	1858      	adds	r0, r3, r1
 800765e:	4282      	cmp	r2, r0
 8007660:	6019      	str	r1, [r3, #0]
 8007662:	d1dd      	bne.n	8007620 <_free_r+0x24>
 8007664:	6810      	ldr	r0, [r2, #0]
 8007666:	6852      	ldr	r2, [r2, #4]
 8007668:	605a      	str	r2, [r3, #4]
 800766a:	4401      	add	r1, r0
 800766c:	6019      	str	r1, [r3, #0]
 800766e:	e7d7      	b.n	8007620 <_free_r+0x24>
 8007670:	d902      	bls.n	8007678 <_free_r+0x7c>
 8007672:	230c      	movs	r3, #12
 8007674:	602b      	str	r3, [r5, #0]
 8007676:	e7d3      	b.n	8007620 <_free_r+0x24>
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	1821      	adds	r1, r4, r0
 800767c:	428a      	cmp	r2, r1
 800767e:	bf04      	itt	eq
 8007680:	6811      	ldreq	r1, [r2, #0]
 8007682:	6852      	ldreq	r2, [r2, #4]
 8007684:	6062      	str	r2, [r4, #4]
 8007686:	bf04      	itt	eq
 8007688:	1809      	addeq	r1, r1, r0
 800768a:	6021      	streq	r1, [r4, #0]
 800768c:	605c      	str	r4, [r3, #4]
 800768e:	e7c7      	b.n	8007620 <_free_r+0x24>
 8007690:	bd38      	pop	{r3, r4, r5, pc}
 8007692:	bf00      	nop
 8007694:	20000208 	.word	0x20000208

08007698 <_malloc_r>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	1ccd      	adds	r5, r1, #3
 800769c:	f025 0503 	bic.w	r5, r5, #3
 80076a0:	3508      	adds	r5, #8
 80076a2:	2d0c      	cmp	r5, #12
 80076a4:	bf38      	it	cc
 80076a6:	250c      	movcc	r5, #12
 80076a8:	2d00      	cmp	r5, #0
 80076aa:	4606      	mov	r6, r0
 80076ac:	db01      	blt.n	80076b2 <_malloc_r+0x1a>
 80076ae:	42a9      	cmp	r1, r5
 80076b0:	d903      	bls.n	80076ba <_malloc_r+0x22>
 80076b2:	230c      	movs	r3, #12
 80076b4:	6033      	str	r3, [r6, #0]
 80076b6:	2000      	movs	r0, #0
 80076b8:	bd70      	pop	{r4, r5, r6, pc}
 80076ba:	f000 f9d4 	bl	8007a66 <__malloc_lock>
 80076be:	4a21      	ldr	r2, [pc, #132]	; (8007744 <_malloc_r+0xac>)
 80076c0:	6814      	ldr	r4, [r2, #0]
 80076c2:	4621      	mov	r1, r4
 80076c4:	b991      	cbnz	r1, 80076ec <_malloc_r+0x54>
 80076c6:	4c20      	ldr	r4, [pc, #128]	; (8007748 <_malloc_r+0xb0>)
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	b91b      	cbnz	r3, 80076d4 <_malloc_r+0x3c>
 80076cc:	4630      	mov	r0, r6
 80076ce:	f000 f98f 	bl	80079f0 <_sbrk_r>
 80076d2:	6020      	str	r0, [r4, #0]
 80076d4:	4629      	mov	r1, r5
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 f98a 	bl	80079f0 <_sbrk_r>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d124      	bne.n	800772a <_malloc_r+0x92>
 80076e0:	230c      	movs	r3, #12
 80076e2:	6033      	str	r3, [r6, #0]
 80076e4:	4630      	mov	r0, r6
 80076e6:	f000 f9bf 	bl	8007a68 <__malloc_unlock>
 80076ea:	e7e4      	b.n	80076b6 <_malloc_r+0x1e>
 80076ec:	680b      	ldr	r3, [r1, #0]
 80076ee:	1b5b      	subs	r3, r3, r5
 80076f0:	d418      	bmi.n	8007724 <_malloc_r+0x8c>
 80076f2:	2b0b      	cmp	r3, #11
 80076f4:	d90f      	bls.n	8007716 <_malloc_r+0x7e>
 80076f6:	600b      	str	r3, [r1, #0]
 80076f8:	50cd      	str	r5, [r1, r3]
 80076fa:	18cc      	adds	r4, r1, r3
 80076fc:	4630      	mov	r0, r6
 80076fe:	f000 f9b3 	bl	8007a68 <__malloc_unlock>
 8007702:	f104 000b 	add.w	r0, r4, #11
 8007706:	1d23      	adds	r3, r4, #4
 8007708:	f020 0007 	bic.w	r0, r0, #7
 800770c:	1ac3      	subs	r3, r0, r3
 800770e:	d0d3      	beq.n	80076b8 <_malloc_r+0x20>
 8007710:	425a      	negs	r2, r3
 8007712:	50e2      	str	r2, [r4, r3]
 8007714:	e7d0      	b.n	80076b8 <_malloc_r+0x20>
 8007716:	428c      	cmp	r4, r1
 8007718:	684b      	ldr	r3, [r1, #4]
 800771a:	bf16      	itet	ne
 800771c:	6063      	strne	r3, [r4, #4]
 800771e:	6013      	streq	r3, [r2, #0]
 8007720:	460c      	movne	r4, r1
 8007722:	e7eb      	b.n	80076fc <_malloc_r+0x64>
 8007724:	460c      	mov	r4, r1
 8007726:	6849      	ldr	r1, [r1, #4]
 8007728:	e7cc      	b.n	80076c4 <_malloc_r+0x2c>
 800772a:	1cc4      	adds	r4, r0, #3
 800772c:	f024 0403 	bic.w	r4, r4, #3
 8007730:	42a0      	cmp	r0, r4
 8007732:	d005      	beq.n	8007740 <_malloc_r+0xa8>
 8007734:	1a21      	subs	r1, r4, r0
 8007736:	4630      	mov	r0, r6
 8007738:	f000 f95a 	bl	80079f0 <_sbrk_r>
 800773c:	3001      	adds	r0, #1
 800773e:	d0cf      	beq.n	80076e0 <_malloc_r+0x48>
 8007740:	6025      	str	r5, [r4, #0]
 8007742:	e7db      	b.n	80076fc <_malloc_r+0x64>
 8007744:	20000208 	.word	0x20000208
 8007748:	2000020c 	.word	0x2000020c

0800774c <__ssputs_r>:
 800774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	688e      	ldr	r6, [r1, #8]
 8007752:	429e      	cmp	r6, r3
 8007754:	4682      	mov	sl, r0
 8007756:	460c      	mov	r4, r1
 8007758:	4690      	mov	r8, r2
 800775a:	4699      	mov	r9, r3
 800775c:	d837      	bhi.n	80077ce <__ssputs_r+0x82>
 800775e:	898a      	ldrh	r2, [r1, #12]
 8007760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007764:	d031      	beq.n	80077ca <__ssputs_r+0x7e>
 8007766:	6825      	ldr	r5, [r4, #0]
 8007768:	6909      	ldr	r1, [r1, #16]
 800776a:	1a6f      	subs	r7, r5, r1
 800776c:	6965      	ldr	r5, [r4, #20]
 800776e:	2302      	movs	r3, #2
 8007770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007774:	fb95 f5f3 	sdiv	r5, r5, r3
 8007778:	f109 0301 	add.w	r3, r9, #1
 800777c:	443b      	add	r3, r7
 800777e:	429d      	cmp	r5, r3
 8007780:	bf38      	it	cc
 8007782:	461d      	movcc	r5, r3
 8007784:	0553      	lsls	r3, r2, #21
 8007786:	d530      	bpl.n	80077ea <__ssputs_r+0x9e>
 8007788:	4629      	mov	r1, r5
 800778a:	f7ff ff85 	bl	8007698 <_malloc_r>
 800778e:	4606      	mov	r6, r0
 8007790:	b950      	cbnz	r0, 80077a8 <__ssputs_r+0x5c>
 8007792:	230c      	movs	r3, #12
 8007794:	f8ca 3000 	str.w	r3, [sl]
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295
 80077a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a8:	463a      	mov	r2, r7
 80077aa:	6921      	ldr	r1, [r4, #16]
 80077ac:	f7ff fc32 	bl	8007014 <memcpy>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	6126      	str	r6, [r4, #16]
 80077be:	6165      	str	r5, [r4, #20]
 80077c0:	443e      	add	r6, r7
 80077c2:	1bed      	subs	r5, r5, r7
 80077c4:	6026      	str	r6, [r4, #0]
 80077c6:	60a5      	str	r5, [r4, #8]
 80077c8:	464e      	mov	r6, r9
 80077ca:	454e      	cmp	r6, r9
 80077cc:	d900      	bls.n	80077d0 <__ssputs_r+0x84>
 80077ce:	464e      	mov	r6, r9
 80077d0:	4632      	mov	r2, r6
 80077d2:	4641      	mov	r1, r8
 80077d4:	6820      	ldr	r0, [r4, #0]
 80077d6:	f000 f92d 	bl	8007a34 <memmove>
 80077da:	68a3      	ldr	r3, [r4, #8]
 80077dc:	1b9b      	subs	r3, r3, r6
 80077de:	60a3      	str	r3, [r4, #8]
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	441e      	add	r6, r3
 80077e4:	6026      	str	r6, [r4, #0]
 80077e6:	2000      	movs	r0, #0
 80077e8:	e7dc      	b.n	80077a4 <__ssputs_r+0x58>
 80077ea:	462a      	mov	r2, r5
 80077ec:	f000 f93d 	bl	8007a6a <_realloc_r>
 80077f0:	4606      	mov	r6, r0
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d1e2      	bne.n	80077bc <__ssputs_r+0x70>
 80077f6:	6921      	ldr	r1, [r4, #16]
 80077f8:	4650      	mov	r0, sl
 80077fa:	f7ff feff 	bl	80075fc <_free_r>
 80077fe:	e7c8      	b.n	8007792 <__ssputs_r+0x46>

08007800 <_svfiprintf_r>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	461d      	mov	r5, r3
 8007806:	898b      	ldrh	r3, [r1, #12]
 8007808:	061f      	lsls	r7, r3, #24
 800780a:	b09d      	sub	sp, #116	; 0x74
 800780c:	4680      	mov	r8, r0
 800780e:	460c      	mov	r4, r1
 8007810:	4616      	mov	r6, r2
 8007812:	d50f      	bpl.n	8007834 <_svfiprintf_r+0x34>
 8007814:	690b      	ldr	r3, [r1, #16]
 8007816:	b96b      	cbnz	r3, 8007834 <_svfiprintf_r+0x34>
 8007818:	2140      	movs	r1, #64	; 0x40
 800781a:	f7ff ff3d 	bl	8007698 <_malloc_r>
 800781e:	6020      	str	r0, [r4, #0]
 8007820:	6120      	str	r0, [r4, #16]
 8007822:	b928      	cbnz	r0, 8007830 <_svfiprintf_r+0x30>
 8007824:	230c      	movs	r3, #12
 8007826:	f8c8 3000 	str.w	r3, [r8]
 800782a:	f04f 30ff 	mov.w	r0, #4294967295
 800782e:	e0c8      	b.n	80079c2 <_svfiprintf_r+0x1c2>
 8007830:	2340      	movs	r3, #64	; 0x40
 8007832:	6163      	str	r3, [r4, #20]
 8007834:	2300      	movs	r3, #0
 8007836:	9309      	str	r3, [sp, #36]	; 0x24
 8007838:	2320      	movs	r3, #32
 800783a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800783e:	2330      	movs	r3, #48	; 0x30
 8007840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007844:	9503      	str	r5, [sp, #12]
 8007846:	f04f 0b01 	mov.w	fp, #1
 800784a:	4637      	mov	r7, r6
 800784c:	463d      	mov	r5, r7
 800784e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007852:	b10b      	cbz	r3, 8007858 <_svfiprintf_r+0x58>
 8007854:	2b25      	cmp	r3, #37	; 0x25
 8007856:	d13e      	bne.n	80078d6 <_svfiprintf_r+0xd6>
 8007858:	ebb7 0a06 	subs.w	sl, r7, r6
 800785c:	d00b      	beq.n	8007876 <_svfiprintf_r+0x76>
 800785e:	4653      	mov	r3, sl
 8007860:	4632      	mov	r2, r6
 8007862:	4621      	mov	r1, r4
 8007864:	4640      	mov	r0, r8
 8007866:	f7ff ff71 	bl	800774c <__ssputs_r>
 800786a:	3001      	adds	r0, #1
 800786c:	f000 80a4 	beq.w	80079b8 <_svfiprintf_r+0x1b8>
 8007870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007872:	4453      	add	r3, sl
 8007874:	9309      	str	r3, [sp, #36]	; 0x24
 8007876:	783b      	ldrb	r3, [r7, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 809d 	beq.w	80079b8 <_svfiprintf_r+0x1b8>
 800787e:	2300      	movs	r3, #0
 8007880:	f04f 32ff 	mov.w	r2, #4294967295
 8007884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007888:	9304      	str	r3, [sp, #16]
 800788a:	9307      	str	r3, [sp, #28]
 800788c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007890:	931a      	str	r3, [sp, #104]	; 0x68
 8007892:	462f      	mov	r7, r5
 8007894:	2205      	movs	r2, #5
 8007896:	f817 1b01 	ldrb.w	r1, [r7], #1
 800789a:	4850      	ldr	r0, [pc, #320]	; (80079dc <_svfiprintf_r+0x1dc>)
 800789c:	f7f8 fcc0 	bl	8000220 <memchr>
 80078a0:	9b04      	ldr	r3, [sp, #16]
 80078a2:	b9d0      	cbnz	r0, 80078da <_svfiprintf_r+0xda>
 80078a4:	06d9      	lsls	r1, r3, #27
 80078a6:	bf44      	itt	mi
 80078a8:	2220      	movmi	r2, #32
 80078aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078ae:	071a      	lsls	r2, r3, #28
 80078b0:	bf44      	itt	mi
 80078b2:	222b      	movmi	r2, #43	; 0x2b
 80078b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078b8:	782a      	ldrb	r2, [r5, #0]
 80078ba:	2a2a      	cmp	r2, #42	; 0x2a
 80078bc:	d015      	beq.n	80078ea <_svfiprintf_r+0xea>
 80078be:	9a07      	ldr	r2, [sp, #28]
 80078c0:	462f      	mov	r7, r5
 80078c2:	2000      	movs	r0, #0
 80078c4:	250a      	movs	r5, #10
 80078c6:	4639      	mov	r1, r7
 80078c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078cc:	3b30      	subs	r3, #48	; 0x30
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	d94d      	bls.n	800796e <_svfiprintf_r+0x16e>
 80078d2:	b1b8      	cbz	r0, 8007904 <_svfiprintf_r+0x104>
 80078d4:	e00f      	b.n	80078f6 <_svfiprintf_r+0xf6>
 80078d6:	462f      	mov	r7, r5
 80078d8:	e7b8      	b.n	800784c <_svfiprintf_r+0x4c>
 80078da:	4a40      	ldr	r2, [pc, #256]	; (80079dc <_svfiprintf_r+0x1dc>)
 80078dc:	1a80      	subs	r0, r0, r2
 80078de:	fa0b f000 	lsl.w	r0, fp, r0
 80078e2:	4318      	orrs	r0, r3
 80078e4:	9004      	str	r0, [sp, #16]
 80078e6:	463d      	mov	r5, r7
 80078e8:	e7d3      	b.n	8007892 <_svfiprintf_r+0x92>
 80078ea:	9a03      	ldr	r2, [sp, #12]
 80078ec:	1d11      	adds	r1, r2, #4
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	9103      	str	r1, [sp, #12]
 80078f2:	2a00      	cmp	r2, #0
 80078f4:	db01      	blt.n	80078fa <_svfiprintf_r+0xfa>
 80078f6:	9207      	str	r2, [sp, #28]
 80078f8:	e004      	b.n	8007904 <_svfiprintf_r+0x104>
 80078fa:	4252      	negs	r2, r2
 80078fc:	f043 0302 	orr.w	r3, r3, #2
 8007900:	9207      	str	r2, [sp, #28]
 8007902:	9304      	str	r3, [sp, #16]
 8007904:	783b      	ldrb	r3, [r7, #0]
 8007906:	2b2e      	cmp	r3, #46	; 0x2e
 8007908:	d10c      	bne.n	8007924 <_svfiprintf_r+0x124>
 800790a:	787b      	ldrb	r3, [r7, #1]
 800790c:	2b2a      	cmp	r3, #42	; 0x2a
 800790e:	d133      	bne.n	8007978 <_svfiprintf_r+0x178>
 8007910:	9b03      	ldr	r3, [sp, #12]
 8007912:	1d1a      	adds	r2, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	9203      	str	r2, [sp, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	bfb8      	it	lt
 800791c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007920:	3702      	adds	r7, #2
 8007922:	9305      	str	r3, [sp, #20]
 8007924:	4d2e      	ldr	r5, [pc, #184]	; (80079e0 <_svfiprintf_r+0x1e0>)
 8007926:	7839      	ldrb	r1, [r7, #0]
 8007928:	2203      	movs	r2, #3
 800792a:	4628      	mov	r0, r5
 800792c:	f7f8 fc78 	bl	8000220 <memchr>
 8007930:	b138      	cbz	r0, 8007942 <_svfiprintf_r+0x142>
 8007932:	2340      	movs	r3, #64	; 0x40
 8007934:	1b40      	subs	r0, r0, r5
 8007936:	fa03 f000 	lsl.w	r0, r3, r0
 800793a:	9b04      	ldr	r3, [sp, #16]
 800793c:	4303      	orrs	r3, r0
 800793e:	3701      	adds	r7, #1
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	7839      	ldrb	r1, [r7, #0]
 8007944:	4827      	ldr	r0, [pc, #156]	; (80079e4 <_svfiprintf_r+0x1e4>)
 8007946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800794a:	2206      	movs	r2, #6
 800794c:	1c7e      	adds	r6, r7, #1
 800794e:	f7f8 fc67 	bl	8000220 <memchr>
 8007952:	2800      	cmp	r0, #0
 8007954:	d038      	beq.n	80079c8 <_svfiprintf_r+0x1c8>
 8007956:	4b24      	ldr	r3, [pc, #144]	; (80079e8 <_svfiprintf_r+0x1e8>)
 8007958:	bb13      	cbnz	r3, 80079a0 <_svfiprintf_r+0x1a0>
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	3307      	adds	r3, #7
 800795e:	f023 0307 	bic.w	r3, r3, #7
 8007962:	3308      	adds	r3, #8
 8007964:	9303      	str	r3, [sp, #12]
 8007966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007968:	444b      	add	r3, r9
 800796a:	9309      	str	r3, [sp, #36]	; 0x24
 800796c:	e76d      	b.n	800784a <_svfiprintf_r+0x4a>
 800796e:	fb05 3202 	mla	r2, r5, r2, r3
 8007972:	2001      	movs	r0, #1
 8007974:	460f      	mov	r7, r1
 8007976:	e7a6      	b.n	80078c6 <_svfiprintf_r+0xc6>
 8007978:	2300      	movs	r3, #0
 800797a:	3701      	adds	r7, #1
 800797c:	9305      	str	r3, [sp, #20]
 800797e:	4619      	mov	r1, r3
 8007980:	250a      	movs	r5, #10
 8007982:	4638      	mov	r0, r7
 8007984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007988:	3a30      	subs	r2, #48	; 0x30
 800798a:	2a09      	cmp	r2, #9
 800798c:	d903      	bls.n	8007996 <_svfiprintf_r+0x196>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0c8      	beq.n	8007924 <_svfiprintf_r+0x124>
 8007992:	9105      	str	r1, [sp, #20]
 8007994:	e7c6      	b.n	8007924 <_svfiprintf_r+0x124>
 8007996:	fb05 2101 	mla	r1, r5, r1, r2
 800799a:	2301      	movs	r3, #1
 800799c:	4607      	mov	r7, r0
 800799e:	e7f0      	b.n	8007982 <_svfiprintf_r+0x182>
 80079a0:	ab03      	add	r3, sp, #12
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	4622      	mov	r2, r4
 80079a6:	4b11      	ldr	r3, [pc, #68]	; (80079ec <_svfiprintf_r+0x1ec>)
 80079a8:	a904      	add	r1, sp, #16
 80079aa:	4640      	mov	r0, r8
 80079ac:	f7fe f8ee 	bl	8005b8c <_printf_float>
 80079b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80079b4:	4681      	mov	r9, r0
 80079b6:	d1d6      	bne.n	8007966 <_svfiprintf_r+0x166>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	065b      	lsls	r3, r3, #25
 80079bc:	f53f af35 	bmi.w	800782a <_svfiprintf_r+0x2a>
 80079c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079c2:	b01d      	add	sp, #116	; 0x74
 80079c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c8:	ab03      	add	r3, sp, #12
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	4622      	mov	r2, r4
 80079ce:	4b07      	ldr	r3, [pc, #28]	; (80079ec <_svfiprintf_r+0x1ec>)
 80079d0:	a904      	add	r1, sp, #16
 80079d2:	4640      	mov	r0, r8
 80079d4:	f7fe fb90 	bl	80060f8 <_printf_i>
 80079d8:	e7ea      	b.n	80079b0 <_svfiprintf_r+0x1b0>
 80079da:	bf00      	nop
 80079dc:	08007c74 	.word	0x08007c74
 80079e0:	08007c7a 	.word	0x08007c7a
 80079e4:	08007c7e 	.word	0x08007c7e
 80079e8:	08005b8d 	.word	0x08005b8d
 80079ec:	0800774d 	.word	0x0800774d

080079f0 <_sbrk_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4c06      	ldr	r4, [pc, #24]	; (8007a0c <_sbrk_r+0x1c>)
 80079f4:	2300      	movs	r3, #0
 80079f6:	4605      	mov	r5, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	6023      	str	r3, [r4, #0]
 80079fc:	f7fa fd88 	bl	8002510 <_sbrk>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_sbrk_r+0x1a>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_sbrk_r+0x1a>
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	20000600 	.word	0x20000600

08007a10 <__ascii_mbtowc>:
 8007a10:	b082      	sub	sp, #8
 8007a12:	b901      	cbnz	r1, 8007a16 <__ascii_mbtowc+0x6>
 8007a14:	a901      	add	r1, sp, #4
 8007a16:	b142      	cbz	r2, 8007a2a <__ascii_mbtowc+0x1a>
 8007a18:	b14b      	cbz	r3, 8007a2e <__ascii_mbtowc+0x1e>
 8007a1a:	7813      	ldrb	r3, [r2, #0]
 8007a1c:	600b      	str	r3, [r1, #0]
 8007a1e:	7812      	ldrb	r2, [r2, #0]
 8007a20:	1c10      	adds	r0, r2, #0
 8007a22:	bf18      	it	ne
 8007a24:	2001      	movne	r0, #1
 8007a26:	b002      	add	sp, #8
 8007a28:	4770      	bx	lr
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	e7fb      	b.n	8007a26 <__ascii_mbtowc+0x16>
 8007a2e:	f06f 0001 	mvn.w	r0, #1
 8007a32:	e7f8      	b.n	8007a26 <__ascii_mbtowc+0x16>

08007a34 <memmove>:
 8007a34:	4288      	cmp	r0, r1
 8007a36:	b510      	push	{r4, lr}
 8007a38:	eb01 0302 	add.w	r3, r1, r2
 8007a3c:	d807      	bhi.n	8007a4e <memmove+0x1a>
 8007a3e:	1e42      	subs	r2, r0, #1
 8007a40:	4299      	cmp	r1, r3
 8007a42:	d00a      	beq.n	8007a5a <memmove+0x26>
 8007a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a48:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a4c:	e7f8      	b.n	8007a40 <memmove+0xc>
 8007a4e:	4283      	cmp	r3, r0
 8007a50:	d9f5      	bls.n	8007a3e <memmove+0xa>
 8007a52:	1881      	adds	r1, r0, r2
 8007a54:	1ad2      	subs	r2, r2, r3
 8007a56:	42d3      	cmn	r3, r2
 8007a58:	d100      	bne.n	8007a5c <memmove+0x28>
 8007a5a:	bd10      	pop	{r4, pc}
 8007a5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a60:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007a64:	e7f7      	b.n	8007a56 <memmove+0x22>

08007a66 <__malloc_lock>:
 8007a66:	4770      	bx	lr

08007a68 <__malloc_unlock>:
 8007a68:	4770      	bx	lr

08007a6a <_realloc_r>:
 8007a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	4614      	mov	r4, r2
 8007a70:	460e      	mov	r6, r1
 8007a72:	b921      	cbnz	r1, 8007a7e <_realloc_r+0x14>
 8007a74:	4611      	mov	r1, r2
 8007a76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a7a:	f7ff be0d 	b.w	8007698 <_malloc_r>
 8007a7e:	b922      	cbnz	r2, 8007a8a <_realloc_r+0x20>
 8007a80:	f7ff fdbc 	bl	80075fc <_free_r>
 8007a84:	4625      	mov	r5, r4
 8007a86:	4628      	mov	r0, r5
 8007a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a8a:	f000 f821 	bl	8007ad0 <_malloc_usable_size_r>
 8007a8e:	42a0      	cmp	r0, r4
 8007a90:	d20f      	bcs.n	8007ab2 <_realloc_r+0x48>
 8007a92:	4621      	mov	r1, r4
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff fdff 	bl	8007698 <_malloc_r>
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d0f2      	beq.n	8007a86 <_realloc_r+0x1c>
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	f7ff fab6 	bl	8007014 <memcpy>
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	4638      	mov	r0, r7
 8007aac:	f7ff fda6 	bl	80075fc <_free_r>
 8007ab0:	e7e9      	b.n	8007a86 <_realloc_r+0x1c>
 8007ab2:	4635      	mov	r5, r6
 8007ab4:	e7e7      	b.n	8007a86 <_realloc_r+0x1c>

08007ab6 <__ascii_wctomb>:
 8007ab6:	b149      	cbz	r1, 8007acc <__ascii_wctomb+0x16>
 8007ab8:	2aff      	cmp	r2, #255	; 0xff
 8007aba:	bf85      	ittet	hi
 8007abc:	238a      	movhi	r3, #138	; 0x8a
 8007abe:	6003      	strhi	r3, [r0, #0]
 8007ac0:	700a      	strbls	r2, [r1, #0]
 8007ac2:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ac6:	bf98      	it	ls
 8007ac8:	2001      	movls	r0, #1
 8007aca:	4770      	bx	lr
 8007acc:	4608      	mov	r0, r1
 8007ace:	4770      	bx	lr

08007ad0 <_malloc_usable_size_r>:
 8007ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad4:	1f18      	subs	r0, r3, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfbc      	itt	lt
 8007ada:	580b      	ldrlt	r3, [r1, r0]
 8007adc:	18c0      	addlt	r0, r0, r3
 8007ade:	4770      	bx	lr

08007ae0 <_init>:
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae2:	bf00      	nop
 8007ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae6:	bc08      	pop	{r3}
 8007ae8:	469e      	mov	lr, r3
 8007aea:	4770      	bx	lr

08007aec <_fini>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	bf00      	nop
 8007af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af2:	bc08      	pop	{r3}
 8007af4:	469e      	mov	lr, r3
 8007af6:	4770      	bx	lr
